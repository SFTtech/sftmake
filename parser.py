# LR(1) parser, autogenerated on 2013-02-16 23:56:21
# generator: wisent 0.6.2, http://seehuhn.de/pages/wisent
# source: assgrammar.wi

# All parts of this file which are not taken verbatim from the input grammar
# are covered by the following notice:
#
# Copyright (C) 2008, 2009  Jochen Voss <voss@seehuhn.de>
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#   1. Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#
#   2. Redistributions in binary form must reproduce the above
#      copyright notice, this list of conditions and the following
#      disclaimer in the documentation and/or other materials provided
#      with the distribution.
#
#   3. The name of the author may not be used to endorse or promote
#      products derived from this software without specific prior
#      written permission.
#
# This software is provided by the author "as is" and any express or
# implied warranties, including, but not limited to, the implied
# warranties of merchantability and fitness for a particular purpose
# are disclaimed.  In no event shall the author be liable for any
# direct, indirect, incidental, special, exemplary, or consequential
# damages (including, but not limited to, procurement of substitute
# goods or services; loss of use, data, or profits; or business
# interruption) however caused and on any theory of liability, whether
# in contract, strict liability, or tort (including negligence or
# otherwise) arising in any way out of the use of this software, even
# if advised of the possibility of such damage.

from itertools import chain

class Unique(object):

    """Unique objects for use as markers.

    These objects are internally used to represent the start symbol
    and the end-of-input marker of the grammar.
    """

    def __init__(self, label):
        """Create a new unique object.

        `label` is a string which is used as a textual representation
        of the object.
        """
        self.label = label

    def __repr__(self):
        """Return the `label` given at object construction."""
        return self.label

    def __lt__(self, other):
        if isinstance(other, str):
            return self.label < other
        if isinstance(other, Unique):
            return self.label < other.label
        return NotImplemented()

    def __gt__(self, other):
        if isinstance(other, str):
            return self.label > other
        if isinstance(other, Unique):
            return self.label > other.label
        return NotImplemented()

class Parser(object):

    """LR(1) parser class.

    terminal symbols:
      '!', '"', '$', '&', "'", '(', ')', '+', ',', '-', ':', ';', '<', '=',
      '>', 'ALPHAALPHANUM', 'EOF', 'LITERAL', 'WHITESPACE', '[', ']', '{', '|',
      '}', '~'

    nonterminal symbols:
      'assignment', 'assignmentop', 'assignmentvarwithop',
      'assignmentvarwithoutop', 'condition', 'conjunction', 'conjunctionop',
      'disjunction', 'disjunctionop', 'doublequoted', 'doublequoted_escaped',
      'funcall', 'identifier', 'literal', 'logicunop', 'singlequoted',
      'singlequoted_escaped', 'test', 'testop', 'value', 'valuelist', 'varcall'

    production rules:
      'assignment' -> '_53?' '_2*' 'assignmentvarwithop' 'valuelist' 'EOF'
      '_2*' ->
      '_2*' -> '_2*' 'assignmentvarwithop' ','
      '_2*' -> '_2*' 'assignmentvarwithoutop' ','
      'assignmentvarwithop' -> 'identifier' '_53?' '_6?' 'assignmentop'
      'assignmentvarwithoutop' -> 'identifier' '_53?' '_6?'
      '_6?' ->
      '_6?' -> 'condition'
      'identifier' -> 'ALPHAALPHANUM'
      'condition' -> '[' '_53?' 'disjunction' '_53?' ']' '_53?'
      'assignmentop' -> ':' '='
      'assignmentop' -> '+' '='
      'assignmentop' -> '='
      'assignmentop' -> '-' '=' '_53?'
      'disjunction' -> 'conjunction' '_53?' 'disjunctionop' '_53?' 'conjunction'
      'conjunction' -> 'test' '_53?' 'conjunctionop' '_53?' 'test'
      'test' -> 'identifier' '_53?' 'testop' '_53?' 'value'
      'test' -> '(' '_53?' 'disjunction' '_53?' ')'
      'test' -> 'logicunop' '_53?' 'disjunction'
      'logicunop' -> '!'
      'disjunctionop' -> ';'
      'disjunctionop' -> '|'
      'disjunctionop' -> '|' '|'
      'conjunctionop' -> ','
      'conjunctionop' -> '&'
      'conjunctionop' -> '&' '&'
      'testop' -> '='
      'testop' -> '=' '='
      'testop' -> '!' '='
      'testop' -> '<'
      'testop' -> '>'
      'testop' -> '<' '='
      'testop' -> '>' '='
      'testop' -> '~' '='
      'testop' -> '=' '~'
      'valuelist' -> 'value' '_45*' '_53?'
      '_45*' ->
      '_45*' -> '_45*' 'WHITESPACE' 'value'
      'valuelist' ->
      'value' -> '_48+'
      '_(47)' -> 'literal'
      '_(47)' -> 'funcall'
      '_(47)' -> 'varcall'
      '_(47)' -> 'doublequoted'
      '_(47)' -> 'singlequoted'
      '_48+' -> '_(47)'
      '_48+' -> '_48+' '_(47)'
      'doublequoted' -> '"' '_50*' '"'
      '_(49)' -> 'literal'
      '_(49)' -> 'WHITESPACE'
      '_(49)' -> 'doublequoted_escaped'
      '_(49)' -> 'funcall'
      '_(49)' -> 'varcall'
      '_50*' ->
      '_50*' -> '_50*' '_(49)'
      'singlequoted' -> "'" '_52*' "'"
      '_(51)' -> 'literal'
      '_(51)' -> 'WHITESPACE'
      '_(51)' -> 'singlequoted_escaped'
      '_52*' ->
      '_52*' -> '_52*' '_(51)'
      'literal' -> 'ALPHAALPHANUM'
      'literal' -> 'LITERAL'
      'funcall' -> '$' '(' '_53?' 'value' '_45*' '_53?' ')'
      '_53?' ->
      '_53?' -> 'WHITESPACE'
      'varcall' -> '$' 'identifier'
      'varcall' -> '$' '{' 'value' '}'
      'doublequoted_escaped' -> '!'
      'doublequoted_escaped' -> '='
      'doublequoted_escaped' -> '<'
      'doublequoted_escaped' -> '>'
      'doublequoted_escaped' -> '['
      'doublequoted_escaped' -> ']'
      'doublequoted_escaped' -> '|'
      'doublequoted_escaped' -> '&'
      'doublequoted_escaped' -> ','
      'doublequoted_escaped' -> ';'
      'doublequoted_escaped' -> ':'
      'doublequoted_escaped' -> '~'
      'doublequoted_escaped' -> '+'
      'doublequoted_escaped' -> '-'
      'doublequoted_escaped' -> "'"
      'singlequoted_escaped' -> '!'
      'singlequoted_escaped' -> '='
      'singlequoted_escaped' -> '<'
      'singlequoted_escaped' -> '>'
      'singlequoted_escaped' -> '['
      'singlequoted_escaped' -> ']'
      'singlequoted_escaped' -> '|'
      'singlequoted_escaped' -> '&'
      'singlequoted_escaped' -> ','
      'singlequoted_escaped' -> ';'
      'singlequoted_escaped' -> ':'
      'singlequoted_escaped' -> '~'
      'singlequoted_escaped' -> '+'
      'singlequoted_escaped' -> '-'
      'singlequoted_escaped' -> '"'
      'singlequoted_escaped' -> '$'
      'singlequoted_escaped' -> '('
      'singlequoted_escaped' -> ')'
      'singlequoted_escaped' -> '{'
      'singlequoted_escaped' -> '}'
    """

    class ParseErrors(Exception):

        """Exception class to represent a collection of parse errors.

        Instances of this class have two attributes, `errors` and `tree`.
        `errors` is a list of tuples, each describing one error.
        Each tuple consists of the first input token which could not
        be processed and the list of grammar symbols which were allowed
        at this point.
        `tree` is a "repaired" parse tree which might be used for further
        error checking, or `None` if no repair was possible.
        """

        def __init__(self, errors, tree):
            msg = "%d parse errors"%len(errors)
            Exception.__init__(self, msg)
            self.errors = errors
            self.tree = tree

    terminals = [ '!', '"', '$', '&', "'", '(', ')', '+', ',', '-', ':', ';',
                  '<', '=', '>', 'ALPHAALPHANUM', 'EOF', 'LITERAL',
                  'WHITESPACE', '[', ']', '{', '|', '}', '~' ]
    _transparent = [ '_(47)', '_(49)', '_(51)', '_2*', '_45*', '_48+', '_50*',
                     '_52*', '_53?', '_6?' ]
    EOF = Unique('EOF')
    S = Unique('S')

    _halting_state = 149
    _reduce = {
        (0, 'ALPHAALPHANUM'): ('_53?', 0), (2, 'ALPHAALPHANUM'): ('_2*', 0),
        (4, 'EOF'): ('valuelist', 0), (6, EOF): ('assignment', 5),
        (7, 'ALPHAALPHANUM'): ('_2*', 3), (9, 'ALPHAALPHANUM'): ('_2*', 3),
        (10, '+'): ('_53?', 0), (10, ','): ('_53?', 0), (10, '-'): ('_53?', 0),
        (10, ':'): ('_53?', 0), (10, '='): ('_53?', 0), (10, '['): ('_53?', 0),
        (11, '+'): ('_6?', 0), (11, ','): ('_6?', 0), (11, '-'): ('_6?', 0),
        (11, ':'): ('_6?', 0), (11, '='): ('_6?', 0),
        (12, ','): ('assignmentvarwithoutop', 3),
        (13, '"'): ('assignmentvarwithop', 4),
        (13, '$'): ('assignmentvarwithop', 4),
        (13, "'"): ('assignmentvarwithop', 4),
        (13, ','): ('assignmentvarwithop', 4),
        (13, 'ALPHAALPHANUM'): ('assignmentvarwithop', 4),
        (13, 'EOF'): ('assignmentvarwithop', 4),
        (13, 'LITERAL'): ('assignmentvarwithop', 4), (14, '+'): ('_6?', 1),
        (14, ','): ('_6?', 1), (14, '-'): ('_6?', 1), (14, ':'): ('_6?', 1),
        (14, '='): ('_6?', 1), (15, '!'): ('identifier', 1),
        (15, '"'): ('identifier', 1), (15, '$'): ('identifier', 1),
        (15, '&'): ('identifier', 1), (15, "'"): ('identifier', 1),
        (15, ')'): ('identifier', 1), (15, '+'): ('identifier', 1),
        (15, ','): ('identifier', 1), (15, '-'): ('identifier', 1),
        (15, ':'): ('identifier', 1), (15, ';'): ('identifier', 1),
        (15, '<'): ('identifier', 1), (15, '='): ('identifier', 1),
        (15, '>'): ('identifier', 1), (15, 'ALPHAALPHANUM'): ('identifier', 1),
        (15, 'EOF'): ('identifier', 1), (15, 'LITERAL'): ('identifier', 1),
        (15, 'WHITESPACE'): ('identifier', 1), (15, '['): ('identifier', 1),
        (15, ']'): ('identifier', 1), (15, '|'): ('identifier', 1),
        (15, '}'): ('identifier', 1), (15, '~'): ('identifier', 1),
        (16, '!'): ('_53?', 0), (16, '('): ('_53?', 0),
        (16, 'ALPHAALPHANUM'): ('_53?', 0), (18, ']'): ('_53?', 0),
        (20, '+'): ('_53?', 0), (20, ','): ('_53?', 0), (20, '-'): ('_53?', 0),
        (20, ':'): ('_53?', 0), (20, '='): ('_53?', 0),
        (21, '+'): ('condition', 6), (21, ','): ('condition', 6),
        (21, '-'): ('condition', 6), (21, ':'): ('condition', 6),
        (21, '='): ('condition', 6), (23, '"'): ('assignmentop', 2),
        (23, '$'): ('assignmentop', 2), (23, "'"): ('assignmentop', 2),
        (23, ','): ('assignmentop', 2),
        (23, 'ALPHAALPHANUM'): ('assignmentop', 2),
        (23, 'EOF'): ('assignmentop', 2), (23, 'LITERAL'): ('assignmentop', 2),
        (25, '"'): ('assignmentop', 2), (25, '$'): ('assignmentop', 2),
        (25, "'"): ('assignmentop', 2), (25, ','): ('assignmentop', 2),
        (25, 'ALPHAALPHANUM'): ('assignmentop', 2),
        (25, 'EOF'): ('assignmentop', 2), (25, 'LITERAL'): ('assignmentop', 2),
        (26, '"'): ('assignmentop', 1), (26, '$'): ('assignmentop', 1),
        (26, "'"): ('assignmentop', 1), (26, ','): ('assignmentop', 1),
        (26, 'ALPHAALPHANUM'): ('assignmentop', 1),
        (26, 'EOF'): ('assignmentop', 1), (26, 'LITERAL'): ('assignmentop', 1),
        (28, '"'): ('_53?', 0), (28, '$'): ('_53?', 0), (28, "'"): ('_53?', 0),
        (28, ','): ('_53?', 0), (28, 'ALPHAALPHANUM'): ('_53?', 0),
        (28, 'EOF'): ('_53?', 0), (28, 'LITERAL'): ('_53?', 0),
        (29, '"'): ('assignmentop', 3), (29, '$'): ('assignmentop', 3),
        (29, "'"): ('assignmentop', 3), (29, ','): ('assignmentop', 3),
        (29, 'ALPHAALPHANUM'): ('assignmentop', 3),
        (29, 'EOF'): ('assignmentop', 3), (29, 'LITERAL'): ('assignmentop', 3),
        (30, ';'): ('_53?', 0), (30, '|'): ('_53?', 0), (32, '!'): ('_53?', 0),
        (32, '('): ('_53?', 0), (32, 'ALPHAALPHANUM'): ('_53?', 0),
        (34, '&'): ('disjunction', 5), (34, ')'): ('disjunction', 5),
        (34, ','): ('disjunction', 5), (34, ';'): ('disjunction', 5),
        (34, 'WHITESPACE'): ('disjunction', 5), (34, ']'): ('disjunction', 5),
        (34, '|'): ('disjunction', 5), (35, '&'): ('_53?', 0),
        (35, ','): ('_53?', 0), (37, '!'): ('_53?', 0), (37, '('): ('_53?', 0),
        (37, 'ALPHAALPHANUM'): ('_53?', 0), (39, '&'): ('conjunction', 5),
        (39, ')'): ('conjunction', 5), (39, ','): ('conjunction', 5),
        (39, ';'): ('conjunction', 5), (39, 'WHITESPACE'): ('conjunction', 5),
        (39, ']'): ('conjunction', 5), (39, '|'): ('conjunction', 5),
        (40, '!'): ('_53?', 0), (40, '<'): ('_53?', 0), (40, '='): ('_53?', 0),
        (40, '>'): ('_53?', 0), (40, '~'): ('_53?', 0), (42, '"'): ('_53?', 0),
        (42, '$'): ('_53?', 0), (42, "'"): ('_53?', 0),
        (42, 'ALPHAALPHANUM'): ('_53?', 0), (42, 'LITERAL'): ('_53?', 0),
        (44, '&'): ('test', 5), (44, ')'): ('test', 5), (44, ','): ('test', 5),
        (44, ';'): ('test', 5), (44, 'WHITESPACE'): ('test', 5),
        (44, ']'): ('test', 5), (44, '|'): ('test', 5), (45, '!'): ('_53?', 0),
        (45, '('): ('_53?', 0), (45, 'ALPHAALPHANUM'): ('_53?', 0),
        (47, ')'): ('_53?', 0), (49, '&'): ('test', 5), (49, ')'): ('test', 5),
        (49, ','): ('test', 5), (49, ';'): ('test', 5),
        (49, 'WHITESPACE'): ('test', 5), (49, ']'): ('test', 5),
        (49, '|'): ('test', 5), (50, '!'): ('_53?', 0), (50, '('): ('_53?', 0),
        (50, 'ALPHAALPHANUM'): ('_53?', 0), (52, '&'): ('test', 3),
        (52, ')'): ('test', 3), (52, ','): ('test', 3), (52, ';'): ('test', 3),
        (52, 'WHITESPACE'): ('test', 3), (52, ']'): ('test', 3),
        (52, '|'): ('test', 3), (53, '!'): ('logicunop', 1),
        (53, '('): ('logicunop', 1), (53, 'ALPHAALPHANUM'): ('logicunop', 1),
        (53, 'WHITESPACE'): ('logicunop', 1), (54, '!'): ('disjunctionop', 1),
        (54, '('): ('disjunctionop', 1),
        (54, 'ALPHAALPHANUM'): ('disjunctionop', 1),
        (54, 'WHITESPACE'): ('disjunctionop', 1),
        (55, '!'): ('disjunctionop', 1), (55, '('): ('disjunctionop', 1),
        (55, 'ALPHAALPHANUM'): ('disjunctionop', 1),
        (55, 'WHITESPACE'): ('disjunctionop', 1),
        (56, '!'): ('disjunctionop', 2), (56, '('): ('disjunctionop', 2),
        (56, 'ALPHAALPHANUM'): ('disjunctionop', 2),
        (56, 'WHITESPACE'): ('disjunctionop', 2),
        (57, '!'): ('conjunctionop', 1), (57, '('): ('conjunctionop', 1),
        (57, 'ALPHAALPHANUM'): ('conjunctionop', 1),
        (57, 'WHITESPACE'): ('conjunctionop', 1),
        (58, '!'): ('conjunctionop', 1), (58, '('): ('conjunctionop', 1),
        (58, 'ALPHAALPHANUM'): ('conjunctionop', 1),
        (58, 'WHITESPACE'): ('conjunctionop', 1),
        (59, '!'): ('conjunctionop', 2), (59, '('): ('conjunctionop', 2),
        (59, 'ALPHAALPHANUM'): ('conjunctionop', 2),
        (59, 'WHITESPACE'): ('conjunctionop', 2), (60, '"'): ('testop', 1),
        (60, '$'): ('testop', 1), (60, "'"): ('testop', 1),
        (60, 'ALPHAALPHANUM'): ('testop', 1), (60, 'LITERAL'): ('testop', 1),
        (60, 'WHITESPACE'): ('testop', 1), (61, '"'): ('testop', 2),
        (61, '$'): ('testop', 2), (61, "'"): ('testop', 2),
        (61, 'ALPHAALPHANUM'): ('testop', 2), (61, 'LITERAL'): ('testop', 2),
        (61, 'WHITESPACE'): ('testop', 2), (63, '"'): ('testop', 2),
        (63, '$'): ('testop', 2), (63, "'"): ('testop', 2),
        (63, 'ALPHAALPHANUM'): ('testop', 2), (63, 'LITERAL'): ('testop', 2),
        (63, 'WHITESPACE'): ('testop', 2), (64, '"'): ('testop', 1),
        (64, '$'): ('testop', 1), (64, "'"): ('testop', 1),
        (64, 'ALPHAALPHANUM'): ('testop', 1), (64, 'LITERAL'): ('testop', 1),
        (64, 'WHITESPACE'): ('testop', 1), (65, '"'): ('testop', 1),
        (65, '$'): ('testop', 1), (65, "'"): ('testop', 1),
        (65, 'ALPHAALPHANUM'): ('testop', 1), (65, 'LITERAL'): ('testop', 1),
        (65, 'WHITESPACE'): ('testop', 1), (66, '"'): ('testop', 2),
        (66, '$'): ('testop', 2), (66, "'"): ('testop', 2),
        (66, 'ALPHAALPHANUM'): ('testop', 2), (66, 'LITERAL'): ('testop', 2),
        (66, 'WHITESPACE'): ('testop', 2), (67, '"'): ('testop', 2),
        (67, '$'): ('testop', 2), (67, "'"): ('testop', 2),
        (67, 'ALPHAALPHANUM'): ('testop', 2), (67, 'LITERAL'): ('testop', 2),
        (67, 'WHITESPACE'): ('testop', 2), (69, '"'): ('testop', 2),
        (69, '$'): ('testop', 2), (69, "'"): ('testop', 2),
        (69, 'ALPHAALPHANUM'): ('testop', 2), (69, 'LITERAL'): ('testop', 2),
        (69, 'WHITESPACE'): ('testop', 2), (70, '"'): ('testop', 2),
        (70, '$'): ('testop', 2), (70, "'"): ('testop', 2),
        (70, 'ALPHAALPHANUM'): ('testop', 2), (70, 'LITERAL'): ('testop', 2),
        (70, 'WHITESPACE'): ('testop', 2), (71, 'EOF'): ('_45*', 0),
        (71, 'WHITESPACE'): ('_45*', 0), (72, 'EOF'): ('_53?', 0),
        (73, 'EOF'): ('valuelist', 3), (74, ')'): ('_53?', 0),
        (75, ')'): ('_53?', 1), (75, 'EOF'): ('_53?', 1),
        (76, ')'): ('_45*', 3), (76, 'EOF'): ('_45*', 3),
        (76, 'WHITESPACE'): ('_45*', 3), (77, '&'): ('value', 1),
        (77, ')'): ('value', 1), (77, ','): ('value', 1),
        (77, ';'): ('value', 1), (77, 'EOF'): ('value', 1),
        (77, 'WHITESPACE'): ('value', 1), (77, ']'): ('value', 1),
        (77, '|'): ('value', 1), (77, '}'): ('value', 1),
        (78, '"'): ('_(47)', 1), (78, '$'): ('_(47)', 1),
        (78, '&'): ('_(47)', 1), (78, "'"): ('_(47)', 1),
        (78, ')'): ('_(47)', 1), (78, ','): ('_(47)', 1),
        (78, ';'): ('_(47)', 1), (78, 'ALPHAALPHANUM'): ('_(47)', 1),
        (78, 'EOF'): ('_(47)', 1), (78, 'LITERAL'): ('_(47)', 1),
        (78, 'WHITESPACE'): ('_(47)', 1), (78, ']'): ('_(47)', 1),
        (78, '|'): ('_(47)', 1), (78, '}'): ('_(47)', 1),
        (79, '"'): ('_(47)', 1), (79, '$'): ('_(47)', 1),
        (79, '&'): ('_(47)', 1), (79, "'"): ('_(47)', 1),
        (79, ')'): ('_(47)', 1), (79, ','): ('_(47)', 1),
        (79, ';'): ('_(47)', 1), (79, 'ALPHAALPHANUM'): ('_(47)', 1),
        (79, 'EOF'): ('_(47)', 1), (79, 'LITERAL'): ('_(47)', 1),
        (79, 'WHITESPACE'): ('_(47)', 1), (79, ']'): ('_(47)', 1),
        (79, '|'): ('_(47)', 1), (79, '}'): ('_(47)', 1),
        (80, '"'): ('_(47)', 1), (80, '$'): ('_(47)', 1),
        (80, '&'): ('_(47)', 1), (80, "'"): ('_(47)', 1),
        (80, ')'): ('_(47)', 1), (80, ','): ('_(47)', 1),
        (80, ';'): ('_(47)', 1), (80, 'ALPHAALPHANUM'): ('_(47)', 1),
        (80, 'EOF'): ('_(47)', 1), (80, 'LITERAL'): ('_(47)', 1),
        (80, 'WHITESPACE'): ('_(47)', 1), (80, ']'): ('_(47)', 1),
        (80, '|'): ('_(47)', 1), (80, '}'): ('_(47)', 1),
        (81, '"'): ('_(47)', 1), (81, '$'): ('_(47)', 1),
        (81, '&'): ('_(47)', 1), (81, "'"): ('_(47)', 1),
        (81, ')'): ('_(47)', 1), (81, ','): ('_(47)', 1),
        (81, ';'): ('_(47)', 1), (81, 'ALPHAALPHANUM'): ('_(47)', 1),
        (81, 'EOF'): ('_(47)', 1), (81, 'LITERAL'): ('_(47)', 1),
        (81, 'WHITESPACE'): ('_(47)', 1), (81, ']'): ('_(47)', 1),
        (81, '|'): ('_(47)', 1), (81, '}'): ('_(47)', 1),
        (82, '"'): ('_(47)', 1), (82, '$'): ('_(47)', 1),
        (82, '&'): ('_(47)', 1), (82, "'"): ('_(47)', 1),
        (82, ')'): ('_(47)', 1), (82, ','): ('_(47)', 1),
        (82, ';'): ('_(47)', 1), (82, 'ALPHAALPHANUM'): ('_(47)', 1),
        (82, 'EOF'): ('_(47)', 1), (82, 'LITERAL'): ('_(47)', 1),
        (82, 'WHITESPACE'): ('_(47)', 1), (82, ']'): ('_(47)', 1),
        (82, '|'): ('_(47)', 1), (82, '}'): ('_(47)', 1),
        (83, '"'): ('_48+', 1), (83, '$'): ('_48+', 1), (83, '&'): ('_48+', 1),
        (83, "'"): ('_48+', 1), (83, ')'): ('_48+', 1), (83, ','): ('_48+', 1),
        (83, ';'): ('_48+', 1), (83, 'ALPHAALPHANUM'): ('_48+', 1),
        (83, 'EOF'): ('_48+', 1), (83, 'LITERAL'): ('_48+', 1),
        (83, 'WHITESPACE'): ('_48+', 1), (83, ']'): ('_48+', 1),
        (83, '|'): ('_48+', 1), (83, '}'): ('_48+', 1), (84, '"'): ('_48+', 2),
        (84, '$'): ('_48+', 2), (84, '&'): ('_48+', 2), (84, "'"): ('_48+', 2),
        (84, ')'): ('_48+', 2), (84, ','): ('_48+', 2), (84, ';'): ('_48+', 2),
        (84, 'ALPHAALPHANUM'): ('_48+', 2), (84, 'EOF'): ('_48+', 2),
        (84, 'LITERAL'): ('_48+', 2), (84, 'WHITESPACE'): ('_48+', 2),
        (84, ']'): ('_48+', 2), (84, '|'): ('_48+', 2), (84, '}'): ('_48+', 2),
        (85, '!'): ('_50*', 0), (85, '"'): ('_50*', 0), (85, '$'): ('_50*', 0),
        (85, '&'): ('_50*', 0), (85, "'"): ('_50*', 0), (85, '+'): ('_50*', 0),
        (85, ','): ('_50*', 0), (85, '-'): ('_50*', 0), (85, ':'): ('_50*', 0),
        (85, ';'): ('_50*', 0), (85, '<'): ('_50*', 0), (85, '='): ('_50*', 0),
        (85, '>'): ('_50*', 0), (85, 'ALPHAALPHANUM'): ('_50*', 0),
        (85, 'LITERAL'): ('_50*', 0), (85, 'WHITESPACE'): ('_50*', 0),
        (85, '['): ('_50*', 0), (85, ']'): ('_50*', 0), (85, '|'): ('_50*', 0),
        (85, '~'): ('_50*', 0), (87, '"'): ('doublequoted', 3),
        (87, '$'): ('doublequoted', 3), (87, '&'): ('doublequoted', 3),
        (87, "'"): ('doublequoted', 3), (87, ')'): ('doublequoted', 3),
        (87, ','): ('doublequoted', 3), (87, ';'): ('doublequoted', 3),
        (87, 'ALPHAALPHANUM'): ('doublequoted', 3),
        (87, 'EOF'): ('doublequoted', 3), (87, 'LITERAL'): ('doublequoted', 3),
        (87, 'WHITESPACE'): ('doublequoted', 3),
        (87, ']'): ('doublequoted', 3), (87, '|'): ('doublequoted', 3),
        (87, '}'): ('doublequoted', 3), (88, '!'): ('_(49)', 1),
        (88, '"'): ('_(49)', 1), (88, '$'): ('_(49)', 1),
        (88, '&'): ('_(49)', 1), (88, "'"): ('_(49)', 1),
        (88, '+'): ('_(49)', 1), (88, ','): ('_(49)', 1),
        (88, '-'): ('_(49)', 1), (88, ':'): ('_(49)', 1),
        (88, ';'): ('_(49)', 1), (88, '<'): ('_(49)', 1),
        (88, '='): ('_(49)', 1), (88, '>'): ('_(49)', 1),
        (88, 'ALPHAALPHANUM'): ('_(49)', 1), (88, 'LITERAL'): ('_(49)', 1),
        (88, 'WHITESPACE'): ('_(49)', 1), (88, '['): ('_(49)', 1),
        (88, ']'): ('_(49)', 1), (88, '|'): ('_(49)', 1),
        (88, '~'): ('_(49)', 1), (89, '!'): ('_(49)', 1),
        (89, '"'): ('_(49)', 1), (89, '$'): ('_(49)', 1),
        (89, '&'): ('_(49)', 1), (89, "'"): ('_(49)', 1),
        (89, '+'): ('_(49)', 1), (89, ','): ('_(49)', 1),
        (89, '-'): ('_(49)', 1), (89, ':'): ('_(49)', 1),
        (89, ';'): ('_(49)', 1), (89, '<'): ('_(49)', 1),
        (89, '='): ('_(49)', 1), (89, '>'): ('_(49)', 1),
        (89, 'ALPHAALPHANUM'): ('_(49)', 1), (89, 'LITERAL'): ('_(49)', 1),
        (89, 'WHITESPACE'): ('_(49)', 1), (89, '['): ('_(49)', 1),
        (89, ']'): ('_(49)', 1), (89, '|'): ('_(49)', 1),
        (89, '~'): ('_(49)', 1), (90, '!'): ('_(49)', 1),
        (90, '"'): ('_(49)', 1), (90, '$'): ('_(49)', 1),
        (90, '&'): ('_(49)', 1), (90, "'"): ('_(49)', 1),
        (90, '+'): ('_(49)', 1), (90, ','): ('_(49)', 1),
        (90, '-'): ('_(49)', 1), (90, ':'): ('_(49)', 1),
        (90, ';'): ('_(49)', 1), (90, '<'): ('_(49)', 1),
        (90, '='): ('_(49)', 1), (90, '>'): ('_(49)', 1),
        (90, 'ALPHAALPHANUM'): ('_(49)', 1), (90, 'LITERAL'): ('_(49)', 1),
        (90, 'WHITESPACE'): ('_(49)', 1), (90, '['): ('_(49)', 1),
        (90, ']'): ('_(49)', 1), (90, '|'): ('_(49)', 1),
        (90, '~'): ('_(49)', 1), (91, '!'): ('_(49)', 1),
        (91, '"'): ('_(49)', 1), (91, '$'): ('_(49)', 1),
        (91, '&'): ('_(49)', 1), (91, "'"): ('_(49)', 1),
        (91, '+'): ('_(49)', 1), (91, ','): ('_(49)', 1),
        (91, '-'): ('_(49)', 1), (91, ':'): ('_(49)', 1),
        (91, ';'): ('_(49)', 1), (91, '<'): ('_(49)', 1),
        (91, '='): ('_(49)', 1), (91, '>'): ('_(49)', 1),
        (91, 'ALPHAALPHANUM'): ('_(49)', 1), (91, 'LITERAL'): ('_(49)', 1),
        (91, 'WHITESPACE'): ('_(49)', 1), (91, '['): ('_(49)', 1),
        (91, ']'): ('_(49)', 1), (91, '|'): ('_(49)', 1),
        (91, '~'): ('_(49)', 1), (92, '!'): ('_(49)', 1),
        (92, '"'): ('_(49)', 1), (92, '$'): ('_(49)', 1),
        (92, '&'): ('_(49)', 1), (92, "'"): ('_(49)', 1),
        (92, '+'): ('_(49)', 1), (92, ','): ('_(49)', 1),
        (92, '-'): ('_(49)', 1), (92, ':'): ('_(49)', 1),
        (92, ';'): ('_(49)', 1), (92, '<'): ('_(49)', 1),
        (92, '='): ('_(49)', 1), (92, '>'): ('_(49)', 1),
        (92, 'ALPHAALPHANUM'): ('_(49)', 1), (92, 'LITERAL'): ('_(49)', 1),
        (92, 'WHITESPACE'): ('_(49)', 1), (92, '['): ('_(49)', 1),
        (92, ']'): ('_(49)', 1), (92, '|'): ('_(49)', 1),
        (92, '~'): ('_(49)', 1), (93, '!'): ('_50*', 2),
        (93, '"'): ('_50*', 2), (93, '$'): ('_50*', 2), (93, '&'): ('_50*', 2),
        (93, "'"): ('_50*', 2), (93, '+'): ('_50*', 2), (93, ','): ('_50*', 2),
        (93, '-'): ('_50*', 2), (93, ':'): ('_50*', 2), (93, ';'): ('_50*', 2),
        (93, '<'): ('_50*', 2), (93, '='): ('_50*', 2), (93, '>'): ('_50*', 2),
        (93, 'ALPHAALPHANUM'): ('_50*', 2), (93, 'LITERAL'): ('_50*', 2),
        (93, 'WHITESPACE'): ('_50*', 2), (93, '['): ('_50*', 2),
        (93, ']'): ('_50*', 2), (93, '|'): ('_50*', 2), (93, '~'): ('_50*', 2),
        (94, '!'): ('_52*', 0), (94, '"'): ('_52*', 0), (94, '$'): ('_52*', 0),
        (94, '&'): ('_52*', 0), (94, "'"): ('_52*', 0), (94, '('): ('_52*', 0),
        (94, ')'): ('_52*', 0), (94, '+'): ('_52*', 0), (94, ','): ('_52*', 0),
        (94, '-'): ('_52*', 0), (94, ':'): ('_52*', 0), (94, ';'): ('_52*', 0),
        (94, '<'): ('_52*', 0), (94, '='): ('_52*', 0), (94, '>'): ('_52*', 0),
        (94, 'ALPHAALPHANUM'): ('_52*', 0), (94, 'LITERAL'): ('_52*', 0),
        (94, 'WHITESPACE'): ('_52*', 0), (94, '['): ('_52*', 0),
        (94, ']'): ('_52*', 0), (94, '{'): ('_52*', 0), (94, '|'): ('_52*', 0),
        (94, '}'): ('_52*', 0), (94, '~'): ('_52*', 0),
        (96, '"'): ('singlequoted', 3), (96, '$'): ('singlequoted', 3),
        (96, '&'): ('singlequoted', 3), (96, "'"): ('singlequoted', 3),
        (96, ')'): ('singlequoted', 3), (96, ','): ('singlequoted', 3),
        (96, ';'): ('singlequoted', 3),
        (96, 'ALPHAALPHANUM'): ('singlequoted', 3),
        (96, 'EOF'): ('singlequoted', 3), (96, 'LITERAL'): ('singlequoted', 3),
        (96, 'WHITESPACE'): ('singlequoted', 3),
        (96, ']'): ('singlequoted', 3), (96, '|'): ('singlequoted', 3),
        (96, '}'): ('singlequoted', 3), (97, '!'): ('_(51)', 1),
        (97, '"'): ('_(51)', 1), (97, '$'): ('_(51)', 1),
        (97, '&'): ('_(51)', 1), (97, "'"): ('_(51)', 1),
        (97, '('): ('_(51)', 1), (97, ')'): ('_(51)', 1),
        (97, '+'): ('_(51)', 1), (97, ','): ('_(51)', 1),
        (97, '-'): ('_(51)', 1), (97, ':'): ('_(51)', 1),
        (97, ';'): ('_(51)', 1), (97, '<'): ('_(51)', 1),
        (97, '='): ('_(51)', 1), (97, '>'): ('_(51)', 1),
        (97, 'ALPHAALPHANUM'): ('_(51)', 1), (97, 'LITERAL'): ('_(51)', 1),
        (97, 'WHITESPACE'): ('_(51)', 1), (97, '['): ('_(51)', 1),
        (97, ']'): ('_(51)', 1), (97, '{'): ('_(51)', 1),
        (97, '|'): ('_(51)', 1), (97, '}'): ('_(51)', 1),
        (97, '~'): ('_(51)', 1), (98, '!'): ('_(51)', 1),
        (98, '"'): ('_(51)', 1), (98, '$'): ('_(51)', 1),
        (98, '&'): ('_(51)', 1), (98, "'"): ('_(51)', 1),
        (98, '('): ('_(51)', 1), (98, ')'): ('_(51)', 1),
        (98, '+'): ('_(51)', 1), (98, ','): ('_(51)', 1),
        (98, '-'): ('_(51)', 1), (98, ':'): ('_(51)', 1),
        (98, ';'): ('_(51)', 1), (98, '<'): ('_(51)', 1),
        (98, '='): ('_(51)', 1), (98, '>'): ('_(51)', 1),
        (98, 'ALPHAALPHANUM'): ('_(51)', 1), (98, 'LITERAL'): ('_(51)', 1),
        (98, 'WHITESPACE'): ('_(51)', 1), (98, '['): ('_(51)', 1),
        (98, ']'): ('_(51)', 1), (98, '{'): ('_(51)', 1),
        (98, '|'): ('_(51)', 1), (98, '}'): ('_(51)', 1),
        (98, '~'): ('_(51)', 1), (99, '!'): ('_(51)', 1),
        (99, '"'): ('_(51)', 1), (99, '$'): ('_(51)', 1),
        (99, '&'): ('_(51)', 1), (99, "'"): ('_(51)', 1),
        (99, '('): ('_(51)', 1), (99, ')'): ('_(51)', 1),
        (99, '+'): ('_(51)', 1), (99, ','): ('_(51)', 1),
        (99, '-'): ('_(51)', 1), (99, ':'): ('_(51)', 1),
        (99, ';'): ('_(51)', 1), (99, '<'): ('_(51)', 1),
        (99, '='): ('_(51)', 1), (99, '>'): ('_(51)', 1),
        (99, 'ALPHAALPHANUM'): ('_(51)', 1), (99, 'LITERAL'): ('_(51)', 1),
        (99, 'WHITESPACE'): ('_(51)', 1), (99, '['): ('_(51)', 1),
        (99, ']'): ('_(51)', 1), (99, '{'): ('_(51)', 1),
        (99, '|'): ('_(51)', 1), (99, '}'): ('_(51)', 1),
        (99, '~'): ('_(51)', 1), (100, '!'): ('_52*', 2),
        (100, '"'): ('_52*', 2), (100, '$'): ('_52*', 2),
        (100, '&'): ('_52*', 2), (100, "'"): ('_52*', 2),
        (100, '('): ('_52*', 2), (100, ')'): ('_52*', 2),
        (100, '+'): ('_52*', 2), (100, ','): ('_52*', 2),
        (100, '-'): ('_52*', 2), (100, ':'): ('_52*', 2),
        (100, ';'): ('_52*', 2), (100, '<'): ('_52*', 2),
        (100, '='): ('_52*', 2), (100, '>'): ('_52*', 2),
        (100, 'ALPHAALPHANUM'): ('_52*', 2), (100, 'LITERAL'): ('_52*', 2),
        (100, 'WHITESPACE'): ('_52*', 2), (100, '['): ('_52*', 2),
        (100, ']'): ('_52*', 2), (100, '{'): ('_52*', 2),
        (100, '|'): ('_52*', 2), (100, '}'): ('_52*', 2),
        (100, '~'): ('_52*', 2), (101, '!'): ('literal', 1),
        (101, '"'): ('literal', 1), (101, '$'): ('literal', 1),
        (101, '&'): ('literal', 1), (101, "'"): ('literal', 1),
        (101, '('): ('literal', 1), (101, ')'): ('literal', 1),
        (101, '+'): ('literal', 1), (101, ','): ('literal', 1),
        (101, '-'): ('literal', 1), (101, ':'): ('literal', 1),
        (101, ';'): ('literal', 1), (101, '<'): ('literal', 1),
        (101, '='): ('literal', 1), (101, '>'): ('literal', 1),
        (101, 'ALPHAALPHANUM'): ('literal', 1), (101, 'EOF'): ('literal', 1),
        (101, 'LITERAL'): ('literal', 1), (101, 'WHITESPACE'): ('literal', 1),
        (101, '['): ('literal', 1), (101, ']'): ('literal', 1),
        (101, '{'): ('literal', 1), (101, '|'): ('literal', 1),
        (101, '}'): ('literal', 1), (101, '~'): ('literal', 1),
        (102, '!'): ('literal', 1), (102, '"'): ('literal', 1),
        (102, '$'): ('literal', 1), (102, '&'): ('literal', 1),
        (102, "'"): ('literal', 1), (102, '('): ('literal', 1),
        (102, ')'): ('literal', 1), (102, '+'): ('literal', 1),
        (102, ','): ('literal', 1), (102, '-'): ('literal', 1),
        (102, ':'): ('literal', 1), (102, ';'): ('literal', 1),
        (102, '<'): ('literal', 1), (102, '='): ('literal', 1),
        (102, '>'): ('literal', 1), (102, 'ALPHAALPHANUM'): ('literal', 1),
        (102, 'EOF'): ('literal', 1), (102, 'LITERAL'): ('literal', 1),
        (102, 'WHITESPACE'): ('literal', 1), (102, '['): ('literal', 1),
        (102, ']'): ('literal', 1), (102, '{'): ('literal', 1),
        (102, '|'): ('literal', 1), (102, '}'): ('literal', 1),
        (102, '~'): ('literal', 1), (104, '"'): ('_53?', 0),
        (104, '$'): ('_53?', 0), (104, "'"): ('_53?', 0),
        (104, 'ALPHAALPHANUM'): ('_53?', 0), (104, 'LITERAL'): ('_53?', 0),
        (106, ')'): ('_45*', 0), (106, 'WHITESPACE'): ('_45*', 0),
        (108, '!'): ('funcall', 7), (108, '"'): ('funcall', 7),
        (108, '$'): ('funcall', 7), (108, '&'): ('funcall', 7),
        (108, "'"): ('funcall', 7), (108, ')'): ('funcall', 7),
        (108, '+'): ('funcall', 7), (108, ','): ('funcall', 7),
        (108, '-'): ('funcall', 7), (108, ':'): ('funcall', 7),
        (108, ';'): ('funcall', 7), (108, '<'): ('funcall', 7),
        (108, '='): ('funcall', 7), (108, '>'): ('funcall', 7),
        (108, 'ALPHAALPHANUM'): ('funcall', 7), (108, 'EOF'): ('funcall', 7),
        (108, 'LITERAL'): ('funcall', 7), (108, 'WHITESPACE'): ('funcall', 7),
        (108, '['): ('funcall', 7), (108, ']'): ('funcall', 7),
        (108, '|'): ('funcall', 7), (108, '}'): ('funcall', 7),
        (108, '~'): ('funcall', 7), (109, '!'): ('_53?', 1),
        (109, '"'): ('_53?', 1), (109, '$'): ('_53?', 1),
        (109, '&'): ('_53?', 1), (109, "'"): ('_53?', 1),
        (109, '('): ('_53?', 1), (109, ')'): ('_53?', 1),
        (109, '+'): ('_53?', 1), (109, ','): ('_53?', 1),
        (109, '-'): ('_53?', 1), (109, ':'): ('_53?', 1),
        (109, ';'): ('_53?', 1), (109, '<'): ('_53?', 1),
        (109, '='): ('_53?', 1), (109, '>'): ('_53?', 1),
        (109, 'ALPHAALPHANUM'): ('_53?', 1), (109, 'EOF'): ('_53?', 1),
        (109, 'LITERAL'): ('_53?', 1), (109, '['): ('_53?', 1),
        (109, ']'): ('_53?', 1), (109, '|'): ('_53?', 1),
        (109, '~'): ('_53?', 1), (110, '!'): ('varcall', 2),
        (110, '"'): ('varcall', 2), (110, '$'): ('varcall', 2),
        (110, '&'): ('varcall', 2), (110, "'"): ('varcall', 2),
        (110, ')'): ('varcall', 2), (110, '+'): ('varcall', 2),
        (110, ','): ('varcall', 2), (110, '-'): ('varcall', 2),
        (110, ':'): ('varcall', 2), (110, ';'): ('varcall', 2),
        (110, '<'): ('varcall', 2), (110, '='): ('varcall', 2),
        (110, '>'): ('varcall', 2), (110, 'ALPHAALPHANUM'): ('varcall', 2),
        (110, 'EOF'): ('varcall', 2), (110, 'LITERAL'): ('varcall', 2),
        (110, 'WHITESPACE'): ('varcall', 2), (110, '['): ('varcall', 2),
        (110, ']'): ('varcall', 2), (110, '|'): ('varcall', 2),
        (110, '}'): ('varcall', 2), (110, '~'): ('varcall', 2),
        (113, '!'): ('varcall', 4), (113, '"'): ('varcall', 4),
        (113, '$'): ('varcall', 4), (113, '&'): ('varcall', 4),
        (113, "'"): ('varcall', 4), (113, ')'): ('varcall', 4),
        (113, '+'): ('varcall', 4), (113, ','): ('varcall', 4),
        (113, '-'): ('varcall', 4), (113, ':'): ('varcall', 4),
        (113, ';'): ('varcall', 4), (113, '<'): ('varcall', 4),
        (113, '='): ('varcall', 4), (113, '>'): ('varcall', 4),
        (113, 'ALPHAALPHANUM'): ('varcall', 4), (113, 'EOF'): ('varcall', 4),
        (113, 'LITERAL'): ('varcall', 4), (113, 'WHITESPACE'): ('varcall', 4),
        (113, '['): ('varcall', 4), (113, ']'): ('varcall', 4),
        (113, '|'): ('varcall', 4), (113, '}'): ('varcall', 4),
        (113, '~'): ('varcall', 4), (114, '!'): ('doublequoted_escaped', 1),
        (114, '"'): ('doublequoted_escaped', 1),
        (114, '$'): ('doublequoted_escaped', 1),
        (114, '&'): ('doublequoted_escaped', 1),
        (114, "'"): ('doublequoted_escaped', 1),
        (114, '+'): ('doublequoted_escaped', 1),
        (114, ','): ('doublequoted_escaped', 1),
        (114, '-'): ('doublequoted_escaped', 1),
        (114, ':'): ('doublequoted_escaped', 1),
        (114, ';'): ('doublequoted_escaped', 1),
        (114, '<'): ('doublequoted_escaped', 1),
        (114, '='): ('doublequoted_escaped', 1),
        (114, '>'): ('doublequoted_escaped', 1),
        (114, 'ALPHAALPHANUM'): ('doublequoted_escaped', 1),
        (114, 'LITERAL'): ('doublequoted_escaped', 1),
        (114, 'WHITESPACE'): ('doublequoted_escaped', 1),
        (114, '['): ('doublequoted_escaped', 1),
        (114, ']'): ('doublequoted_escaped', 1),
        (114, '|'): ('doublequoted_escaped', 1),
        (114, '~'): ('doublequoted_escaped', 1),
        (115, '!'): ('doublequoted_escaped', 1),
        (115, '"'): ('doublequoted_escaped', 1),
        (115, '$'): ('doublequoted_escaped', 1),
        (115, '&'): ('doublequoted_escaped', 1),
        (115, "'"): ('doublequoted_escaped', 1),
        (115, '+'): ('doublequoted_escaped', 1),
        (115, ','): ('doublequoted_escaped', 1),
        (115, '-'): ('doublequoted_escaped', 1),
        (115, ':'): ('doublequoted_escaped', 1),
        (115, ';'): ('doublequoted_escaped', 1),
        (115, '<'): ('doublequoted_escaped', 1),
        (115, '='): ('doublequoted_escaped', 1),
        (115, '>'): ('doublequoted_escaped', 1),
        (115, 'ALPHAALPHANUM'): ('doublequoted_escaped', 1),
        (115, 'LITERAL'): ('doublequoted_escaped', 1),
        (115, 'WHITESPACE'): ('doublequoted_escaped', 1),
        (115, '['): ('doublequoted_escaped', 1),
        (115, ']'): ('doublequoted_escaped', 1),
        (115, '|'): ('doublequoted_escaped', 1),
        (115, '~'): ('doublequoted_escaped', 1),
        (116, '!'): ('doublequoted_escaped', 1),
        (116, '"'): ('doublequoted_escaped', 1),
        (116, '$'): ('doublequoted_escaped', 1),
        (116, '&'): ('doublequoted_escaped', 1),
        (116, "'"): ('doublequoted_escaped', 1),
        (116, '+'): ('doublequoted_escaped', 1),
        (116, ','): ('doublequoted_escaped', 1),
        (116, '-'): ('doublequoted_escaped', 1),
        (116, ':'): ('doublequoted_escaped', 1),
        (116, ';'): ('doublequoted_escaped', 1),
        (116, '<'): ('doublequoted_escaped', 1),
        (116, '='): ('doublequoted_escaped', 1),
        (116, '>'): ('doublequoted_escaped', 1),
        (116, 'ALPHAALPHANUM'): ('doublequoted_escaped', 1),
        (116, 'LITERAL'): ('doublequoted_escaped', 1),
        (116, 'WHITESPACE'): ('doublequoted_escaped', 1),
        (116, '['): ('doublequoted_escaped', 1),
        (116, ']'): ('doublequoted_escaped', 1),
        (116, '|'): ('doublequoted_escaped', 1),
        (116, '~'): ('doublequoted_escaped', 1),
        (117, '!'): ('doublequoted_escaped', 1),
        (117, '"'): ('doublequoted_escaped', 1),
        (117, '$'): ('doublequoted_escaped', 1),
        (117, '&'): ('doublequoted_escaped', 1),
        (117, "'"): ('doublequoted_escaped', 1),
        (117, '+'): ('doublequoted_escaped', 1),
        (117, ','): ('doublequoted_escaped', 1),
        (117, '-'): ('doublequoted_escaped', 1),
        (117, ':'): ('doublequoted_escaped', 1),
        (117, ';'): ('doublequoted_escaped', 1),
        (117, '<'): ('doublequoted_escaped', 1),
        (117, '='): ('doublequoted_escaped', 1),
        (117, '>'): ('doublequoted_escaped', 1),
        (117, 'ALPHAALPHANUM'): ('doublequoted_escaped', 1),
        (117, 'LITERAL'): ('doublequoted_escaped', 1),
        (117, 'WHITESPACE'): ('doublequoted_escaped', 1),
        (117, '['): ('doublequoted_escaped', 1),
        (117, ']'): ('doublequoted_escaped', 1),
        (117, '|'): ('doublequoted_escaped', 1),
        (117, '~'): ('doublequoted_escaped', 1),
        (118, '!'): ('doublequoted_escaped', 1),
        (118, '"'): ('doublequoted_escaped', 1),
        (118, '$'): ('doublequoted_escaped', 1),
        (118, '&'): ('doublequoted_escaped', 1),
        (118, "'"): ('doublequoted_escaped', 1),
        (118, '+'): ('doublequoted_escaped', 1),
        (118, ','): ('doublequoted_escaped', 1),
        (118, '-'): ('doublequoted_escaped', 1),
        (118, ':'): ('doublequoted_escaped', 1),
        (118, ';'): ('doublequoted_escaped', 1),
        (118, '<'): ('doublequoted_escaped', 1),
        (118, '='): ('doublequoted_escaped', 1),
        (118, '>'): ('doublequoted_escaped', 1),
        (118, 'ALPHAALPHANUM'): ('doublequoted_escaped', 1),
        (118, 'LITERAL'): ('doublequoted_escaped', 1),
        (118, 'WHITESPACE'): ('doublequoted_escaped', 1),
        (118, '['): ('doublequoted_escaped', 1),
        (118, ']'): ('doublequoted_escaped', 1),
        (118, '|'): ('doublequoted_escaped', 1),
        (118, '~'): ('doublequoted_escaped', 1),
        (119, '!'): ('doublequoted_escaped', 1),
        (119, '"'): ('doublequoted_escaped', 1),
        (119, '$'): ('doublequoted_escaped', 1),
        (119, '&'): ('doublequoted_escaped', 1),
        (119, "'"): ('doublequoted_escaped', 1),
        (119, '+'): ('doublequoted_escaped', 1),
        (119, ','): ('doublequoted_escaped', 1),
        (119, '-'): ('doublequoted_escaped', 1),
        (119, ':'): ('doublequoted_escaped', 1),
        (119, ';'): ('doublequoted_escaped', 1),
        (119, '<'): ('doublequoted_escaped', 1),
        (119, '='): ('doublequoted_escaped', 1),
        (119, '>'): ('doublequoted_escaped', 1),
        (119, 'ALPHAALPHANUM'): ('doublequoted_escaped', 1),
        (119, 'LITERAL'): ('doublequoted_escaped', 1),
        (119, 'WHITESPACE'): ('doublequoted_escaped', 1),
        (119, '['): ('doublequoted_escaped', 1),
        (119, ']'): ('doublequoted_escaped', 1),
        (119, '|'): ('doublequoted_escaped', 1),
        (119, '~'): ('doublequoted_escaped', 1),
        (120, '!'): ('doublequoted_escaped', 1),
        (120, '"'): ('doublequoted_escaped', 1),
        (120, '$'): ('doublequoted_escaped', 1),
        (120, '&'): ('doublequoted_escaped', 1),
        (120, "'"): ('doublequoted_escaped', 1),
        (120, '+'): ('doublequoted_escaped', 1),
        (120, ','): ('doublequoted_escaped', 1),
        (120, '-'): ('doublequoted_escaped', 1),
        (120, ':'): ('doublequoted_escaped', 1),
        (120, ';'): ('doublequoted_escaped', 1),
        (120, '<'): ('doublequoted_escaped', 1),
        (120, '='): ('doublequoted_escaped', 1),
        (120, '>'): ('doublequoted_escaped', 1),
        (120, 'ALPHAALPHANUM'): ('doublequoted_escaped', 1),
        (120, 'LITERAL'): ('doublequoted_escaped', 1),
        (120, 'WHITESPACE'): ('doublequoted_escaped', 1),
        (120, '['): ('doublequoted_escaped', 1),
        (120, ']'): ('doublequoted_escaped', 1),
        (120, '|'): ('doublequoted_escaped', 1),
        (120, '~'): ('doublequoted_escaped', 1),
        (121, '!'): ('doublequoted_escaped', 1),
        (121, '"'): ('doublequoted_escaped', 1),
        (121, '$'): ('doublequoted_escaped', 1),
        (121, '&'): ('doublequoted_escaped', 1),
        (121, "'"): ('doublequoted_escaped', 1),
        (121, '+'): ('doublequoted_escaped', 1),
        (121, ','): ('doublequoted_escaped', 1),
        (121, '-'): ('doublequoted_escaped', 1),
        (121, ':'): ('doublequoted_escaped', 1),
        (121, ';'): ('doublequoted_escaped', 1),
        (121, '<'): ('doublequoted_escaped', 1),
        (121, '='): ('doublequoted_escaped', 1),
        (121, '>'): ('doublequoted_escaped', 1),
        (121, 'ALPHAALPHANUM'): ('doublequoted_escaped', 1),
        (121, 'LITERAL'): ('doublequoted_escaped', 1),
        (121, 'WHITESPACE'): ('doublequoted_escaped', 1),
        (121, '['): ('doublequoted_escaped', 1),
        (121, ']'): ('doublequoted_escaped', 1),
        (121, '|'): ('doublequoted_escaped', 1),
        (121, '~'): ('doublequoted_escaped', 1),
        (122, '!'): ('doublequoted_escaped', 1),
        (122, '"'): ('doublequoted_escaped', 1),
        (122, '$'): ('doublequoted_escaped', 1),
        (122, '&'): ('doublequoted_escaped', 1),
        (122, "'"): ('doublequoted_escaped', 1),
        (122, '+'): ('doublequoted_escaped', 1),
        (122, ','): ('doublequoted_escaped', 1),
        (122, '-'): ('doublequoted_escaped', 1),
        (122, ':'): ('doublequoted_escaped', 1),
        (122, ';'): ('doublequoted_escaped', 1),
        (122, '<'): ('doublequoted_escaped', 1),
        (122, '='): ('doublequoted_escaped', 1),
        (122, '>'): ('doublequoted_escaped', 1),
        (122, 'ALPHAALPHANUM'): ('doublequoted_escaped', 1),
        (122, 'LITERAL'): ('doublequoted_escaped', 1),
        (122, 'WHITESPACE'): ('doublequoted_escaped', 1),
        (122, '['): ('doublequoted_escaped', 1),
        (122, ']'): ('doublequoted_escaped', 1),
        (122, '|'): ('doublequoted_escaped', 1),
        (122, '~'): ('doublequoted_escaped', 1),
        (123, '!'): ('doublequoted_escaped', 1),
        (123, '"'): ('doublequoted_escaped', 1),
        (123, '$'): ('doublequoted_escaped', 1),
        (123, '&'): ('doublequoted_escaped', 1),
        (123, "'"): ('doublequoted_escaped', 1),
        (123, '+'): ('doublequoted_escaped', 1),
        (123, ','): ('doublequoted_escaped', 1),
        (123, '-'): ('doublequoted_escaped', 1),
        (123, ':'): ('doublequoted_escaped', 1),
        (123, ';'): ('doublequoted_escaped', 1),
        (123, '<'): ('doublequoted_escaped', 1),
        (123, '='): ('doublequoted_escaped', 1),
        (123, '>'): ('doublequoted_escaped', 1),
        (123, 'ALPHAALPHANUM'): ('doublequoted_escaped', 1),
        (123, 'LITERAL'): ('doublequoted_escaped', 1),
        (123, 'WHITESPACE'): ('doublequoted_escaped', 1),
        (123, '['): ('doublequoted_escaped', 1),
        (123, ']'): ('doublequoted_escaped', 1),
        (123, '|'): ('doublequoted_escaped', 1),
        (123, '~'): ('doublequoted_escaped', 1),
        (124, '!'): ('doublequoted_escaped', 1),
        (124, '"'): ('doublequoted_escaped', 1),
        (124, '$'): ('doublequoted_escaped', 1),
        (124, '&'): ('doublequoted_escaped', 1),
        (124, "'"): ('doublequoted_escaped', 1),
        (124, '+'): ('doublequoted_escaped', 1),
        (124, ','): ('doublequoted_escaped', 1),
        (124, '-'): ('doublequoted_escaped', 1),
        (124, ':'): ('doublequoted_escaped', 1),
        (124, ';'): ('doublequoted_escaped', 1),
        (124, '<'): ('doublequoted_escaped', 1),
        (124, '='): ('doublequoted_escaped', 1),
        (124, '>'): ('doublequoted_escaped', 1),
        (124, 'ALPHAALPHANUM'): ('doublequoted_escaped', 1),
        (124, 'LITERAL'): ('doublequoted_escaped', 1),
        (124, 'WHITESPACE'): ('doublequoted_escaped', 1),
        (124, '['): ('doublequoted_escaped', 1),
        (124, ']'): ('doublequoted_escaped', 1),
        (124, '|'): ('doublequoted_escaped', 1),
        (124, '~'): ('doublequoted_escaped', 1),
        (125, '!'): ('doublequoted_escaped', 1),
        (125, '"'): ('doublequoted_escaped', 1),
        (125, '$'): ('doublequoted_escaped', 1),
        (125, '&'): ('doublequoted_escaped', 1),
        (125, "'"): ('doublequoted_escaped', 1),
        (125, '+'): ('doublequoted_escaped', 1),
        (125, ','): ('doublequoted_escaped', 1),
        (125, '-'): ('doublequoted_escaped', 1),
        (125, ':'): ('doublequoted_escaped', 1),
        (125, ';'): ('doublequoted_escaped', 1),
        (125, '<'): ('doublequoted_escaped', 1),
        (125, '='): ('doublequoted_escaped', 1),
        (125, '>'): ('doublequoted_escaped', 1),
        (125, 'ALPHAALPHANUM'): ('doublequoted_escaped', 1),
        (125, 'LITERAL'): ('doublequoted_escaped', 1),
        (125, 'WHITESPACE'): ('doublequoted_escaped', 1),
        (125, '['): ('doublequoted_escaped', 1),
        (125, ']'): ('doublequoted_escaped', 1),
        (125, '|'): ('doublequoted_escaped', 1),
        (125, '~'): ('doublequoted_escaped', 1),
        (126, '!'): ('doublequoted_escaped', 1),
        (126, '"'): ('doublequoted_escaped', 1),
        (126, '$'): ('doublequoted_escaped', 1),
        (126, '&'): ('doublequoted_escaped', 1),
        (126, "'"): ('doublequoted_escaped', 1),
        (126, '+'): ('doublequoted_escaped', 1),
        (126, ','): ('doublequoted_escaped', 1),
        (126, '-'): ('doublequoted_escaped', 1),
        (126, ':'): ('doublequoted_escaped', 1),
        (126, ';'): ('doublequoted_escaped', 1),
        (126, '<'): ('doublequoted_escaped', 1),
        (126, '='): ('doublequoted_escaped', 1),
        (126, '>'): ('doublequoted_escaped', 1),
        (126, 'ALPHAALPHANUM'): ('doublequoted_escaped', 1),
        (126, 'LITERAL'): ('doublequoted_escaped', 1),
        (126, 'WHITESPACE'): ('doublequoted_escaped', 1),
        (126, '['): ('doublequoted_escaped', 1),
        (126, ']'): ('doublequoted_escaped', 1),
        (126, '|'): ('doublequoted_escaped', 1),
        (126, '~'): ('doublequoted_escaped', 1),
        (127, '!'): ('doublequoted_escaped', 1),
        (127, '"'): ('doublequoted_escaped', 1),
        (127, '$'): ('doublequoted_escaped', 1),
        (127, '&'): ('doublequoted_escaped', 1),
        (127, "'"): ('doublequoted_escaped', 1),
        (127, '+'): ('doublequoted_escaped', 1),
        (127, ','): ('doublequoted_escaped', 1),
        (127, '-'): ('doublequoted_escaped', 1),
        (127, ':'): ('doublequoted_escaped', 1),
        (127, ';'): ('doublequoted_escaped', 1),
        (127, '<'): ('doublequoted_escaped', 1),
        (127, '='): ('doublequoted_escaped', 1),
        (127, '>'): ('doublequoted_escaped', 1),
        (127, 'ALPHAALPHANUM'): ('doublequoted_escaped', 1),
        (127, 'LITERAL'): ('doublequoted_escaped', 1),
        (127, 'WHITESPACE'): ('doublequoted_escaped', 1),
        (127, '['): ('doublequoted_escaped', 1),
        (127, ']'): ('doublequoted_escaped', 1),
        (127, '|'): ('doublequoted_escaped', 1),
        (127, '~'): ('doublequoted_escaped', 1),
        (128, '!'): ('doublequoted_escaped', 1),
        (128, '"'): ('doublequoted_escaped', 1),
        (128, '$'): ('doublequoted_escaped', 1),
        (128, '&'): ('doublequoted_escaped', 1),
        (128, "'"): ('doublequoted_escaped', 1),
        (128, '+'): ('doublequoted_escaped', 1),
        (128, ','): ('doublequoted_escaped', 1),
        (128, '-'): ('doublequoted_escaped', 1),
        (128, ':'): ('doublequoted_escaped', 1),
        (128, ';'): ('doublequoted_escaped', 1),
        (128, '<'): ('doublequoted_escaped', 1),
        (128, '='): ('doublequoted_escaped', 1),
        (128, '>'): ('doublequoted_escaped', 1),
        (128, 'ALPHAALPHANUM'): ('doublequoted_escaped', 1),
        (128, 'LITERAL'): ('doublequoted_escaped', 1),
        (128, 'WHITESPACE'): ('doublequoted_escaped', 1),
        (128, '['): ('doublequoted_escaped', 1),
        (128, ']'): ('doublequoted_escaped', 1),
        (128, '|'): ('doublequoted_escaped', 1),
        (128, '~'): ('doublequoted_escaped', 1),
        (129, '!'): ('singlequoted_escaped', 1),
        (129, '"'): ('singlequoted_escaped', 1),
        (129, '$'): ('singlequoted_escaped', 1),
        (129, '&'): ('singlequoted_escaped', 1),
        (129, "'"): ('singlequoted_escaped', 1),
        (129, '('): ('singlequoted_escaped', 1),
        (129, ')'): ('singlequoted_escaped', 1),
        (129, '+'): ('singlequoted_escaped', 1),
        (129, ','): ('singlequoted_escaped', 1),
        (129, '-'): ('singlequoted_escaped', 1),
        (129, ':'): ('singlequoted_escaped', 1),
        (129, ';'): ('singlequoted_escaped', 1),
        (129, '<'): ('singlequoted_escaped', 1),
        (129, '='): ('singlequoted_escaped', 1),
        (129, '>'): ('singlequoted_escaped', 1),
        (129, 'ALPHAALPHANUM'): ('singlequoted_escaped', 1),
        (129, 'LITERAL'): ('singlequoted_escaped', 1),
        (129, 'WHITESPACE'): ('singlequoted_escaped', 1),
        (129, '['): ('singlequoted_escaped', 1),
        (129, ']'): ('singlequoted_escaped', 1),
        (129, '{'): ('singlequoted_escaped', 1),
        (129, '|'): ('singlequoted_escaped', 1),
        (129, '}'): ('singlequoted_escaped', 1),
        (129, '~'): ('singlequoted_escaped', 1),
        (130, '!'): ('singlequoted_escaped', 1),
        (130, '"'): ('singlequoted_escaped', 1),
        (130, '$'): ('singlequoted_escaped', 1),
        (130, '&'): ('singlequoted_escaped', 1),
        (130, "'"): ('singlequoted_escaped', 1),
        (130, '('): ('singlequoted_escaped', 1),
        (130, ')'): ('singlequoted_escaped', 1),
        (130, '+'): ('singlequoted_escaped', 1),
        (130, ','): ('singlequoted_escaped', 1),
        (130, '-'): ('singlequoted_escaped', 1),
        (130, ':'): ('singlequoted_escaped', 1),
        (130, ';'): ('singlequoted_escaped', 1),
        (130, '<'): ('singlequoted_escaped', 1),
        (130, '='): ('singlequoted_escaped', 1),
        (130, '>'): ('singlequoted_escaped', 1),
        (130, 'ALPHAALPHANUM'): ('singlequoted_escaped', 1),
        (130, 'LITERAL'): ('singlequoted_escaped', 1),
        (130, 'WHITESPACE'): ('singlequoted_escaped', 1),
        (130, '['): ('singlequoted_escaped', 1),
        (130, ']'): ('singlequoted_escaped', 1),
        (130, '{'): ('singlequoted_escaped', 1),
        (130, '|'): ('singlequoted_escaped', 1),
        (130, '}'): ('singlequoted_escaped', 1),
        (130, '~'): ('singlequoted_escaped', 1),
        (131, '!'): ('singlequoted_escaped', 1),
        (131, '"'): ('singlequoted_escaped', 1),
        (131, '$'): ('singlequoted_escaped', 1),
        (131, '&'): ('singlequoted_escaped', 1),
        (131, "'"): ('singlequoted_escaped', 1),
        (131, '('): ('singlequoted_escaped', 1),
        (131, ')'): ('singlequoted_escaped', 1),
        (131, '+'): ('singlequoted_escaped', 1),
        (131, ','): ('singlequoted_escaped', 1),
        (131, '-'): ('singlequoted_escaped', 1),
        (131, ':'): ('singlequoted_escaped', 1),
        (131, ';'): ('singlequoted_escaped', 1),
        (131, '<'): ('singlequoted_escaped', 1),
        (131, '='): ('singlequoted_escaped', 1),
        (131, '>'): ('singlequoted_escaped', 1),
        (131, 'ALPHAALPHANUM'): ('singlequoted_escaped', 1),
        (131, 'LITERAL'): ('singlequoted_escaped', 1),
        (131, 'WHITESPACE'): ('singlequoted_escaped', 1),
        (131, '['): ('singlequoted_escaped', 1),
        (131, ']'): ('singlequoted_escaped', 1),
        (131, '{'): ('singlequoted_escaped', 1),
        (131, '|'): ('singlequoted_escaped', 1),
        (131, '}'): ('singlequoted_escaped', 1),
        (131, '~'): ('singlequoted_escaped', 1),
        (132, '!'): ('singlequoted_escaped', 1),
        (132, '"'): ('singlequoted_escaped', 1),
        (132, '$'): ('singlequoted_escaped', 1),
        (132, '&'): ('singlequoted_escaped', 1),
        (132, "'"): ('singlequoted_escaped', 1),
        (132, '('): ('singlequoted_escaped', 1),
        (132, ')'): ('singlequoted_escaped', 1),
        (132, '+'): ('singlequoted_escaped', 1),
        (132, ','): ('singlequoted_escaped', 1),
        (132, '-'): ('singlequoted_escaped', 1),
        (132, ':'): ('singlequoted_escaped', 1),
        (132, ';'): ('singlequoted_escaped', 1),
        (132, '<'): ('singlequoted_escaped', 1),
        (132, '='): ('singlequoted_escaped', 1),
        (132, '>'): ('singlequoted_escaped', 1),
        (132, 'ALPHAALPHANUM'): ('singlequoted_escaped', 1),
        (132, 'LITERAL'): ('singlequoted_escaped', 1),
        (132, 'WHITESPACE'): ('singlequoted_escaped', 1),
        (132, '['): ('singlequoted_escaped', 1),
        (132, ']'): ('singlequoted_escaped', 1),
        (132, '{'): ('singlequoted_escaped', 1),
        (132, '|'): ('singlequoted_escaped', 1),
        (132, '}'): ('singlequoted_escaped', 1),
        (132, '~'): ('singlequoted_escaped', 1),
        (133, '!'): ('singlequoted_escaped', 1),
        (133, '"'): ('singlequoted_escaped', 1),
        (133, '$'): ('singlequoted_escaped', 1),
        (133, '&'): ('singlequoted_escaped', 1),
        (133, "'"): ('singlequoted_escaped', 1),
        (133, '('): ('singlequoted_escaped', 1),
        (133, ')'): ('singlequoted_escaped', 1),
        (133, '+'): ('singlequoted_escaped', 1),
        (133, ','): ('singlequoted_escaped', 1),
        (133, '-'): ('singlequoted_escaped', 1),
        (133, ':'): ('singlequoted_escaped', 1),
        (133, ';'): ('singlequoted_escaped', 1),
        (133, '<'): ('singlequoted_escaped', 1),
        (133, '='): ('singlequoted_escaped', 1),
        (133, '>'): ('singlequoted_escaped', 1),
        (133, 'ALPHAALPHANUM'): ('singlequoted_escaped', 1),
        (133, 'LITERAL'): ('singlequoted_escaped', 1),
        (133, 'WHITESPACE'): ('singlequoted_escaped', 1),
        (133, '['): ('singlequoted_escaped', 1),
        (133, ']'): ('singlequoted_escaped', 1),
        (133, '{'): ('singlequoted_escaped', 1),
        (133, '|'): ('singlequoted_escaped', 1),
        (133, '}'): ('singlequoted_escaped', 1),
        (133, '~'): ('singlequoted_escaped', 1),
        (134, '!'): ('singlequoted_escaped', 1),
        (134, '"'): ('singlequoted_escaped', 1),
        (134, '$'): ('singlequoted_escaped', 1),
        (134, '&'): ('singlequoted_escaped', 1),
        (134, "'"): ('singlequoted_escaped', 1),
        (134, '('): ('singlequoted_escaped', 1),
        (134, ')'): ('singlequoted_escaped', 1),
        (134, '+'): ('singlequoted_escaped', 1),
        (134, ','): ('singlequoted_escaped', 1),
        (134, '-'): ('singlequoted_escaped', 1),
        (134, ':'): ('singlequoted_escaped', 1),
        (134, ';'): ('singlequoted_escaped', 1),
        (134, '<'): ('singlequoted_escaped', 1),
        (134, '='): ('singlequoted_escaped', 1),
        (134, '>'): ('singlequoted_escaped', 1),
        (134, 'ALPHAALPHANUM'): ('singlequoted_escaped', 1),
        (134, 'LITERAL'): ('singlequoted_escaped', 1),
        (134, 'WHITESPACE'): ('singlequoted_escaped', 1),
        (134, '['): ('singlequoted_escaped', 1),
        (134, ']'): ('singlequoted_escaped', 1),
        (134, '{'): ('singlequoted_escaped', 1),
        (134, '|'): ('singlequoted_escaped', 1),
        (134, '}'): ('singlequoted_escaped', 1),
        (134, '~'): ('singlequoted_escaped', 1),
        (135, '!'): ('singlequoted_escaped', 1),
        (135, '"'): ('singlequoted_escaped', 1),
        (135, '$'): ('singlequoted_escaped', 1),
        (135, '&'): ('singlequoted_escaped', 1),
        (135, "'"): ('singlequoted_escaped', 1),
        (135, '('): ('singlequoted_escaped', 1),
        (135, ')'): ('singlequoted_escaped', 1),
        (135, '+'): ('singlequoted_escaped', 1),
        (135, ','): ('singlequoted_escaped', 1),
        (135, '-'): ('singlequoted_escaped', 1),
        (135, ':'): ('singlequoted_escaped', 1),
        (135, ';'): ('singlequoted_escaped', 1),
        (135, '<'): ('singlequoted_escaped', 1),
        (135, '='): ('singlequoted_escaped', 1),
        (135, '>'): ('singlequoted_escaped', 1),
        (135, 'ALPHAALPHANUM'): ('singlequoted_escaped', 1),
        (135, 'LITERAL'): ('singlequoted_escaped', 1),
        (135, 'WHITESPACE'): ('singlequoted_escaped', 1),
        (135, '['): ('singlequoted_escaped', 1),
        (135, ']'): ('singlequoted_escaped', 1),
        (135, '{'): ('singlequoted_escaped', 1),
        (135, '|'): ('singlequoted_escaped', 1),
        (135, '}'): ('singlequoted_escaped', 1),
        (135, '~'): ('singlequoted_escaped', 1),
        (136, '!'): ('singlequoted_escaped', 1),
        (136, '"'): ('singlequoted_escaped', 1),
        (136, '$'): ('singlequoted_escaped', 1),
        (136, '&'): ('singlequoted_escaped', 1),
        (136, "'"): ('singlequoted_escaped', 1),
        (136, '('): ('singlequoted_escaped', 1),
        (136, ')'): ('singlequoted_escaped', 1),
        (136, '+'): ('singlequoted_escaped', 1),
        (136, ','): ('singlequoted_escaped', 1),
        (136, '-'): ('singlequoted_escaped', 1),
        (136, ':'): ('singlequoted_escaped', 1),
        (136, ';'): ('singlequoted_escaped', 1),
        (136, '<'): ('singlequoted_escaped', 1),
        (136, '='): ('singlequoted_escaped', 1),
        (136, '>'): ('singlequoted_escaped', 1),
        (136, 'ALPHAALPHANUM'): ('singlequoted_escaped', 1),
        (136, 'LITERAL'): ('singlequoted_escaped', 1),
        (136, 'WHITESPACE'): ('singlequoted_escaped', 1),
        (136, '['): ('singlequoted_escaped', 1),
        (136, ']'): ('singlequoted_escaped', 1),
        (136, '{'): ('singlequoted_escaped', 1),
        (136, '|'): ('singlequoted_escaped', 1),
        (136, '}'): ('singlequoted_escaped', 1),
        (136, '~'): ('singlequoted_escaped', 1),
        (137, '!'): ('singlequoted_escaped', 1),
        (137, '"'): ('singlequoted_escaped', 1),
        (137, '$'): ('singlequoted_escaped', 1),
        (137, '&'): ('singlequoted_escaped', 1),
        (137, "'"): ('singlequoted_escaped', 1),
        (137, '('): ('singlequoted_escaped', 1),
        (137, ')'): ('singlequoted_escaped', 1),
        (137, '+'): ('singlequoted_escaped', 1),
        (137, ','): ('singlequoted_escaped', 1),
        (137, '-'): ('singlequoted_escaped', 1),
        (137, ':'): ('singlequoted_escaped', 1),
        (137, ';'): ('singlequoted_escaped', 1),
        (137, '<'): ('singlequoted_escaped', 1),
        (137, '='): ('singlequoted_escaped', 1),
        (137, '>'): ('singlequoted_escaped', 1),
        (137, 'ALPHAALPHANUM'): ('singlequoted_escaped', 1),
        (137, 'LITERAL'): ('singlequoted_escaped', 1),
        (137, 'WHITESPACE'): ('singlequoted_escaped', 1),
        (137, '['): ('singlequoted_escaped', 1),
        (137, ']'): ('singlequoted_escaped', 1),
        (137, '{'): ('singlequoted_escaped', 1),
        (137, '|'): ('singlequoted_escaped', 1),
        (137, '}'): ('singlequoted_escaped', 1),
        (137, '~'): ('singlequoted_escaped', 1),
        (138, '!'): ('singlequoted_escaped', 1),
        (138, '"'): ('singlequoted_escaped', 1),
        (138, '$'): ('singlequoted_escaped', 1),
        (138, '&'): ('singlequoted_escaped', 1),
        (138, "'"): ('singlequoted_escaped', 1),
        (138, '('): ('singlequoted_escaped', 1),
        (138, ')'): ('singlequoted_escaped', 1),
        (138, '+'): ('singlequoted_escaped', 1),
        (138, ','): ('singlequoted_escaped', 1),
        (138, '-'): ('singlequoted_escaped', 1),
        (138, ':'): ('singlequoted_escaped', 1),
        (138, ';'): ('singlequoted_escaped', 1),
        (138, '<'): ('singlequoted_escaped', 1),
        (138, '='): ('singlequoted_escaped', 1),
        (138, '>'): ('singlequoted_escaped', 1),
        (138, 'ALPHAALPHANUM'): ('singlequoted_escaped', 1),
        (138, 'LITERAL'): ('singlequoted_escaped', 1),
        (138, 'WHITESPACE'): ('singlequoted_escaped', 1),
        (138, '['): ('singlequoted_escaped', 1),
        (138, ']'): ('singlequoted_escaped', 1),
        (138, '{'): ('singlequoted_escaped', 1),
        (138, '|'): ('singlequoted_escaped', 1),
        (138, '}'): ('singlequoted_escaped', 1),
        (138, '~'): ('singlequoted_escaped', 1),
        (139, '!'): ('singlequoted_escaped', 1),
        (139, '"'): ('singlequoted_escaped', 1),
        (139, '$'): ('singlequoted_escaped', 1),
        (139, '&'): ('singlequoted_escaped', 1),
        (139, "'"): ('singlequoted_escaped', 1),
        (139, '('): ('singlequoted_escaped', 1),
        (139, ')'): ('singlequoted_escaped', 1),
        (139, '+'): ('singlequoted_escaped', 1),
        (139, ','): ('singlequoted_escaped', 1),
        (139, '-'): ('singlequoted_escaped', 1),
        (139, ':'): ('singlequoted_escaped', 1),
        (139, ';'): ('singlequoted_escaped', 1),
        (139, '<'): ('singlequoted_escaped', 1),
        (139, '='): ('singlequoted_escaped', 1),
        (139, '>'): ('singlequoted_escaped', 1),
        (139, 'ALPHAALPHANUM'): ('singlequoted_escaped', 1),
        (139, 'LITERAL'): ('singlequoted_escaped', 1),
        (139, 'WHITESPACE'): ('singlequoted_escaped', 1),
        (139, '['): ('singlequoted_escaped', 1),
        (139, ']'): ('singlequoted_escaped', 1),
        (139, '{'): ('singlequoted_escaped', 1),
        (139, '|'): ('singlequoted_escaped', 1),
        (139, '}'): ('singlequoted_escaped', 1),
        (139, '~'): ('singlequoted_escaped', 1),
        (140, '!'): ('singlequoted_escaped', 1),
        (140, '"'): ('singlequoted_escaped', 1),
        (140, '$'): ('singlequoted_escaped', 1),
        (140, '&'): ('singlequoted_escaped', 1),
        (140, "'"): ('singlequoted_escaped', 1),
        (140, '('): ('singlequoted_escaped', 1),
        (140, ')'): ('singlequoted_escaped', 1),
        (140, '+'): ('singlequoted_escaped', 1),
        (140, ','): ('singlequoted_escaped', 1),
        (140, '-'): ('singlequoted_escaped', 1),
        (140, ':'): ('singlequoted_escaped', 1),
        (140, ';'): ('singlequoted_escaped', 1),
        (140, '<'): ('singlequoted_escaped', 1),
        (140, '='): ('singlequoted_escaped', 1),
        (140, '>'): ('singlequoted_escaped', 1),
        (140, 'ALPHAALPHANUM'): ('singlequoted_escaped', 1),
        (140, 'LITERAL'): ('singlequoted_escaped', 1),
        (140, 'WHITESPACE'): ('singlequoted_escaped', 1),
        (140, '['): ('singlequoted_escaped', 1),
        (140, ']'): ('singlequoted_escaped', 1),
        (140, '{'): ('singlequoted_escaped', 1),
        (140, '|'): ('singlequoted_escaped', 1),
        (140, '}'): ('singlequoted_escaped', 1),
        (140, '~'): ('singlequoted_escaped', 1),
        (141, '!'): ('singlequoted_escaped', 1),
        (141, '"'): ('singlequoted_escaped', 1),
        (141, '$'): ('singlequoted_escaped', 1),
        (141, '&'): ('singlequoted_escaped', 1),
        (141, "'"): ('singlequoted_escaped', 1),
        (141, '('): ('singlequoted_escaped', 1),
        (141, ')'): ('singlequoted_escaped', 1),
        (141, '+'): ('singlequoted_escaped', 1),
        (141, ','): ('singlequoted_escaped', 1),
        (141, '-'): ('singlequoted_escaped', 1),
        (141, ':'): ('singlequoted_escaped', 1),
        (141, ';'): ('singlequoted_escaped', 1),
        (141, '<'): ('singlequoted_escaped', 1),
        (141, '='): ('singlequoted_escaped', 1),
        (141, '>'): ('singlequoted_escaped', 1),
        (141, 'ALPHAALPHANUM'): ('singlequoted_escaped', 1),
        (141, 'LITERAL'): ('singlequoted_escaped', 1),
        (141, 'WHITESPACE'): ('singlequoted_escaped', 1),
        (141, '['): ('singlequoted_escaped', 1),
        (141, ']'): ('singlequoted_escaped', 1),
        (141, '{'): ('singlequoted_escaped', 1),
        (141, '|'): ('singlequoted_escaped', 1),
        (141, '}'): ('singlequoted_escaped', 1),
        (141, '~'): ('singlequoted_escaped', 1),
        (142, '!'): ('singlequoted_escaped', 1),
        (142, '"'): ('singlequoted_escaped', 1),
        (142, '$'): ('singlequoted_escaped', 1),
        (142, '&'): ('singlequoted_escaped', 1),
        (142, "'"): ('singlequoted_escaped', 1),
        (142, '('): ('singlequoted_escaped', 1),
        (142, ')'): ('singlequoted_escaped', 1),
        (142, '+'): ('singlequoted_escaped', 1),
        (142, ','): ('singlequoted_escaped', 1),
        (142, '-'): ('singlequoted_escaped', 1),
        (142, ':'): ('singlequoted_escaped', 1),
        (142, ';'): ('singlequoted_escaped', 1),
        (142, '<'): ('singlequoted_escaped', 1),
        (142, '='): ('singlequoted_escaped', 1),
        (142, '>'): ('singlequoted_escaped', 1),
        (142, 'ALPHAALPHANUM'): ('singlequoted_escaped', 1),
        (142, 'LITERAL'): ('singlequoted_escaped', 1),
        (142, 'WHITESPACE'): ('singlequoted_escaped', 1),
        (142, '['): ('singlequoted_escaped', 1),
        (142, ']'): ('singlequoted_escaped', 1),
        (142, '{'): ('singlequoted_escaped', 1),
        (142, '|'): ('singlequoted_escaped', 1),
        (142, '}'): ('singlequoted_escaped', 1),
        (142, '~'): ('singlequoted_escaped', 1),
        (143, '!'): ('singlequoted_escaped', 1),
        (143, '"'): ('singlequoted_escaped', 1),
        (143, '$'): ('singlequoted_escaped', 1),
        (143, '&'): ('singlequoted_escaped', 1),
        (143, "'"): ('singlequoted_escaped', 1),
        (143, '('): ('singlequoted_escaped', 1),
        (143, ')'): ('singlequoted_escaped', 1),
        (143, '+'): ('singlequoted_escaped', 1),
        (143, ','): ('singlequoted_escaped', 1),
        (143, '-'): ('singlequoted_escaped', 1),
        (143, ':'): ('singlequoted_escaped', 1),
        (143, ';'): ('singlequoted_escaped', 1),
        (143, '<'): ('singlequoted_escaped', 1),
        (143, '='): ('singlequoted_escaped', 1),
        (143, '>'): ('singlequoted_escaped', 1),
        (143, 'ALPHAALPHANUM'): ('singlequoted_escaped', 1),
        (143, 'LITERAL'): ('singlequoted_escaped', 1),
        (143, 'WHITESPACE'): ('singlequoted_escaped', 1),
        (143, '['): ('singlequoted_escaped', 1),
        (143, ']'): ('singlequoted_escaped', 1),
        (143, '{'): ('singlequoted_escaped', 1),
        (143, '|'): ('singlequoted_escaped', 1),
        (143, '}'): ('singlequoted_escaped', 1),
        (143, '~'): ('singlequoted_escaped', 1),
        (144, '!'): ('singlequoted_escaped', 1),
        (144, '"'): ('singlequoted_escaped', 1),
        (144, '$'): ('singlequoted_escaped', 1),
        (144, '&'): ('singlequoted_escaped', 1),
        (144, "'"): ('singlequoted_escaped', 1),
        (144, '('): ('singlequoted_escaped', 1),
        (144, ')'): ('singlequoted_escaped', 1),
        (144, '+'): ('singlequoted_escaped', 1),
        (144, ','): ('singlequoted_escaped', 1),
        (144, '-'): ('singlequoted_escaped', 1),
        (144, ':'): ('singlequoted_escaped', 1),
        (144, ';'): ('singlequoted_escaped', 1),
        (144, '<'): ('singlequoted_escaped', 1),
        (144, '='): ('singlequoted_escaped', 1),
        (144, '>'): ('singlequoted_escaped', 1),
        (144, 'ALPHAALPHANUM'): ('singlequoted_escaped', 1),
        (144, 'LITERAL'): ('singlequoted_escaped', 1),
        (144, 'WHITESPACE'): ('singlequoted_escaped', 1),
        (144, '['): ('singlequoted_escaped', 1),
        (144, ']'): ('singlequoted_escaped', 1),
        (144, '{'): ('singlequoted_escaped', 1),
        (144, '|'): ('singlequoted_escaped', 1),
        (144, '}'): ('singlequoted_escaped', 1),
        (144, '~'): ('singlequoted_escaped', 1),
        (145, '!'): ('singlequoted_escaped', 1),
        (145, '"'): ('singlequoted_escaped', 1),
        (145, '$'): ('singlequoted_escaped', 1),
        (145, '&'): ('singlequoted_escaped', 1),
        (145, "'"): ('singlequoted_escaped', 1),
        (145, '('): ('singlequoted_escaped', 1),
        (145, ')'): ('singlequoted_escaped', 1),
        (145, '+'): ('singlequoted_escaped', 1),
        (145, ','): ('singlequoted_escaped', 1),
        (145, '-'): ('singlequoted_escaped', 1),
        (145, ':'): ('singlequoted_escaped', 1),
        (145, ';'): ('singlequoted_escaped', 1),
        (145, '<'): ('singlequoted_escaped', 1),
        (145, '='): ('singlequoted_escaped', 1),
        (145, '>'): ('singlequoted_escaped', 1),
        (145, 'ALPHAALPHANUM'): ('singlequoted_escaped', 1),
        (145, 'LITERAL'): ('singlequoted_escaped', 1),
        (145, 'WHITESPACE'): ('singlequoted_escaped', 1),
        (145, '['): ('singlequoted_escaped', 1),
        (145, ']'): ('singlequoted_escaped', 1),
        (145, '{'): ('singlequoted_escaped', 1),
        (145, '|'): ('singlequoted_escaped', 1),
        (145, '}'): ('singlequoted_escaped', 1),
        (145, '~'): ('singlequoted_escaped', 1),
        (146, '!'): ('singlequoted_escaped', 1),
        (146, '"'): ('singlequoted_escaped', 1),
        (146, '$'): ('singlequoted_escaped', 1),
        (146, '&'): ('singlequoted_escaped', 1),
        (146, "'"): ('singlequoted_escaped', 1),
        (146, '('): ('singlequoted_escaped', 1),
        (146, ')'): ('singlequoted_escaped', 1),
        (146, '+'): ('singlequoted_escaped', 1),
        (146, ','): ('singlequoted_escaped', 1),
        (146, '-'): ('singlequoted_escaped', 1),
        (146, ':'): ('singlequoted_escaped', 1),
        (146, ';'): ('singlequoted_escaped', 1),
        (146, '<'): ('singlequoted_escaped', 1),
        (146, '='): ('singlequoted_escaped', 1),
        (146, '>'): ('singlequoted_escaped', 1),
        (146, 'ALPHAALPHANUM'): ('singlequoted_escaped', 1),
        (146, 'LITERAL'): ('singlequoted_escaped', 1),
        (146, 'WHITESPACE'): ('singlequoted_escaped', 1),
        (146, '['): ('singlequoted_escaped', 1),
        (146, ']'): ('singlequoted_escaped', 1),
        (146, '{'): ('singlequoted_escaped', 1),
        (146, '|'): ('singlequoted_escaped', 1),
        (146, '}'): ('singlequoted_escaped', 1),
        (146, '~'): ('singlequoted_escaped', 1),
        (147, '!'): ('singlequoted_escaped', 1),
        (147, '"'): ('singlequoted_escaped', 1),
        (147, '$'): ('singlequoted_escaped', 1),
        (147, '&'): ('singlequoted_escaped', 1),
        (147, "'"): ('singlequoted_escaped', 1),
        (147, '('): ('singlequoted_escaped', 1),
        (147, ')'): ('singlequoted_escaped', 1),
        (147, '+'): ('singlequoted_escaped', 1),
        (147, ','): ('singlequoted_escaped', 1),
        (147, '-'): ('singlequoted_escaped', 1),
        (147, ':'): ('singlequoted_escaped', 1),
        (147, ';'): ('singlequoted_escaped', 1),
        (147, '<'): ('singlequoted_escaped', 1),
        (147, '='): ('singlequoted_escaped', 1),
        (147, '>'): ('singlequoted_escaped', 1),
        (147, 'ALPHAALPHANUM'): ('singlequoted_escaped', 1),
        (147, 'LITERAL'): ('singlequoted_escaped', 1),
        (147, 'WHITESPACE'): ('singlequoted_escaped', 1),
        (147, '['): ('singlequoted_escaped', 1),
        (147, ']'): ('singlequoted_escaped', 1),
        (147, '{'): ('singlequoted_escaped', 1),
        (147, '|'): ('singlequoted_escaped', 1),
        (147, '}'): ('singlequoted_escaped', 1),
        (147, '~'): ('singlequoted_escaped', 1),
        (148, '!'): ('singlequoted_escaped', 1),
        (148, '"'): ('singlequoted_escaped', 1),
        (148, '$'): ('singlequoted_escaped', 1),
        (148, '&'): ('singlequoted_escaped', 1),
        (148, "'"): ('singlequoted_escaped', 1),
        (148, '('): ('singlequoted_escaped', 1),
        (148, ')'): ('singlequoted_escaped', 1),
        (148, '+'): ('singlequoted_escaped', 1),
        (148, ','): ('singlequoted_escaped', 1),
        (148, '-'): ('singlequoted_escaped', 1),
        (148, ':'): ('singlequoted_escaped', 1),
        (148, ';'): ('singlequoted_escaped', 1),
        (148, '<'): ('singlequoted_escaped', 1),
        (148, '='): ('singlequoted_escaped', 1),
        (148, '>'): ('singlequoted_escaped', 1),
        (148, 'ALPHAALPHANUM'): ('singlequoted_escaped', 1),
        (148, 'LITERAL'): ('singlequoted_escaped', 1),
        (148, 'WHITESPACE'): ('singlequoted_escaped', 1),
        (148, '['): ('singlequoted_escaped', 1),
        (148, ']'): ('singlequoted_escaped', 1),
        (148, '{'): ('singlequoted_escaped', 1),
        (148, '|'): ('singlequoted_escaped', 1),
        (148, '}'): ('singlequoted_escaped', 1),
        (148, '~'): ('singlequoted_escaped', 1)
    }
    _goto = {
        (0, '_53?'): 2, (0, 'assignment'): 1, (2, '_2*'): 3,
        (3, 'assignmentvarwithop'): 4, (3, 'assignmentvarwithoutop'): 8,
        (3, 'identifier'): 10, (4, '_(47)'): 83, (4, '_48+'): 77,
        (4, 'doublequoted'): 81, (4, 'funcall'): 79, (4, 'literal'): 78,
        (4, 'singlequoted'): 82, (4, 'value'): 71, (4, 'valuelist'): 5,
        (4, 'varcall'): 80, (10, '_53?'): 11, (11, '_6?'): 12,
        (11, 'condition'): 14, (12, 'assignmentop'): 13, (16, '_53?'): 17,
        (17, 'conjunction'): 30, (17, 'disjunction'): 18,
        (17, 'identifier'): 40, (17, 'logicunop'): 50, (17, 'test'): 35,
        (18, '_53?'): 19, (20, '_53?'): 21, (28, '_53?'): 29, (30, '_53?'): 31,
        (31, 'disjunctionop'): 32, (32, '_53?'): 33, (33, 'conjunction'): 34,
        (33, 'identifier'): 40, (33, 'logicunop'): 50, (33, 'test'): 35,
        (35, '_53?'): 36, (36, 'conjunctionop'): 37, (37, '_53?'): 38,
        (38, 'identifier'): 40, (38, 'logicunop'): 50, (38, 'test'): 39,
        (40, '_53?'): 41, (41, 'testop'): 42, (42, '_53?'): 43,
        (43, '_(47)'): 83, (43, '_48+'): 77, (43, 'doublequoted'): 81,
        (43, 'funcall'): 79, (43, 'literal'): 78, (43, 'singlequoted'): 82,
        (43, 'value'): 44, (43, 'varcall'): 80, (45, '_53?'): 46,
        (46, 'conjunction'): 30, (46, 'disjunction'): 47,
        (46, 'identifier'): 40, (46, 'logicunop'): 50, (46, 'test'): 35,
        (47, '_53?'): 48, (50, '_53?'): 51, (51, 'conjunction'): 30,
        (51, 'disjunction'): 52, (51, 'identifier'): 40, (51, 'logicunop'): 50,
        (51, 'test'): 35, (71, '_45*'): 72, (72, '_53?'): 73,
        (74, '_53?'): 107, (75, '_(47)'): 83, (75, '_48+'): 77,
        (75, 'doublequoted'): 81, (75, 'funcall'): 79, (75, 'literal'): 78,
        (75, 'singlequoted'): 82, (75, 'value'): 76, (75, 'varcall'): 80,
        (77, '_(47)'): 84, (77, 'doublequoted'): 81, (77, 'funcall'): 79,
        (77, 'literal'): 78, (77, 'singlequoted'): 82, (77, 'varcall'): 80,
        (85, '_50*'): 86, (86, '_(49)'): 93, (86, 'doublequoted_escaped'): 90,
        (86, 'funcall'): 91, (86, 'literal'): 88, (86, 'varcall'): 92,
        (94, '_52*'): 95, (95, '_(51)'): 100, (95, 'literal'): 97,
        (95, 'singlequoted_escaped'): 99, (103, 'identifier'): 110,
        (104, '_53?'): 105, (105, '_(47)'): 83, (105, '_48+'): 77,
        (105, 'doublequoted'): 81, (105, 'funcall'): 79, (105, 'literal'): 78,
        (105, 'singlequoted'): 82, (105, 'value'): 106, (105, 'varcall'): 80,
        (106, '_45*'): 74, (111, '_(47)'): 83, (111, '_48+'): 77,
        (111, 'doublequoted'): 81, (111, 'funcall'): 79, (111, 'literal'): 78,
        (111, 'singlequoted'): 82, (111, 'value'): 112, (111, 'varcall'): 80
    }
    _shift = {
        (0, 'WHITESPACE'): 109, (1, EOF): 149, (3, 'ALPHAALPHANUM'): 15,
        (4, '"'): 85, (4, '$'): 103, (4, "'"): 94, (4, ','): 7,
        (4, 'ALPHAALPHANUM'): 101, (4, 'LITERAL'): 102, (5, 'EOF'): 6,
        (8, ','): 9, (10, 'WHITESPACE'): 109, (11, '['): 16, (12, '+'): 24,
        (12, '-'): 27, (12, ':'): 22, (12, '='): 26, (16, 'WHITESPACE'): 109,
        (17, '!'): 53, (17, '('): 45, (17, 'ALPHAALPHANUM'): 15,
        (18, 'WHITESPACE'): 109, (19, ']'): 20, (20, 'WHITESPACE'): 109,
        (22, '='): 23, (24, '='): 25, (27, '='): 28, (28, 'WHITESPACE'): 109,
        (30, 'WHITESPACE'): 109, (31, ';'): 54, (31, '|'): 55,
        (32, 'WHITESPACE'): 109, (33, '!'): 53, (33, '('): 45,
        (33, 'ALPHAALPHANUM'): 15, (35, 'WHITESPACE'): 109, (36, '&'): 58,
        (36, ','): 57, (37, 'WHITESPACE'): 109, (38, '!'): 53, (38, '('): 45,
        (38, 'ALPHAALPHANUM'): 15, (40, 'WHITESPACE'): 109, (41, '!'): 62,
        (41, '<'): 64, (41, '='): 60, (41, '>'): 65, (41, '~'): 68,
        (42, 'WHITESPACE'): 109, (43, '"'): 85, (43, '$'): 103, (43, "'"): 94,
        (43, 'ALPHAALPHANUM'): 101, (43, 'LITERAL'): 102,
        (45, 'WHITESPACE'): 109, (46, '!'): 53, (46, '('): 45,
        (46, 'ALPHAALPHANUM'): 15, (47, 'WHITESPACE'): 109, (48, ')'): 49,
        (50, 'WHITESPACE'): 109, (51, '!'): 53, (51, '('): 45,
        (51, 'ALPHAALPHANUM'): 15, (55, '|'): 56, (58, '&'): 59, (60, '='): 61,
        (60, '~'): 70, (62, '='): 63, (64, '='): 66, (65, '='): 67,
        (68, '='): 69, (72, 'WHITESPACE'): 75, (74, 'WHITESPACE'): 75,
        (75, '"'): 85, (75, '$'): 103, (75, "'"): 94,
        (75, 'ALPHAALPHANUM'): 101, (75, 'LITERAL'): 102, (77, '"'): 85,
        (77, '$'): 103, (77, "'"): 94, (77, 'ALPHAALPHANUM'): 101,
        (77, 'LITERAL'): 102, (86, '!'): 114, (86, '"'): 87, (86, '$'): 103,
        (86, '&'): 121, (86, "'"): 128, (86, '+'): 126, (86, ','): 122,
        (86, '-'): 127, (86, ':'): 124, (86, ';'): 123, (86, '<'): 116,
        (86, '='): 115, (86, '>'): 117, (86, 'ALPHAALPHANUM'): 101,
        (86, 'LITERAL'): 102, (86, 'WHITESPACE'): 89, (86, '['): 118,
        (86, ']'): 119, (86, '|'): 120, (86, '~'): 125, (95, '!'): 129,
        (95, '"'): 143, (95, '$'): 144, (95, '&'): 136, (95, "'"): 96,
        (95, '('): 145, (95, ')'): 146, (95, '+'): 141, (95, ','): 137,
        (95, '-'): 142, (95, ':'): 139, (95, ';'): 138, (95, '<'): 131,
        (95, '='): 130, (95, '>'): 132, (95, 'ALPHAALPHANUM'): 101,
        (95, 'LITERAL'): 102, (95, 'WHITESPACE'): 98, (95, '['): 133,
        (95, ']'): 134, (95, '{'): 147, (95, '|'): 135, (95, '}'): 148,
        (95, '~'): 140, (103, '('): 104, (103, 'ALPHAALPHANUM'): 15,
        (103, '{'): 111, (104, 'WHITESPACE'): 109, (105, '"'): 85,
        (105, '$'): 103, (105, "'"): 94, (105, 'ALPHAALPHANUM'): 101,
        (105, 'LITERAL'): 102, (107, ')'): 108, (111, '"'): 85,
        (111, '$'): 103, (111, "'"): 94, (111, 'ALPHAALPHANUM'): 101,
        (111, 'LITERAL'): 102, (112, '}'): 113
    }

    def __init__(self, max_err=None, errcorr_pre=4, errcorr_post=4):
        """Create a new parser instance.

        The constructor arguments are all optional, they control the
        handling of parse errors: `max_err` can be given to bound the
        number of errors reported during one run of the parser.
        `errcorr_pre` controls how many tokens before an invalid token
        the parser considers when trying to repair the input.
        `errcorr_post` controls how far beyond an invalid token the
        parser reads when evaluating the quality of an attempted
        repair.
        """
        self.max_err = max_err
        self.m = errcorr_pre
        self.n = errcorr_post

    @staticmethod
    def leaves(tree):
        """Iterate over the leaves of a parse tree.

        This function can be used to reconstruct the input from a
        parse tree.
        """
        if tree[0] in Parser.terminals:
            yield tree
        else:
            for x in tree[1:]:
                for t in Parser.leaves(x):
                    yield t

    def _parse(self, input, stack, state):
        """Internal function to construct a parse tree.

        'Input' is the input token stream, 'stack' is the inital stack
        and 'state' is the inital state of the automaton.

        Returns a 4-tuple (done, count, state, error).  'done' is a
        boolean indicationg whether parsing is completed, 'count' is
        number of successfully shifted tokens, and 'error' is None on
        success or else the first token which could not be parsed.
        """
        read_next = True
        count = 0
        while state != self._halting_state:
            if read_next:
                try:
                    lookahead = next(input)
                except StopIteration:
                    return (False,count,state,None)
                read_next = False
            token = lookahead[0]

            if (state,token) in self._shift:
                stack.append((state,lookahead))
                state = self._shift[(state,token)]
                read_next = True
                count += 1
            elif (state,token) in self._reduce:
                X,n = self._reduce[(state,token)]
                if n > 0:
                    state = stack[-n][0]
                    tree = [ X ]
                    for s in stack[-n:]:
                        if s[1][0] in self._transparent:
                            tree.extend(s[1][1:])
                        else:
                            tree.append(s[1])
                    tree = tuple(tree)
                    del stack[-n:]
                else:
                    tree = (X,)
                stack.append((state,tree))
                state = self._goto[(state,X)]
            else:
                return (False,count,state,lookahead)
        return (True,count,state,None)

    def _try_parse(self, input, stack, state):
        count = 0
        while state != self._halting_state and count < len(input):
            token = input[count][0]

            if (state,token) in self._shift:
                stack.append(state)
                state = self._shift[(state,token)]
                count += 1
            elif (state,token) in self._reduce:
                X,n = self._reduce[(state,token)]
                if n > 0:
                    state = stack[-n]
                    del stack[-n:]
                stack.append(state)
                state = self._goto[(state,X)]
            else:
                break
        return count

    def parse(self, input):
        """Parse the tokens from `input` and construct a parse tree.

        `input` must be an interable over tuples.  The first element
        of each tuple must be a terminal symbol of the grammar which
        is used for parsing.  All other element of the tuple are just
        copied into the constructed parse tree.

        If `input` is invalid, a ParseErrors exception is raised.
        Otherwise the function returns the parse tree.
        """
        errors = []
        input = chain(input, [(self.EOF,)])
        stack = []
        state = 0
        while True:
            done,_,state,lookahead = self._parse(input, stack, state)
            if done:
                break

            expect = [ t for s,t in list(self._reduce.keys())+list(self._shift.keys())
                       if s == state ]
            errors.append((lookahead, expect))
            if self.max_err is not None and len(errors) >= self.max_err:
                raise self.ParseErrors(errors, None)

            queue = []
            def split_input(m, stack, lookahead, input, queue):
                for s in stack:
                    for t in self.leaves(s[1]):
                        queue.append(t)
                        if len(queue) > m:
                            yield queue.pop(0)
                queue.append(lookahead)
            in2 = split_input(self.m, stack, lookahead, input, queue)
            stack = []
            done,_,state,lookahead = self._parse(in2, stack, 0)
            m = len(queue)
            for i in range(0, self.n):
                try:
                    queue.append(next(input))
                except StopIteration:
                    break

            def vary_queue(queue, m):
                for i in range(m-1, -1, -1):
                    for t in self.terminals:
                        yield queue[:i]+[(t,)]+queue[i:]
                    if queue[i][0] == self.EOF:
                        continue
                    for t in self.terminals:
                        if t == queue[i]:
                            continue
                        yield queue[:i]+[(t,)]+queue[i+1:]
                    yield queue[:i]+queue[i+1:]
            best_val = len(queue)-m+1
            best_queue = queue
            for q2 in vary_queue(queue, m):
                pos = self._try_parse(q2, [ s[0] for s in stack ], state)
                val = len(q2) - pos
                if val < best_val:
                    best_val = val
                    best_queue = q2
                    if val == len(q2):
                        break
            if best_val >= len(queue)-m+1:
                raise self.ParseErrors(errors, None)
            input = chain(best_queue, input)

        tree = stack[0][1]
        if errors:
            raise self.ParseErrors(errors, tree)
        return tree
