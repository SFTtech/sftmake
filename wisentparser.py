# LR(1) parser, autogenerated on 2013-02-17 00:05:09
# generator: wisent 0.6.2, http://seehuhn.de/pages/wisent
# source: assgrammar.wi

# All parts of this file which are not taken verbatim from the input grammar
# are covered by the following notice:
#
# Copyright (C) 2008, 2009  Jochen Voss <voss@seehuhn.de>
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#   1. Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#
#   2. Redistributions in binary form must reproduce the above
#      copyright notice, this list of conditions and the following
#      disclaimer in the documentation and/or other materials provided
#      with the distribution.
#
#   3. The name of the author may not be used to endorse or promote
#      products derived from this software without specific prior
#      written permission.
#
# This software is provided by the author "as is" and any express or
# implied warranties, including, but not limited to, the implied
# warranties of merchantability and fitness for a particular purpose
# are disclaimed.  In no event shall the author be liable for any
# direct, indirect, incidental, special, exemplary, or consequential
# damages (including, but not limited to, procurement of substitute
# goods or services; loss of use, data, or profits; or business
# interruption) however caused and on any theory of liability, whether
# in contract, strict liability, or tort (including negligence or
# otherwise) arising in any way out of the use of this software, even
# if advised of the possibility of such damage.

from itertools import chain

class Unique(object):

    """Unique objects for use as markers.

    These objects are internally used to represent the start symbol
    and the end-of-input marker of the grammar.
    """

    def __init__(self, label):
        """Create a new unique object.

        `label` is a string which is used as a textual representation
        of the object.
        """
        self.label = label

    def __repr__(self):
        """Return the `label` given at object construction."""
        return self.label

    def __lt__(self, other):
        if isinstance(other, str):
            return self.label < other
        if isinstance(other, Unique):
            return self.label < other.label
        return NotImplemented()

    def __gt__(self, other):
        if isinstance(other, str):
            return self.label > other
        if isinstance(other, Unique):
            return self.label > other.label
        return NotImplemented()

class Parser(object):

    """LR(1) parser class.

    terminal symbols:
      '!', '"', '$', '&', "'", '(', ')', '+', ',', '-', ':', ';', '<', '=',
      '>', 'ALPHAALPHANUM', 'EOF', 'LITERAL', 'WHITESPACE', '[', ']', '{', '|',
      '}', '~'

    nonterminal symbols:
      'assignment', 'assignmentop', 'assignments', 'assignmentvarwithop',
      'assignmentvarwithoutop', 'condition', 'conjunction', 'conjunctionop',
      'disjunction', 'disjunctionop', 'doublequoted', 'doublequoted_escaped',
      'funcall', 'identifier', 'literal', 'logicunop', 'singlequoted',
      'singlequoted_escaped', 'test', 'testop', 'value', 'valuelist', 'varcall'

    production rules:
      'assignments' -> 'assignment' '_1*' 'EOF'
      '_1*' ->
      '_1*' -> '_1*' ':' 'assignment'
      'assignments' -> 'EOF'
      'assignment' -> '_24?' '_4*' 'assignmentvarwithop' 'valuelist'
      '_4*' ->
      '_4*' -> '_4*' 'assignmentvarwithop' ','
      '_4*' -> '_4*' 'assignmentvarwithoutop' ','
      'assignmentvarwithop' -> 'identifier' '_24?' '_8?' 'assignmentop'
      'assignmentvarwithoutop' -> 'identifier' '_24?' '_8?'
      '_8?' ->
      '_8?' -> 'condition'
      'identifier' -> 'ALPHAALPHANUM'
      'condition' -> '[' '_24?' 'disjunction' '_24?' ']' '_24?'
      'assignmentop' -> ':' '='
      'assignmentop' -> '+' '='
      'assignmentop' -> '='
      'assignmentop' -> '-' '=' '_24?'
      'disjunction' -> 'conjunction' '_24?' 'disjunctionop' '_24?' 'conjunction'
      'conjunction' -> 'test' '_24?' 'conjunctionop' '_24?' 'test'
      'test' -> 'identifier' '_24?' 'testop' '_24?' 'value'
      '_24?' ->
      '_24?' -> 'WHITESPACE'
      'test' -> '(' '_24?' 'disjunction' '_24?' ')'
      'test' -> 'logicunop' '_24?' 'disjunction'
      'logicunop' -> '!'
      'disjunctionop' -> ';'
      'disjunctionop' -> '|'
      'disjunctionop' -> '|' '|'
      'conjunctionop' -> ','
      'conjunctionop' -> '&'
      'conjunctionop' -> '&' '&'
      'testop' -> '='
      'testop' -> '=' '='
      'testop' -> '!' '='
      'testop' -> '<'
      'testop' -> '>'
      'testop' -> '<' '='
      'testop' -> '>' '='
      'testop' -> '~' '='
      'testop' -> '=' '~'
      'valuelist' -> 'value' '_57*' '_24?'
      'valuelist' ->
      'value' -> '_50+'
      '_(49)' -> 'literal'
      '_(49)' -> 'funcall'
      '_(49)' -> 'varcall'
      '_(49)' -> 'doublequoted'
      '_(49)' -> 'singlequoted'
      '_50+' -> '_(49)'
      '_50+' -> '_50+' '_(49)'
      'doublequoted' -> '"' '_52*' '"'
      '_(51)' -> 'literal'
      '_(51)' -> 'WHITESPACE'
      '_(51)' -> 'doublequoted_escaped'
      '_(51)' -> 'funcall'
      '_(51)' -> 'varcall'
      '_52*' ->
      '_52*' -> '_52*' '_(51)'
      'singlequoted' -> "'" '_54*' "'"
      '_(53)' -> 'literal'
      '_(53)' -> 'WHITESPACE'
      '_(53)' -> 'singlequoted_escaped'
      '_54*' ->
      '_54*' -> '_54*' '_(53)'
      'literal' -> 'ALPHAALPHANUM'
      'literal' -> 'LITERAL'
      'funcall' -> '$' '(' '_24?' 'value' '_57*' '_24?' ')'
      '_57*' ->
      '_57*' -> '_57*' 'WHITESPACE' 'value'
      'varcall' -> '$' 'identifier'
      'varcall' -> '$' '{' 'value' '}'
      'doublequoted_escaped' -> '!'
      'doublequoted_escaped' -> '='
      'doublequoted_escaped' -> '<'
      'doublequoted_escaped' -> '>'
      'doublequoted_escaped' -> '['
      'doublequoted_escaped' -> ']'
      'doublequoted_escaped' -> '|'
      'doublequoted_escaped' -> '&'
      'doublequoted_escaped' -> ','
      'doublequoted_escaped' -> ';'
      'doublequoted_escaped' -> ':'
      'doublequoted_escaped' -> '~'
      'doublequoted_escaped' -> '+'
      'doublequoted_escaped' -> '-'
      'doublequoted_escaped' -> "'"
      'singlequoted_escaped' -> '!'
      'singlequoted_escaped' -> '='
      'singlequoted_escaped' -> '<'
      'singlequoted_escaped' -> '>'
      'singlequoted_escaped' -> '['
      'singlequoted_escaped' -> ']'
      'singlequoted_escaped' -> '|'
      'singlequoted_escaped' -> '&'
      'singlequoted_escaped' -> ','
      'singlequoted_escaped' -> ';'
      'singlequoted_escaped' -> ':'
      'singlequoted_escaped' -> '~'
      'singlequoted_escaped' -> '+'
      'singlequoted_escaped' -> '-'
      'singlequoted_escaped' -> '"'
      'singlequoted_escaped' -> '$'
      'singlequoted_escaped' -> '('
      'singlequoted_escaped' -> ')'
      'singlequoted_escaped' -> '{'
      'singlequoted_escaped' -> '}'
    """

    class ParseErrors(Exception):

        """Exception class to represent a collection of parse errors.

        Instances of this class have two attributes, `errors` and `tree`.
        `errors` is a list of tuples, each describing one error.
        Each tuple consists of the first input token which could not
        be processed and the list of grammar symbols which were allowed
        at this point.
        `tree` is a "repaired" parse tree which might be used for further
        error checking, or `None` if no repair was possible.
        """

        def __init__(self, errors, tree):
            msg = "%d parse errors"%len(errors)
            Exception.__init__(self, msg)
            self.errors = errors
            self.tree = tree

    terminals = [ '!', '"', '$', '&', "'", '(', ')', '+', ',', '-', ':', ';',
                  '<', '=', '>', 'ALPHAALPHANUM', 'EOF', 'LITERAL',
                  'WHITESPACE', '[', ']', '{', '|', '}', '~' ]
    _transparent = [ '_(49)', '_(51)', '_(53)', '_1*', '_24?', '_4*', '_50+',
                     '_52*', '_54*', '_57*', '_8?' ]
    EOF = Unique('EOF')
    S = Unique('S')

    _halting_state = 154
    _reduce = {
        (0, 'ALPHAALPHANUM'): ('_24?', 0), (2, ':'): ('_1*', 0),
        (2, 'EOF'): ('_1*', 0), (4, EOF): ('assignments', 3),
        (5, 'ALPHAALPHANUM'): ('_24?', 0), (6, ':'): ('_1*', 3),
        (6, 'EOF'): ('_1*', 3), (7, EOF): ('assignments', 1),
        (8, 'ALPHAALPHANUM'): ('_4*', 0), (10, ':'): ('valuelist', 0),
        (10, 'EOF'): ('valuelist', 0), (11, ':'): ('assignment', 4),
        (11, 'EOF'): ('assignment', 4), (12, 'ALPHAALPHANUM'): ('_4*', 3),
        (14, 'ALPHAALPHANUM'): ('_4*', 3), (15, '+'): ('_24?', 0),
        (15, ','): ('_24?', 0), (15, '-'): ('_24?', 0), (15, ':'): ('_24?', 0),
        (15, '='): ('_24?', 0), (15, '['): ('_24?', 0), (16, '+'): ('_8?', 0),
        (16, ','): ('_8?', 0), (16, '-'): ('_8?', 0), (16, ':'): ('_8?', 0),
        (16, '='): ('_8?', 0), (17, ','): ('assignmentvarwithoutop', 3),
        (18, '"'): ('assignmentvarwithop', 4),
        (18, '$'): ('assignmentvarwithop', 4),
        (18, "'"): ('assignmentvarwithop', 4),
        (18, ','): ('assignmentvarwithop', 4),
        (18, ':'): ('assignmentvarwithop', 4),
        (18, 'ALPHAALPHANUM'): ('assignmentvarwithop', 4),
        (18, 'EOF'): ('assignmentvarwithop', 4),
        (18, 'LITERAL'): ('assignmentvarwithop', 4), (19, '+'): ('_8?', 1),
        (19, ','): ('_8?', 1), (19, '-'): ('_8?', 1), (19, ':'): ('_8?', 1),
        (19, '='): ('_8?', 1), (20, '!'): ('identifier', 1),
        (20, '"'): ('identifier', 1), (20, '$'): ('identifier', 1),
        (20, '&'): ('identifier', 1), (20, "'"): ('identifier', 1),
        (20, ')'): ('identifier', 1), (20, '+'): ('identifier', 1),
        (20, ','): ('identifier', 1), (20, '-'): ('identifier', 1),
        (20, ':'): ('identifier', 1), (20, ';'): ('identifier', 1),
        (20, '<'): ('identifier', 1), (20, '='): ('identifier', 1),
        (20, '>'): ('identifier', 1), (20, 'ALPHAALPHANUM'): ('identifier', 1),
        (20, 'EOF'): ('identifier', 1), (20, 'LITERAL'): ('identifier', 1),
        (20, 'WHITESPACE'): ('identifier', 1), (20, '['): ('identifier', 1),
        (20, ']'): ('identifier', 1), (20, '|'): ('identifier', 1),
        (20, '}'): ('identifier', 1), (20, '~'): ('identifier', 1),
        (21, '!'): ('_24?', 0), (21, '('): ('_24?', 0),
        (21, 'ALPHAALPHANUM'): ('_24?', 0), (23, ']'): ('_24?', 0),
        (25, '+'): ('_24?', 0), (25, ','): ('_24?', 0), (25, '-'): ('_24?', 0),
        (25, ':'): ('_24?', 0), (25, '='): ('_24?', 0),
        (26, '+'): ('condition', 6), (26, ','): ('condition', 6),
        (26, '-'): ('condition', 6), (26, ':'): ('condition', 6),
        (26, '='): ('condition', 6), (28, '"'): ('assignmentop', 2),
        (28, '$'): ('assignmentop', 2), (28, "'"): ('assignmentop', 2),
        (28, ','): ('assignmentop', 2), (28, ':'): ('assignmentop', 2),
        (28, 'ALPHAALPHANUM'): ('assignmentop', 2),
        (28, 'EOF'): ('assignmentop', 2), (28, 'LITERAL'): ('assignmentop', 2),
        (30, '"'): ('assignmentop', 2), (30, '$'): ('assignmentop', 2),
        (30, "'"): ('assignmentop', 2), (30, ','): ('assignmentop', 2),
        (30, ':'): ('assignmentop', 2),
        (30, 'ALPHAALPHANUM'): ('assignmentop', 2),
        (30, 'EOF'): ('assignmentop', 2), (30, 'LITERAL'): ('assignmentop', 2),
        (31, '"'): ('assignmentop', 1), (31, '$'): ('assignmentop', 1),
        (31, "'"): ('assignmentop', 1), (31, ','): ('assignmentop', 1),
        (31, ':'): ('assignmentop', 1),
        (31, 'ALPHAALPHANUM'): ('assignmentop', 1),
        (31, 'EOF'): ('assignmentop', 1), (31, 'LITERAL'): ('assignmentop', 1),
        (33, '"'): ('_24?', 0), (33, '$'): ('_24?', 0), (33, "'"): ('_24?', 0),
        (33, ','): ('_24?', 0), (33, ':'): ('_24?', 0),
        (33, 'ALPHAALPHANUM'): ('_24?', 0), (33, 'EOF'): ('_24?', 0),
        (33, 'LITERAL'): ('_24?', 0), (34, '"'): ('assignmentop', 3),
        (34, '$'): ('assignmentop', 3), (34, "'"): ('assignmentop', 3),
        (34, ','): ('assignmentop', 3), (34, ':'): ('assignmentop', 3),
        (34, 'ALPHAALPHANUM'): ('assignmentop', 3),
        (34, 'EOF'): ('assignmentop', 3), (34, 'LITERAL'): ('assignmentop', 3),
        (35, ';'): ('_24?', 0), (35, '|'): ('_24?', 0), (37, '!'): ('_24?', 0),
        (37, '('): ('_24?', 0), (37, 'ALPHAALPHANUM'): ('_24?', 0),
        (39, '&'): ('disjunction', 5), (39, ')'): ('disjunction', 5),
        (39, ','): ('disjunction', 5), (39, ';'): ('disjunction', 5),
        (39, 'WHITESPACE'): ('disjunction', 5), (39, ']'): ('disjunction', 5),
        (39, '|'): ('disjunction', 5), (40, '&'): ('_24?', 0),
        (40, ','): ('_24?', 0), (42, '!'): ('_24?', 0), (42, '('): ('_24?', 0),
        (42, 'ALPHAALPHANUM'): ('_24?', 0), (44, '&'): ('conjunction', 5),
        (44, ')'): ('conjunction', 5), (44, ','): ('conjunction', 5),
        (44, ';'): ('conjunction', 5), (44, 'WHITESPACE'): ('conjunction', 5),
        (44, ']'): ('conjunction', 5), (44, '|'): ('conjunction', 5),
        (45, '!'): ('_24?', 0), (45, '<'): ('_24?', 0), (45, '='): ('_24?', 0),
        (45, '>'): ('_24?', 0), (45, '~'): ('_24?', 0), (47, '"'): ('_24?', 0),
        (47, '$'): ('_24?', 0), (47, "'"): ('_24?', 0),
        (47, 'ALPHAALPHANUM'): ('_24?', 0), (47, 'LITERAL'): ('_24?', 0),
        (49, '&'): ('test', 5), (49, ')'): ('test', 5), (49, ','): ('test', 5),
        (49, ';'): ('test', 5), (49, 'WHITESPACE'): ('test', 5),
        (49, ']'): ('test', 5), (49, '|'): ('test', 5), (50, '!'): ('_24?', 1),
        (50, '"'): ('_24?', 1), (50, '$'): ('_24?', 1), (50, '&'): ('_24?', 1),
        (50, "'"): ('_24?', 1), (50, '('): ('_24?', 1), (50, ')'): ('_24?', 1),
        (50, '+'): ('_24?', 1), (50, ','): ('_24?', 1), (50, '-'): ('_24?', 1),
        (50, ':'): ('_24?', 1), (50, ';'): ('_24?', 1), (50, '<'): ('_24?', 1),
        (50, '='): ('_24?', 1), (50, '>'): ('_24?', 1),
        (50, 'ALPHAALPHANUM'): ('_24?', 1), (50, 'EOF'): ('_24?', 1),
        (50, 'LITERAL'): ('_24?', 1), (50, '['): ('_24?', 1),
        (50, ']'): ('_24?', 1), (50, '|'): ('_24?', 1), (50, '~'): ('_24?', 1),
        (51, ')'): ('_24?', 1), (51, ':'): ('_24?', 1),
        (51, 'EOF'): ('_24?', 1), (52, '!'): ('_24?', 0),
        (52, '('): ('_24?', 0), (52, 'ALPHAALPHANUM'): ('_24?', 0),
        (54, ')'): ('_24?', 0), (56, '&'): ('test', 5), (56, ')'): ('test', 5),
        (56, ','): ('test', 5), (56, ';'): ('test', 5),
        (56, 'WHITESPACE'): ('test', 5), (56, ']'): ('test', 5),
        (56, '|'): ('test', 5), (57, '!'): ('_24?', 0), (57, '('): ('_24?', 0),
        (57, 'ALPHAALPHANUM'): ('_24?', 0), (59, '&'): ('test', 3),
        (59, ')'): ('test', 3), (59, ','): ('test', 3), (59, ';'): ('test', 3),
        (59, 'WHITESPACE'): ('test', 3), (59, ']'): ('test', 3),
        (59, '|'): ('test', 3), (60, '!'): ('logicunop', 1),
        (60, '('): ('logicunop', 1), (60, 'ALPHAALPHANUM'): ('logicunop', 1),
        (60, 'WHITESPACE'): ('logicunop', 1), (61, '!'): ('disjunctionop', 1),
        (61, '('): ('disjunctionop', 1),
        (61, 'ALPHAALPHANUM'): ('disjunctionop', 1),
        (61, 'WHITESPACE'): ('disjunctionop', 1),
        (62, '!'): ('disjunctionop', 1), (62, '('): ('disjunctionop', 1),
        (62, 'ALPHAALPHANUM'): ('disjunctionop', 1),
        (62, 'WHITESPACE'): ('disjunctionop', 1),
        (63, '!'): ('disjunctionop', 2), (63, '('): ('disjunctionop', 2),
        (63, 'ALPHAALPHANUM'): ('disjunctionop', 2),
        (63, 'WHITESPACE'): ('disjunctionop', 2),
        (64, '!'): ('conjunctionop', 1), (64, '('): ('conjunctionop', 1),
        (64, 'ALPHAALPHANUM'): ('conjunctionop', 1),
        (64, 'WHITESPACE'): ('conjunctionop', 1),
        (65, '!'): ('conjunctionop', 1), (65, '('): ('conjunctionop', 1),
        (65, 'ALPHAALPHANUM'): ('conjunctionop', 1),
        (65, 'WHITESPACE'): ('conjunctionop', 1),
        (66, '!'): ('conjunctionop', 2), (66, '('): ('conjunctionop', 2),
        (66, 'ALPHAALPHANUM'): ('conjunctionop', 2),
        (66, 'WHITESPACE'): ('conjunctionop', 2), (67, '"'): ('testop', 1),
        (67, '$'): ('testop', 1), (67, "'"): ('testop', 1),
        (67, 'ALPHAALPHANUM'): ('testop', 1), (67, 'LITERAL'): ('testop', 1),
        (67, 'WHITESPACE'): ('testop', 1), (68, '"'): ('testop', 2),
        (68, '$'): ('testop', 2), (68, "'"): ('testop', 2),
        (68, 'ALPHAALPHANUM'): ('testop', 2), (68, 'LITERAL'): ('testop', 2),
        (68, 'WHITESPACE'): ('testop', 2), (70, '"'): ('testop', 2),
        (70, '$'): ('testop', 2), (70, "'"): ('testop', 2),
        (70, 'ALPHAALPHANUM'): ('testop', 2), (70, 'LITERAL'): ('testop', 2),
        (70, 'WHITESPACE'): ('testop', 2), (71, '"'): ('testop', 1),
        (71, '$'): ('testop', 1), (71, "'"): ('testop', 1),
        (71, 'ALPHAALPHANUM'): ('testop', 1), (71, 'LITERAL'): ('testop', 1),
        (71, 'WHITESPACE'): ('testop', 1), (72, '"'): ('testop', 1),
        (72, '$'): ('testop', 1), (72, "'"): ('testop', 1),
        (72, 'ALPHAALPHANUM'): ('testop', 1), (72, 'LITERAL'): ('testop', 1),
        (72, 'WHITESPACE'): ('testop', 1), (73, '"'): ('testop', 2),
        (73, '$'): ('testop', 2), (73, "'"): ('testop', 2),
        (73, 'ALPHAALPHANUM'): ('testop', 2), (73, 'LITERAL'): ('testop', 2),
        (73, 'WHITESPACE'): ('testop', 2), (74, '"'): ('testop', 2),
        (74, '$'): ('testop', 2), (74, "'"): ('testop', 2),
        (74, 'ALPHAALPHANUM'): ('testop', 2), (74, 'LITERAL'): ('testop', 2),
        (74, 'WHITESPACE'): ('testop', 2), (76, '"'): ('testop', 2),
        (76, '$'): ('testop', 2), (76, "'"): ('testop', 2),
        (76, 'ALPHAALPHANUM'): ('testop', 2), (76, 'LITERAL'): ('testop', 2),
        (76, 'WHITESPACE'): ('testop', 2), (77, '"'): ('testop', 2),
        (77, '$'): ('testop', 2), (77, "'"): ('testop', 2),
        (77, 'ALPHAALPHANUM'): ('testop', 2), (77, 'LITERAL'): ('testop', 2),
        (77, 'WHITESPACE'): ('testop', 2), (78, ':'): ('_57*', 0),
        (78, 'EOF'): ('_57*', 0), (78, 'WHITESPACE'): ('_57*', 0),
        (79, ':'): ('_24?', 0), (79, 'EOF'): ('_24?', 0),
        (80, ':'): ('valuelist', 3), (80, 'EOF'): ('valuelist', 3),
        (81, '&'): ('value', 1), (81, ')'): ('value', 1),
        (81, ','): ('value', 1), (81, ':'): ('value', 1),
        (81, ';'): ('value', 1), (81, 'EOF'): ('value', 1),
        (81, 'WHITESPACE'): ('value', 1), (81, ']'): ('value', 1),
        (81, '|'): ('value', 1), (81, '}'): ('value', 1),
        (82, '"'): ('_(49)', 1), (82, '$'): ('_(49)', 1),
        (82, '&'): ('_(49)', 1), (82, "'"): ('_(49)', 1),
        (82, ')'): ('_(49)', 1), (82, ','): ('_(49)', 1),
        (82, ':'): ('_(49)', 1), (82, ';'): ('_(49)', 1),
        (82, 'ALPHAALPHANUM'): ('_(49)', 1), (82, 'EOF'): ('_(49)', 1),
        (82, 'LITERAL'): ('_(49)', 1), (82, 'WHITESPACE'): ('_(49)', 1),
        (82, ']'): ('_(49)', 1), (82, '|'): ('_(49)', 1),
        (82, '}'): ('_(49)', 1), (83, '"'): ('_(49)', 1),
        (83, '$'): ('_(49)', 1), (83, '&'): ('_(49)', 1),
        (83, "'"): ('_(49)', 1), (83, ')'): ('_(49)', 1),
        (83, ','): ('_(49)', 1), (83, ':'): ('_(49)', 1),
        (83, ';'): ('_(49)', 1), (83, 'ALPHAALPHANUM'): ('_(49)', 1),
        (83, 'EOF'): ('_(49)', 1), (83, 'LITERAL'): ('_(49)', 1),
        (83, 'WHITESPACE'): ('_(49)', 1), (83, ']'): ('_(49)', 1),
        (83, '|'): ('_(49)', 1), (83, '}'): ('_(49)', 1),
        (84, '"'): ('_(49)', 1), (84, '$'): ('_(49)', 1),
        (84, '&'): ('_(49)', 1), (84, "'"): ('_(49)', 1),
        (84, ')'): ('_(49)', 1), (84, ','): ('_(49)', 1),
        (84, ':'): ('_(49)', 1), (84, ';'): ('_(49)', 1),
        (84, 'ALPHAALPHANUM'): ('_(49)', 1), (84, 'EOF'): ('_(49)', 1),
        (84, 'LITERAL'): ('_(49)', 1), (84, 'WHITESPACE'): ('_(49)', 1),
        (84, ']'): ('_(49)', 1), (84, '|'): ('_(49)', 1),
        (84, '}'): ('_(49)', 1), (85, '"'): ('_(49)', 1),
        (85, '$'): ('_(49)', 1), (85, '&'): ('_(49)', 1),
        (85, "'"): ('_(49)', 1), (85, ')'): ('_(49)', 1),
        (85, ','): ('_(49)', 1), (85, ':'): ('_(49)', 1),
        (85, ';'): ('_(49)', 1), (85, 'ALPHAALPHANUM'): ('_(49)', 1),
        (85, 'EOF'): ('_(49)', 1), (85, 'LITERAL'): ('_(49)', 1),
        (85, 'WHITESPACE'): ('_(49)', 1), (85, ']'): ('_(49)', 1),
        (85, '|'): ('_(49)', 1), (85, '}'): ('_(49)', 1),
        (86, '"'): ('_(49)', 1), (86, '$'): ('_(49)', 1),
        (86, '&'): ('_(49)', 1), (86, "'"): ('_(49)', 1),
        (86, ')'): ('_(49)', 1), (86, ','): ('_(49)', 1),
        (86, ':'): ('_(49)', 1), (86, ';'): ('_(49)', 1),
        (86, 'ALPHAALPHANUM'): ('_(49)', 1), (86, 'EOF'): ('_(49)', 1),
        (86, 'LITERAL'): ('_(49)', 1), (86, 'WHITESPACE'): ('_(49)', 1),
        (86, ']'): ('_(49)', 1), (86, '|'): ('_(49)', 1),
        (86, '}'): ('_(49)', 1), (87, '"'): ('_50+', 1),
        (87, '$'): ('_50+', 1), (87, '&'): ('_50+', 1), (87, "'"): ('_50+', 1),
        (87, ')'): ('_50+', 1), (87, ','): ('_50+', 1), (87, ':'): ('_50+', 1),
        (87, ';'): ('_50+', 1), (87, 'ALPHAALPHANUM'): ('_50+', 1),
        (87, 'EOF'): ('_50+', 1), (87, 'LITERAL'): ('_50+', 1),
        (87, 'WHITESPACE'): ('_50+', 1), (87, ']'): ('_50+', 1),
        (87, '|'): ('_50+', 1), (87, '}'): ('_50+', 1), (88, '"'): ('_50+', 2),
        (88, '$'): ('_50+', 2), (88, '&'): ('_50+', 2), (88, "'"): ('_50+', 2),
        (88, ')'): ('_50+', 2), (88, ','): ('_50+', 2), (88, ':'): ('_50+', 2),
        (88, ';'): ('_50+', 2), (88, 'ALPHAALPHANUM'): ('_50+', 2),
        (88, 'EOF'): ('_50+', 2), (88, 'LITERAL'): ('_50+', 2),
        (88, 'WHITESPACE'): ('_50+', 2), (88, ']'): ('_50+', 2),
        (88, '|'): ('_50+', 2), (88, '}'): ('_50+', 2), (89, '!'): ('_52*', 0),
        (89, '"'): ('_52*', 0), (89, '$'): ('_52*', 0), (89, '&'): ('_52*', 0),
        (89, "'"): ('_52*', 0), (89, '+'): ('_52*', 0), (89, ','): ('_52*', 0),
        (89, '-'): ('_52*', 0), (89, ':'): ('_52*', 0), (89, ';'): ('_52*', 0),
        (89, '<'): ('_52*', 0), (89, '='): ('_52*', 0), (89, '>'): ('_52*', 0),
        (89, 'ALPHAALPHANUM'): ('_52*', 0), (89, 'LITERAL'): ('_52*', 0),
        (89, 'WHITESPACE'): ('_52*', 0), (89, '['): ('_52*', 0),
        (89, ']'): ('_52*', 0), (89, '|'): ('_52*', 0), (89, '~'): ('_52*', 0),
        (91, '"'): ('doublequoted', 3), (91, '$'): ('doublequoted', 3),
        (91, '&'): ('doublequoted', 3), (91, "'"): ('doublequoted', 3),
        (91, ')'): ('doublequoted', 3), (91, ','): ('doublequoted', 3),
        (91, ':'): ('doublequoted', 3), (91, ';'): ('doublequoted', 3),
        (91, 'ALPHAALPHANUM'): ('doublequoted', 3),
        (91, 'EOF'): ('doublequoted', 3), (91, 'LITERAL'): ('doublequoted', 3),
        (91, 'WHITESPACE'): ('doublequoted', 3),
        (91, ']'): ('doublequoted', 3), (91, '|'): ('doublequoted', 3),
        (91, '}'): ('doublequoted', 3), (92, '!'): ('_(51)', 1),
        (92, '"'): ('_(51)', 1), (92, '$'): ('_(51)', 1),
        (92, '&'): ('_(51)', 1), (92, "'"): ('_(51)', 1),
        (92, '+'): ('_(51)', 1), (92, ','): ('_(51)', 1),
        (92, '-'): ('_(51)', 1), (92, ':'): ('_(51)', 1),
        (92, ';'): ('_(51)', 1), (92, '<'): ('_(51)', 1),
        (92, '='): ('_(51)', 1), (92, '>'): ('_(51)', 1),
        (92, 'ALPHAALPHANUM'): ('_(51)', 1), (92, 'LITERAL'): ('_(51)', 1),
        (92, 'WHITESPACE'): ('_(51)', 1), (92, '['): ('_(51)', 1),
        (92, ']'): ('_(51)', 1), (92, '|'): ('_(51)', 1),
        (92, '~'): ('_(51)', 1), (93, '!'): ('_(51)', 1),
        (93, '"'): ('_(51)', 1), (93, '$'): ('_(51)', 1),
        (93, '&'): ('_(51)', 1), (93, "'"): ('_(51)', 1),
        (93, '+'): ('_(51)', 1), (93, ','): ('_(51)', 1),
        (93, '-'): ('_(51)', 1), (93, ':'): ('_(51)', 1),
        (93, ';'): ('_(51)', 1), (93, '<'): ('_(51)', 1),
        (93, '='): ('_(51)', 1), (93, '>'): ('_(51)', 1),
        (93, 'ALPHAALPHANUM'): ('_(51)', 1), (93, 'LITERAL'): ('_(51)', 1),
        (93, 'WHITESPACE'): ('_(51)', 1), (93, '['): ('_(51)', 1),
        (93, ']'): ('_(51)', 1), (93, '|'): ('_(51)', 1),
        (93, '~'): ('_(51)', 1), (94, '!'): ('_(51)', 1),
        (94, '"'): ('_(51)', 1), (94, '$'): ('_(51)', 1),
        (94, '&'): ('_(51)', 1), (94, "'"): ('_(51)', 1),
        (94, '+'): ('_(51)', 1), (94, ','): ('_(51)', 1),
        (94, '-'): ('_(51)', 1), (94, ':'): ('_(51)', 1),
        (94, ';'): ('_(51)', 1), (94, '<'): ('_(51)', 1),
        (94, '='): ('_(51)', 1), (94, '>'): ('_(51)', 1),
        (94, 'ALPHAALPHANUM'): ('_(51)', 1), (94, 'LITERAL'): ('_(51)', 1),
        (94, 'WHITESPACE'): ('_(51)', 1), (94, '['): ('_(51)', 1),
        (94, ']'): ('_(51)', 1), (94, '|'): ('_(51)', 1),
        (94, '~'): ('_(51)', 1), (95, '!'): ('_(51)', 1),
        (95, '"'): ('_(51)', 1), (95, '$'): ('_(51)', 1),
        (95, '&'): ('_(51)', 1), (95, "'"): ('_(51)', 1),
        (95, '+'): ('_(51)', 1), (95, ','): ('_(51)', 1),
        (95, '-'): ('_(51)', 1), (95, ':'): ('_(51)', 1),
        (95, ';'): ('_(51)', 1), (95, '<'): ('_(51)', 1),
        (95, '='): ('_(51)', 1), (95, '>'): ('_(51)', 1),
        (95, 'ALPHAALPHANUM'): ('_(51)', 1), (95, 'LITERAL'): ('_(51)', 1),
        (95, 'WHITESPACE'): ('_(51)', 1), (95, '['): ('_(51)', 1),
        (95, ']'): ('_(51)', 1), (95, '|'): ('_(51)', 1),
        (95, '~'): ('_(51)', 1), (96, '!'): ('_(51)', 1),
        (96, '"'): ('_(51)', 1), (96, '$'): ('_(51)', 1),
        (96, '&'): ('_(51)', 1), (96, "'"): ('_(51)', 1),
        (96, '+'): ('_(51)', 1), (96, ','): ('_(51)', 1),
        (96, '-'): ('_(51)', 1), (96, ':'): ('_(51)', 1),
        (96, ';'): ('_(51)', 1), (96, '<'): ('_(51)', 1),
        (96, '='): ('_(51)', 1), (96, '>'): ('_(51)', 1),
        (96, 'ALPHAALPHANUM'): ('_(51)', 1), (96, 'LITERAL'): ('_(51)', 1),
        (96, 'WHITESPACE'): ('_(51)', 1), (96, '['): ('_(51)', 1),
        (96, ']'): ('_(51)', 1), (96, '|'): ('_(51)', 1),
        (96, '~'): ('_(51)', 1), (97, '!'): ('_52*', 2),
        (97, '"'): ('_52*', 2), (97, '$'): ('_52*', 2), (97, '&'): ('_52*', 2),
        (97, "'"): ('_52*', 2), (97, '+'): ('_52*', 2), (97, ','): ('_52*', 2),
        (97, '-'): ('_52*', 2), (97, ':'): ('_52*', 2), (97, ';'): ('_52*', 2),
        (97, '<'): ('_52*', 2), (97, '='): ('_52*', 2), (97, '>'): ('_52*', 2),
        (97, 'ALPHAALPHANUM'): ('_52*', 2), (97, 'LITERAL'): ('_52*', 2),
        (97, 'WHITESPACE'): ('_52*', 2), (97, '['): ('_52*', 2),
        (97, ']'): ('_52*', 2), (97, '|'): ('_52*', 2), (97, '~'): ('_52*', 2),
        (98, '!'): ('_54*', 0), (98, '"'): ('_54*', 0), (98, '$'): ('_54*', 0),
        (98, '&'): ('_54*', 0), (98, "'"): ('_54*', 0), (98, '('): ('_54*', 0),
        (98, ')'): ('_54*', 0), (98, '+'): ('_54*', 0), (98, ','): ('_54*', 0),
        (98, '-'): ('_54*', 0), (98, ':'): ('_54*', 0), (98, ';'): ('_54*', 0),
        (98, '<'): ('_54*', 0), (98, '='): ('_54*', 0), (98, '>'): ('_54*', 0),
        (98, 'ALPHAALPHANUM'): ('_54*', 0), (98, 'LITERAL'): ('_54*', 0),
        (98, 'WHITESPACE'): ('_54*', 0), (98, '['): ('_54*', 0),
        (98, ']'): ('_54*', 0), (98, '{'): ('_54*', 0), (98, '|'): ('_54*', 0),
        (98, '}'): ('_54*', 0), (98, '~'): ('_54*', 0),
        (100, '"'): ('singlequoted', 3), (100, '$'): ('singlequoted', 3),
        (100, '&'): ('singlequoted', 3), (100, "'"): ('singlequoted', 3),
        (100, ')'): ('singlequoted', 3), (100, ','): ('singlequoted', 3),
        (100, ':'): ('singlequoted', 3), (100, ';'): ('singlequoted', 3),
        (100, 'ALPHAALPHANUM'): ('singlequoted', 3),
        (100, 'EOF'): ('singlequoted', 3),
        (100, 'LITERAL'): ('singlequoted', 3),
        (100, 'WHITESPACE'): ('singlequoted', 3),
        (100, ']'): ('singlequoted', 3), (100, '|'): ('singlequoted', 3),
        (100, '}'): ('singlequoted', 3), (101, '!'): ('_(53)', 1),
        (101, '"'): ('_(53)', 1), (101, '$'): ('_(53)', 1),
        (101, '&'): ('_(53)', 1), (101, "'"): ('_(53)', 1),
        (101, '('): ('_(53)', 1), (101, ')'): ('_(53)', 1),
        (101, '+'): ('_(53)', 1), (101, ','): ('_(53)', 1),
        (101, '-'): ('_(53)', 1), (101, ':'): ('_(53)', 1),
        (101, ';'): ('_(53)', 1), (101, '<'): ('_(53)', 1),
        (101, '='): ('_(53)', 1), (101, '>'): ('_(53)', 1),
        (101, 'ALPHAALPHANUM'): ('_(53)', 1), (101, 'LITERAL'): ('_(53)', 1),
        (101, 'WHITESPACE'): ('_(53)', 1), (101, '['): ('_(53)', 1),
        (101, ']'): ('_(53)', 1), (101, '{'): ('_(53)', 1),
        (101, '|'): ('_(53)', 1), (101, '}'): ('_(53)', 1),
        (101, '~'): ('_(53)', 1), (102, '!'): ('_(53)', 1),
        (102, '"'): ('_(53)', 1), (102, '$'): ('_(53)', 1),
        (102, '&'): ('_(53)', 1), (102, "'"): ('_(53)', 1),
        (102, '('): ('_(53)', 1), (102, ')'): ('_(53)', 1),
        (102, '+'): ('_(53)', 1), (102, ','): ('_(53)', 1),
        (102, '-'): ('_(53)', 1), (102, ':'): ('_(53)', 1),
        (102, ';'): ('_(53)', 1), (102, '<'): ('_(53)', 1),
        (102, '='): ('_(53)', 1), (102, '>'): ('_(53)', 1),
        (102, 'ALPHAALPHANUM'): ('_(53)', 1), (102, 'LITERAL'): ('_(53)', 1),
        (102, 'WHITESPACE'): ('_(53)', 1), (102, '['): ('_(53)', 1),
        (102, ']'): ('_(53)', 1), (102, '{'): ('_(53)', 1),
        (102, '|'): ('_(53)', 1), (102, '}'): ('_(53)', 1),
        (102, '~'): ('_(53)', 1), (103, '!'): ('_(53)', 1),
        (103, '"'): ('_(53)', 1), (103, '$'): ('_(53)', 1),
        (103, '&'): ('_(53)', 1), (103, "'"): ('_(53)', 1),
        (103, '('): ('_(53)', 1), (103, ')'): ('_(53)', 1),
        (103, '+'): ('_(53)', 1), (103, ','): ('_(53)', 1),
        (103, '-'): ('_(53)', 1), (103, ':'): ('_(53)', 1),
        (103, ';'): ('_(53)', 1), (103, '<'): ('_(53)', 1),
        (103, '='): ('_(53)', 1), (103, '>'): ('_(53)', 1),
        (103, 'ALPHAALPHANUM'): ('_(53)', 1), (103, 'LITERAL'): ('_(53)', 1),
        (103, 'WHITESPACE'): ('_(53)', 1), (103, '['): ('_(53)', 1),
        (103, ']'): ('_(53)', 1), (103, '{'): ('_(53)', 1),
        (103, '|'): ('_(53)', 1), (103, '}'): ('_(53)', 1),
        (103, '~'): ('_(53)', 1), (104, '!'): ('_54*', 2),
        (104, '"'): ('_54*', 2), (104, '$'): ('_54*', 2),
        (104, '&'): ('_54*', 2), (104, "'"): ('_54*', 2),
        (104, '('): ('_54*', 2), (104, ')'): ('_54*', 2),
        (104, '+'): ('_54*', 2), (104, ','): ('_54*', 2),
        (104, '-'): ('_54*', 2), (104, ':'): ('_54*', 2),
        (104, ';'): ('_54*', 2), (104, '<'): ('_54*', 2),
        (104, '='): ('_54*', 2), (104, '>'): ('_54*', 2),
        (104, 'ALPHAALPHANUM'): ('_54*', 2), (104, 'LITERAL'): ('_54*', 2),
        (104, 'WHITESPACE'): ('_54*', 2), (104, '['): ('_54*', 2),
        (104, ']'): ('_54*', 2), (104, '{'): ('_54*', 2),
        (104, '|'): ('_54*', 2), (104, '}'): ('_54*', 2),
        (104, '~'): ('_54*', 2), (105, '!'): ('literal', 1),
        (105, '"'): ('literal', 1), (105, '$'): ('literal', 1),
        (105, '&'): ('literal', 1), (105, "'"): ('literal', 1),
        (105, '('): ('literal', 1), (105, ')'): ('literal', 1),
        (105, '+'): ('literal', 1), (105, ','): ('literal', 1),
        (105, '-'): ('literal', 1), (105, ':'): ('literal', 1),
        (105, ';'): ('literal', 1), (105, '<'): ('literal', 1),
        (105, '='): ('literal', 1), (105, '>'): ('literal', 1),
        (105, 'ALPHAALPHANUM'): ('literal', 1), (105, 'EOF'): ('literal', 1),
        (105, 'LITERAL'): ('literal', 1), (105, 'WHITESPACE'): ('literal', 1),
        (105, '['): ('literal', 1), (105, ']'): ('literal', 1),
        (105, '{'): ('literal', 1), (105, '|'): ('literal', 1),
        (105, '}'): ('literal', 1), (105, '~'): ('literal', 1),
        (106, '!'): ('literal', 1), (106, '"'): ('literal', 1),
        (106, '$'): ('literal', 1), (106, '&'): ('literal', 1),
        (106, "'"): ('literal', 1), (106, '('): ('literal', 1),
        (106, ')'): ('literal', 1), (106, '+'): ('literal', 1),
        (106, ','): ('literal', 1), (106, '-'): ('literal', 1),
        (106, ':'): ('literal', 1), (106, ';'): ('literal', 1),
        (106, '<'): ('literal', 1), (106, '='): ('literal', 1),
        (106, '>'): ('literal', 1), (106, 'ALPHAALPHANUM'): ('literal', 1),
        (106, 'EOF'): ('literal', 1), (106, 'LITERAL'): ('literal', 1),
        (106, 'WHITESPACE'): ('literal', 1), (106, '['): ('literal', 1),
        (106, ']'): ('literal', 1), (106, '{'): ('literal', 1),
        (106, '|'): ('literal', 1), (106, '}'): ('literal', 1),
        (106, '~'): ('literal', 1), (108, '"'): ('_24?', 0),
        (108, '$'): ('_24?', 0), (108, "'"): ('_24?', 0),
        (108, 'ALPHAALPHANUM'): ('_24?', 0), (108, 'LITERAL'): ('_24?', 0),
        (110, ')'): ('_57*', 0), (110, 'WHITESPACE'): ('_57*', 0),
        (111, ')'): ('_24?', 0), (113, '!'): ('funcall', 7),
        (113, '"'): ('funcall', 7), (113, '$'): ('funcall', 7),
        (113, '&'): ('funcall', 7), (113, "'"): ('funcall', 7),
        (113, ')'): ('funcall', 7), (113, '+'): ('funcall', 7),
        (113, ','): ('funcall', 7), (113, '-'): ('funcall', 7),
        (113, ':'): ('funcall', 7), (113, ';'): ('funcall', 7),
        (113, '<'): ('funcall', 7), (113, '='): ('funcall', 7),
        (113, '>'): ('funcall', 7), (113, 'ALPHAALPHANUM'): ('funcall', 7),
        (113, 'EOF'): ('funcall', 7), (113, 'LITERAL'): ('funcall', 7),
        (113, 'WHITESPACE'): ('funcall', 7), (113, '['): ('funcall', 7),
        (113, ']'): ('funcall', 7), (113, '|'): ('funcall', 7),
        (113, '}'): ('funcall', 7), (113, '~'): ('funcall', 7),
        (114, ')'): ('_57*', 3), (114, ':'): ('_57*', 3),
        (114, 'EOF'): ('_57*', 3), (114, 'WHITESPACE'): ('_57*', 3),
        (115, '!'): ('varcall', 2), (115, '"'): ('varcall', 2),
        (115, '$'): ('varcall', 2), (115, '&'): ('varcall', 2),
        (115, "'"): ('varcall', 2), (115, ')'): ('varcall', 2),
        (115, '+'): ('varcall', 2), (115, ','): ('varcall', 2),
        (115, '-'): ('varcall', 2), (115, ':'): ('varcall', 2),
        (115, ';'): ('varcall', 2), (115, '<'): ('varcall', 2),
        (115, '='): ('varcall', 2), (115, '>'): ('varcall', 2),
        (115, 'ALPHAALPHANUM'): ('varcall', 2), (115, 'EOF'): ('varcall', 2),
        (115, 'LITERAL'): ('varcall', 2), (115, 'WHITESPACE'): ('varcall', 2),
        (115, '['): ('varcall', 2), (115, ']'): ('varcall', 2),
        (115, '|'): ('varcall', 2), (115, '}'): ('varcall', 2),
        (115, '~'): ('varcall', 2), (118, '!'): ('varcall', 4),
        (118, '"'): ('varcall', 4), (118, '$'): ('varcall', 4),
        (118, '&'): ('varcall', 4), (118, "'"): ('varcall', 4),
        (118, ')'): ('varcall', 4), (118, '+'): ('varcall', 4),
        (118, ','): ('varcall', 4), (118, '-'): ('varcall', 4),
        (118, ':'): ('varcall', 4), (118, ';'): ('varcall', 4),
        (118, '<'): ('varcall', 4), (118, '='): ('varcall', 4),
        (118, '>'): ('varcall', 4), (118, 'ALPHAALPHANUM'): ('varcall', 4),
        (118, 'EOF'): ('varcall', 4), (118, 'LITERAL'): ('varcall', 4),
        (118, 'WHITESPACE'): ('varcall', 4), (118, '['): ('varcall', 4),
        (118, ']'): ('varcall', 4), (118, '|'): ('varcall', 4),
        (118, '}'): ('varcall', 4), (118, '~'): ('varcall', 4),
        (119, '!'): ('doublequoted_escaped', 1),
        (119, '"'): ('doublequoted_escaped', 1),
        (119, '$'): ('doublequoted_escaped', 1),
        (119, '&'): ('doublequoted_escaped', 1),
        (119, "'"): ('doublequoted_escaped', 1),
        (119, '+'): ('doublequoted_escaped', 1),
        (119, ','): ('doublequoted_escaped', 1),
        (119, '-'): ('doublequoted_escaped', 1),
        (119, ':'): ('doublequoted_escaped', 1),
        (119, ';'): ('doublequoted_escaped', 1),
        (119, '<'): ('doublequoted_escaped', 1),
        (119, '='): ('doublequoted_escaped', 1),
        (119, '>'): ('doublequoted_escaped', 1),
        (119, 'ALPHAALPHANUM'): ('doublequoted_escaped', 1),
        (119, 'LITERAL'): ('doublequoted_escaped', 1),
        (119, 'WHITESPACE'): ('doublequoted_escaped', 1),
        (119, '['): ('doublequoted_escaped', 1),
        (119, ']'): ('doublequoted_escaped', 1),
        (119, '|'): ('doublequoted_escaped', 1),
        (119, '~'): ('doublequoted_escaped', 1),
        (120, '!'): ('doublequoted_escaped', 1),
        (120, '"'): ('doublequoted_escaped', 1),
        (120, '$'): ('doublequoted_escaped', 1),
        (120, '&'): ('doublequoted_escaped', 1),
        (120, "'"): ('doublequoted_escaped', 1),
        (120, '+'): ('doublequoted_escaped', 1),
        (120, ','): ('doublequoted_escaped', 1),
        (120, '-'): ('doublequoted_escaped', 1),
        (120, ':'): ('doublequoted_escaped', 1),
        (120, ';'): ('doublequoted_escaped', 1),
        (120, '<'): ('doublequoted_escaped', 1),
        (120, '='): ('doublequoted_escaped', 1),
        (120, '>'): ('doublequoted_escaped', 1),
        (120, 'ALPHAALPHANUM'): ('doublequoted_escaped', 1),
        (120, 'LITERAL'): ('doublequoted_escaped', 1),
        (120, 'WHITESPACE'): ('doublequoted_escaped', 1),
        (120, '['): ('doublequoted_escaped', 1),
        (120, ']'): ('doublequoted_escaped', 1),
        (120, '|'): ('doublequoted_escaped', 1),
        (120, '~'): ('doublequoted_escaped', 1),
        (121, '!'): ('doublequoted_escaped', 1),
        (121, '"'): ('doublequoted_escaped', 1),
        (121, '$'): ('doublequoted_escaped', 1),
        (121, '&'): ('doublequoted_escaped', 1),
        (121, "'"): ('doublequoted_escaped', 1),
        (121, '+'): ('doublequoted_escaped', 1),
        (121, ','): ('doublequoted_escaped', 1),
        (121, '-'): ('doublequoted_escaped', 1),
        (121, ':'): ('doublequoted_escaped', 1),
        (121, ';'): ('doublequoted_escaped', 1),
        (121, '<'): ('doublequoted_escaped', 1),
        (121, '='): ('doublequoted_escaped', 1),
        (121, '>'): ('doublequoted_escaped', 1),
        (121, 'ALPHAALPHANUM'): ('doublequoted_escaped', 1),
        (121, 'LITERAL'): ('doublequoted_escaped', 1),
        (121, 'WHITESPACE'): ('doublequoted_escaped', 1),
        (121, '['): ('doublequoted_escaped', 1),
        (121, ']'): ('doublequoted_escaped', 1),
        (121, '|'): ('doublequoted_escaped', 1),
        (121, '~'): ('doublequoted_escaped', 1),
        (122, '!'): ('doublequoted_escaped', 1),
        (122, '"'): ('doublequoted_escaped', 1),
        (122, '$'): ('doublequoted_escaped', 1),
        (122, '&'): ('doublequoted_escaped', 1),
        (122, "'"): ('doublequoted_escaped', 1),
        (122, '+'): ('doublequoted_escaped', 1),
        (122, ','): ('doublequoted_escaped', 1),
        (122, '-'): ('doublequoted_escaped', 1),
        (122, ':'): ('doublequoted_escaped', 1),
        (122, ';'): ('doublequoted_escaped', 1),
        (122, '<'): ('doublequoted_escaped', 1),
        (122, '='): ('doublequoted_escaped', 1),
        (122, '>'): ('doublequoted_escaped', 1),
        (122, 'ALPHAALPHANUM'): ('doublequoted_escaped', 1),
        (122, 'LITERAL'): ('doublequoted_escaped', 1),
        (122, 'WHITESPACE'): ('doublequoted_escaped', 1),
        (122, '['): ('doublequoted_escaped', 1),
        (122, ']'): ('doublequoted_escaped', 1),
        (122, '|'): ('doublequoted_escaped', 1),
        (122, '~'): ('doublequoted_escaped', 1),
        (123, '!'): ('doublequoted_escaped', 1),
        (123, '"'): ('doublequoted_escaped', 1),
        (123, '$'): ('doublequoted_escaped', 1),
        (123, '&'): ('doublequoted_escaped', 1),
        (123, "'"): ('doublequoted_escaped', 1),
        (123, '+'): ('doublequoted_escaped', 1),
        (123, ','): ('doublequoted_escaped', 1),
        (123, '-'): ('doublequoted_escaped', 1),
        (123, ':'): ('doublequoted_escaped', 1),
        (123, ';'): ('doublequoted_escaped', 1),
        (123, '<'): ('doublequoted_escaped', 1),
        (123, '='): ('doublequoted_escaped', 1),
        (123, '>'): ('doublequoted_escaped', 1),
        (123, 'ALPHAALPHANUM'): ('doublequoted_escaped', 1),
        (123, 'LITERAL'): ('doublequoted_escaped', 1),
        (123, 'WHITESPACE'): ('doublequoted_escaped', 1),
        (123, '['): ('doublequoted_escaped', 1),
        (123, ']'): ('doublequoted_escaped', 1),
        (123, '|'): ('doublequoted_escaped', 1),
        (123, '~'): ('doublequoted_escaped', 1),
        (124, '!'): ('doublequoted_escaped', 1),
        (124, '"'): ('doublequoted_escaped', 1),
        (124, '$'): ('doublequoted_escaped', 1),
        (124, '&'): ('doublequoted_escaped', 1),
        (124, "'"): ('doublequoted_escaped', 1),
        (124, '+'): ('doublequoted_escaped', 1),
        (124, ','): ('doublequoted_escaped', 1),
        (124, '-'): ('doublequoted_escaped', 1),
        (124, ':'): ('doublequoted_escaped', 1),
        (124, ';'): ('doublequoted_escaped', 1),
        (124, '<'): ('doublequoted_escaped', 1),
        (124, '='): ('doublequoted_escaped', 1),
        (124, '>'): ('doublequoted_escaped', 1),
        (124, 'ALPHAALPHANUM'): ('doublequoted_escaped', 1),
        (124, 'LITERAL'): ('doublequoted_escaped', 1),
        (124, 'WHITESPACE'): ('doublequoted_escaped', 1),
        (124, '['): ('doublequoted_escaped', 1),
        (124, ']'): ('doublequoted_escaped', 1),
        (124, '|'): ('doublequoted_escaped', 1),
        (124, '~'): ('doublequoted_escaped', 1),
        (125, '!'): ('doublequoted_escaped', 1),
        (125, '"'): ('doublequoted_escaped', 1),
        (125, '$'): ('doublequoted_escaped', 1),
        (125, '&'): ('doublequoted_escaped', 1),
        (125, "'"): ('doublequoted_escaped', 1),
        (125, '+'): ('doublequoted_escaped', 1),
        (125, ','): ('doublequoted_escaped', 1),
        (125, '-'): ('doublequoted_escaped', 1),
        (125, ':'): ('doublequoted_escaped', 1),
        (125, ';'): ('doublequoted_escaped', 1),
        (125, '<'): ('doublequoted_escaped', 1),
        (125, '='): ('doublequoted_escaped', 1),
        (125, '>'): ('doublequoted_escaped', 1),
        (125, 'ALPHAALPHANUM'): ('doublequoted_escaped', 1),
        (125, 'LITERAL'): ('doublequoted_escaped', 1),
        (125, 'WHITESPACE'): ('doublequoted_escaped', 1),
        (125, '['): ('doublequoted_escaped', 1),
        (125, ']'): ('doublequoted_escaped', 1),
        (125, '|'): ('doublequoted_escaped', 1),
        (125, '~'): ('doublequoted_escaped', 1),
        (126, '!'): ('doublequoted_escaped', 1),
        (126, '"'): ('doublequoted_escaped', 1),
        (126, '$'): ('doublequoted_escaped', 1),
        (126, '&'): ('doublequoted_escaped', 1),
        (126, "'"): ('doublequoted_escaped', 1),
        (126, '+'): ('doublequoted_escaped', 1),
        (126, ','): ('doublequoted_escaped', 1),
        (126, '-'): ('doublequoted_escaped', 1),
        (126, ':'): ('doublequoted_escaped', 1),
        (126, ';'): ('doublequoted_escaped', 1),
        (126, '<'): ('doublequoted_escaped', 1),
        (126, '='): ('doublequoted_escaped', 1),
        (126, '>'): ('doublequoted_escaped', 1),
        (126, 'ALPHAALPHANUM'): ('doublequoted_escaped', 1),
        (126, 'LITERAL'): ('doublequoted_escaped', 1),
        (126, 'WHITESPACE'): ('doublequoted_escaped', 1),
        (126, '['): ('doublequoted_escaped', 1),
        (126, ']'): ('doublequoted_escaped', 1),
        (126, '|'): ('doublequoted_escaped', 1),
        (126, '~'): ('doublequoted_escaped', 1),
        (127, '!'): ('doublequoted_escaped', 1),
        (127, '"'): ('doublequoted_escaped', 1),
        (127, '$'): ('doublequoted_escaped', 1),
        (127, '&'): ('doublequoted_escaped', 1),
        (127, "'"): ('doublequoted_escaped', 1),
        (127, '+'): ('doublequoted_escaped', 1),
        (127, ','): ('doublequoted_escaped', 1),
        (127, '-'): ('doublequoted_escaped', 1),
        (127, ':'): ('doublequoted_escaped', 1),
        (127, ';'): ('doublequoted_escaped', 1),
        (127, '<'): ('doublequoted_escaped', 1),
        (127, '='): ('doublequoted_escaped', 1),
        (127, '>'): ('doublequoted_escaped', 1),
        (127, 'ALPHAALPHANUM'): ('doublequoted_escaped', 1),
        (127, 'LITERAL'): ('doublequoted_escaped', 1),
        (127, 'WHITESPACE'): ('doublequoted_escaped', 1),
        (127, '['): ('doublequoted_escaped', 1),
        (127, ']'): ('doublequoted_escaped', 1),
        (127, '|'): ('doublequoted_escaped', 1),
        (127, '~'): ('doublequoted_escaped', 1),
        (128, '!'): ('doublequoted_escaped', 1),
        (128, '"'): ('doublequoted_escaped', 1),
        (128, '$'): ('doublequoted_escaped', 1),
        (128, '&'): ('doublequoted_escaped', 1),
        (128, "'"): ('doublequoted_escaped', 1),
        (128, '+'): ('doublequoted_escaped', 1),
        (128, ','): ('doublequoted_escaped', 1),
        (128, '-'): ('doublequoted_escaped', 1),
        (128, ':'): ('doublequoted_escaped', 1),
        (128, ';'): ('doublequoted_escaped', 1),
        (128, '<'): ('doublequoted_escaped', 1),
        (128, '='): ('doublequoted_escaped', 1),
        (128, '>'): ('doublequoted_escaped', 1),
        (128, 'ALPHAALPHANUM'): ('doublequoted_escaped', 1),
        (128, 'LITERAL'): ('doublequoted_escaped', 1),
        (128, 'WHITESPACE'): ('doublequoted_escaped', 1),
        (128, '['): ('doublequoted_escaped', 1),
        (128, ']'): ('doublequoted_escaped', 1),
        (128, '|'): ('doublequoted_escaped', 1),
        (128, '~'): ('doublequoted_escaped', 1),
        (129, '!'): ('doublequoted_escaped', 1),
        (129, '"'): ('doublequoted_escaped', 1),
        (129, '$'): ('doublequoted_escaped', 1),
        (129, '&'): ('doublequoted_escaped', 1),
        (129, "'"): ('doublequoted_escaped', 1),
        (129, '+'): ('doublequoted_escaped', 1),
        (129, ','): ('doublequoted_escaped', 1),
        (129, '-'): ('doublequoted_escaped', 1),
        (129, ':'): ('doublequoted_escaped', 1),
        (129, ';'): ('doublequoted_escaped', 1),
        (129, '<'): ('doublequoted_escaped', 1),
        (129, '='): ('doublequoted_escaped', 1),
        (129, '>'): ('doublequoted_escaped', 1),
        (129, 'ALPHAALPHANUM'): ('doublequoted_escaped', 1),
        (129, 'LITERAL'): ('doublequoted_escaped', 1),
        (129, 'WHITESPACE'): ('doublequoted_escaped', 1),
        (129, '['): ('doublequoted_escaped', 1),
        (129, ']'): ('doublequoted_escaped', 1),
        (129, '|'): ('doublequoted_escaped', 1),
        (129, '~'): ('doublequoted_escaped', 1),
        (130, '!'): ('doublequoted_escaped', 1),
        (130, '"'): ('doublequoted_escaped', 1),
        (130, '$'): ('doublequoted_escaped', 1),
        (130, '&'): ('doublequoted_escaped', 1),
        (130, "'"): ('doublequoted_escaped', 1),
        (130, '+'): ('doublequoted_escaped', 1),
        (130, ','): ('doublequoted_escaped', 1),
        (130, '-'): ('doublequoted_escaped', 1),
        (130, ':'): ('doublequoted_escaped', 1),
        (130, ';'): ('doublequoted_escaped', 1),
        (130, '<'): ('doublequoted_escaped', 1),
        (130, '='): ('doublequoted_escaped', 1),
        (130, '>'): ('doublequoted_escaped', 1),
        (130, 'ALPHAALPHANUM'): ('doublequoted_escaped', 1),
        (130, 'LITERAL'): ('doublequoted_escaped', 1),
        (130, 'WHITESPACE'): ('doublequoted_escaped', 1),
        (130, '['): ('doublequoted_escaped', 1),
        (130, ']'): ('doublequoted_escaped', 1),
        (130, '|'): ('doublequoted_escaped', 1),
        (130, '~'): ('doublequoted_escaped', 1),
        (131, '!'): ('doublequoted_escaped', 1),
        (131, '"'): ('doublequoted_escaped', 1),
        (131, '$'): ('doublequoted_escaped', 1),
        (131, '&'): ('doublequoted_escaped', 1),
        (131, "'"): ('doublequoted_escaped', 1),
        (131, '+'): ('doublequoted_escaped', 1),
        (131, ','): ('doublequoted_escaped', 1),
        (131, '-'): ('doublequoted_escaped', 1),
        (131, ':'): ('doublequoted_escaped', 1),
        (131, ';'): ('doublequoted_escaped', 1),
        (131, '<'): ('doublequoted_escaped', 1),
        (131, '='): ('doublequoted_escaped', 1),
        (131, '>'): ('doublequoted_escaped', 1),
        (131, 'ALPHAALPHANUM'): ('doublequoted_escaped', 1),
        (131, 'LITERAL'): ('doublequoted_escaped', 1),
        (131, 'WHITESPACE'): ('doublequoted_escaped', 1),
        (131, '['): ('doublequoted_escaped', 1),
        (131, ']'): ('doublequoted_escaped', 1),
        (131, '|'): ('doublequoted_escaped', 1),
        (131, '~'): ('doublequoted_escaped', 1),
        (132, '!'): ('doublequoted_escaped', 1),
        (132, '"'): ('doublequoted_escaped', 1),
        (132, '$'): ('doublequoted_escaped', 1),
        (132, '&'): ('doublequoted_escaped', 1),
        (132, "'"): ('doublequoted_escaped', 1),
        (132, '+'): ('doublequoted_escaped', 1),
        (132, ','): ('doublequoted_escaped', 1),
        (132, '-'): ('doublequoted_escaped', 1),
        (132, ':'): ('doublequoted_escaped', 1),
        (132, ';'): ('doublequoted_escaped', 1),
        (132, '<'): ('doublequoted_escaped', 1),
        (132, '='): ('doublequoted_escaped', 1),
        (132, '>'): ('doublequoted_escaped', 1),
        (132, 'ALPHAALPHANUM'): ('doublequoted_escaped', 1),
        (132, 'LITERAL'): ('doublequoted_escaped', 1),
        (132, 'WHITESPACE'): ('doublequoted_escaped', 1),
        (132, '['): ('doublequoted_escaped', 1),
        (132, ']'): ('doublequoted_escaped', 1),
        (132, '|'): ('doublequoted_escaped', 1),
        (132, '~'): ('doublequoted_escaped', 1),
        (133, '!'): ('doublequoted_escaped', 1),
        (133, '"'): ('doublequoted_escaped', 1),
        (133, '$'): ('doublequoted_escaped', 1),
        (133, '&'): ('doublequoted_escaped', 1),
        (133, "'"): ('doublequoted_escaped', 1),
        (133, '+'): ('doublequoted_escaped', 1),
        (133, ','): ('doublequoted_escaped', 1),
        (133, '-'): ('doublequoted_escaped', 1),
        (133, ':'): ('doublequoted_escaped', 1),
        (133, ';'): ('doublequoted_escaped', 1),
        (133, '<'): ('doublequoted_escaped', 1),
        (133, '='): ('doublequoted_escaped', 1),
        (133, '>'): ('doublequoted_escaped', 1),
        (133, 'ALPHAALPHANUM'): ('doublequoted_escaped', 1),
        (133, 'LITERAL'): ('doublequoted_escaped', 1),
        (133, 'WHITESPACE'): ('doublequoted_escaped', 1),
        (133, '['): ('doublequoted_escaped', 1),
        (133, ']'): ('doublequoted_escaped', 1),
        (133, '|'): ('doublequoted_escaped', 1),
        (133, '~'): ('doublequoted_escaped', 1),
        (134, '!'): ('singlequoted_escaped', 1),
        (134, '"'): ('singlequoted_escaped', 1),
        (134, '$'): ('singlequoted_escaped', 1),
        (134, '&'): ('singlequoted_escaped', 1),
        (134, "'"): ('singlequoted_escaped', 1),
        (134, '('): ('singlequoted_escaped', 1),
        (134, ')'): ('singlequoted_escaped', 1),
        (134, '+'): ('singlequoted_escaped', 1),
        (134, ','): ('singlequoted_escaped', 1),
        (134, '-'): ('singlequoted_escaped', 1),
        (134, ':'): ('singlequoted_escaped', 1),
        (134, ';'): ('singlequoted_escaped', 1),
        (134, '<'): ('singlequoted_escaped', 1),
        (134, '='): ('singlequoted_escaped', 1),
        (134, '>'): ('singlequoted_escaped', 1),
        (134, 'ALPHAALPHANUM'): ('singlequoted_escaped', 1),
        (134, 'LITERAL'): ('singlequoted_escaped', 1),
        (134, 'WHITESPACE'): ('singlequoted_escaped', 1),
        (134, '['): ('singlequoted_escaped', 1),
        (134, ']'): ('singlequoted_escaped', 1),
        (134, '{'): ('singlequoted_escaped', 1),
        (134, '|'): ('singlequoted_escaped', 1),
        (134, '}'): ('singlequoted_escaped', 1),
        (134, '~'): ('singlequoted_escaped', 1),
        (135, '!'): ('singlequoted_escaped', 1),
        (135, '"'): ('singlequoted_escaped', 1),
        (135, '$'): ('singlequoted_escaped', 1),
        (135, '&'): ('singlequoted_escaped', 1),
        (135, "'"): ('singlequoted_escaped', 1),
        (135, '('): ('singlequoted_escaped', 1),
        (135, ')'): ('singlequoted_escaped', 1),
        (135, '+'): ('singlequoted_escaped', 1),
        (135, ','): ('singlequoted_escaped', 1),
        (135, '-'): ('singlequoted_escaped', 1),
        (135, ':'): ('singlequoted_escaped', 1),
        (135, ';'): ('singlequoted_escaped', 1),
        (135, '<'): ('singlequoted_escaped', 1),
        (135, '='): ('singlequoted_escaped', 1),
        (135, '>'): ('singlequoted_escaped', 1),
        (135, 'ALPHAALPHANUM'): ('singlequoted_escaped', 1),
        (135, 'LITERAL'): ('singlequoted_escaped', 1),
        (135, 'WHITESPACE'): ('singlequoted_escaped', 1),
        (135, '['): ('singlequoted_escaped', 1),
        (135, ']'): ('singlequoted_escaped', 1),
        (135, '{'): ('singlequoted_escaped', 1),
        (135, '|'): ('singlequoted_escaped', 1),
        (135, '}'): ('singlequoted_escaped', 1),
        (135, '~'): ('singlequoted_escaped', 1),
        (136, '!'): ('singlequoted_escaped', 1),
        (136, '"'): ('singlequoted_escaped', 1),
        (136, '$'): ('singlequoted_escaped', 1),
        (136, '&'): ('singlequoted_escaped', 1),
        (136, "'"): ('singlequoted_escaped', 1),
        (136, '('): ('singlequoted_escaped', 1),
        (136, ')'): ('singlequoted_escaped', 1),
        (136, '+'): ('singlequoted_escaped', 1),
        (136, ','): ('singlequoted_escaped', 1),
        (136, '-'): ('singlequoted_escaped', 1),
        (136, ':'): ('singlequoted_escaped', 1),
        (136, ';'): ('singlequoted_escaped', 1),
        (136, '<'): ('singlequoted_escaped', 1),
        (136, '='): ('singlequoted_escaped', 1),
        (136, '>'): ('singlequoted_escaped', 1),
        (136, 'ALPHAALPHANUM'): ('singlequoted_escaped', 1),
        (136, 'LITERAL'): ('singlequoted_escaped', 1),
        (136, 'WHITESPACE'): ('singlequoted_escaped', 1),
        (136, '['): ('singlequoted_escaped', 1),
        (136, ']'): ('singlequoted_escaped', 1),
        (136, '{'): ('singlequoted_escaped', 1),
        (136, '|'): ('singlequoted_escaped', 1),
        (136, '}'): ('singlequoted_escaped', 1),
        (136, '~'): ('singlequoted_escaped', 1),
        (137, '!'): ('singlequoted_escaped', 1),
        (137, '"'): ('singlequoted_escaped', 1),
        (137, '$'): ('singlequoted_escaped', 1),
        (137, '&'): ('singlequoted_escaped', 1),
        (137, "'"): ('singlequoted_escaped', 1),
        (137, '('): ('singlequoted_escaped', 1),
        (137, ')'): ('singlequoted_escaped', 1),
        (137, '+'): ('singlequoted_escaped', 1),
        (137, ','): ('singlequoted_escaped', 1),
        (137, '-'): ('singlequoted_escaped', 1),
        (137, ':'): ('singlequoted_escaped', 1),
        (137, ';'): ('singlequoted_escaped', 1),
        (137, '<'): ('singlequoted_escaped', 1),
        (137, '='): ('singlequoted_escaped', 1),
        (137, '>'): ('singlequoted_escaped', 1),
        (137, 'ALPHAALPHANUM'): ('singlequoted_escaped', 1),
        (137, 'LITERAL'): ('singlequoted_escaped', 1),
        (137, 'WHITESPACE'): ('singlequoted_escaped', 1),
        (137, '['): ('singlequoted_escaped', 1),
        (137, ']'): ('singlequoted_escaped', 1),
        (137, '{'): ('singlequoted_escaped', 1),
        (137, '|'): ('singlequoted_escaped', 1),
        (137, '}'): ('singlequoted_escaped', 1),
        (137, '~'): ('singlequoted_escaped', 1),
        (138, '!'): ('singlequoted_escaped', 1),
        (138, '"'): ('singlequoted_escaped', 1),
        (138, '$'): ('singlequoted_escaped', 1),
        (138, '&'): ('singlequoted_escaped', 1),
        (138, "'"): ('singlequoted_escaped', 1),
        (138, '('): ('singlequoted_escaped', 1),
        (138, ')'): ('singlequoted_escaped', 1),
        (138, '+'): ('singlequoted_escaped', 1),
        (138, ','): ('singlequoted_escaped', 1),
        (138, '-'): ('singlequoted_escaped', 1),
        (138, ':'): ('singlequoted_escaped', 1),
        (138, ';'): ('singlequoted_escaped', 1),
        (138, '<'): ('singlequoted_escaped', 1),
        (138, '='): ('singlequoted_escaped', 1),
        (138, '>'): ('singlequoted_escaped', 1),
        (138, 'ALPHAALPHANUM'): ('singlequoted_escaped', 1),
        (138, 'LITERAL'): ('singlequoted_escaped', 1),
        (138, 'WHITESPACE'): ('singlequoted_escaped', 1),
        (138, '['): ('singlequoted_escaped', 1),
        (138, ']'): ('singlequoted_escaped', 1),
        (138, '{'): ('singlequoted_escaped', 1),
        (138, '|'): ('singlequoted_escaped', 1),
        (138, '}'): ('singlequoted_escaped', 1),
        (138, '~'): ('singlequoted_escaped', 1),
        (139, '!'): ('singlequoted_escaped', 1),
        (139, '"'): ('singlequoted_escaped', 1),
        (139, '$'): ('singlequoted_escaped', 1),
        (139, '&'): ('singlequoted_escaped', 1),
        (139, "'"): ('singlequoted_escaped', 1),
        (139, '('): ('singlequoted_escaped', 1),
        (139, ')'): ('singlequoted_escaped', 1),
        (139, '+'): ('singlequoted_escaped', 1),
        (139, ','): ('singlequoted_escaped', 1),
        (139, '-'): ('singlequoted_escaped', 1),
        (139, ':'): ('singlequoted_escaped', 1),
        (139, ';'): ('singlequoted_escaped', 1),
        (139, '<'): ('singlequoted_escaped', 1),
        (139, '='): ('singlequoted_escaped', 1),
        (139, '>'): ('singlequoted_escaped', 1),
        (139, 'ALPHAALPHANUM'): ('singlequoted_escaped', 1),
        (139, 'LITERAL'): ('singlequoted_escaped', 1),
        (139, 'WHITESPACE'): ('singlequoted_escaped', 1),
        (139, '['): ('singlequoted_escaped', 1),
        (139, ']'): ('singlequoted_escaped', 1),
        (139, '{'): ('singlequoted_escaped', 1),
        (139, '|'): ('singlequoted_escaped', 1),
        (139, '}'): ('singlequoted_escaped', 1),
        (139, '~'): ('singlequoted_escaped', 1),
        (140, '!'): ('singlequoted_escaped', 1),
        (140, '"'): ('singlequoted_escaped', 1),
        (140, '$'): ('singlequoted_escaped', 1),
        (140, '&'): ('singlequoted_escaped', 1),
        (140, "'"): ('singlequoted_escaped', 1),
        (140, '('): ('singlequoted_escaped', 1),
        (140, ')'): ('singlequoted_escaped', 1),
        (140, '+'): ('singlequoted_escaped', 1),
        (140, ','): ('singlequoted_escaped', 1),
        (140, '-'): ('singlequoted_escaped', 1),
        (140, ':'): ('singlequoted_escaped', 1),
        (140, ';'): ('singlequoted_escaped', 1),
        (140, '<'): ('singlequoted_escaped', 1),
        (140, '='): ('singlequoted_escaped', 1),
        (140, '>'): ('singlequoted_escaped', 1),
        (140, 'ALPHAALPHANUM'): ('singlequoted_escaped', 1),
        (140, 'LITERAL'): ('singlequoted_escaped', 1),
        (140, 'WHITESPACE'): ('singlequoted_escaped', 1),
        (140, '['): ('singlequoted_escaped', 1),
        (140, ']'): ('singlequoted_escaped', 1),
        (140, '{'): ('singlequoted_escaped', 1),
        (140, '|'): ('singlequoted_escaped', 1),
        (140, '}'): ('singlequoted_escaped', 1),
        (140, '~'): ('singlequoted_escaped', 1),
        (141, '!'): ('singlequoted_escaped', 1),
        (141, '"'): ('singlequoted_escaped', 1),
        (141, '$'): ('singlequoted_escaped', 1),
        (141, '&'): ('singlequoted_escaped', 1),
        (141, "'"): ('singlequoted_escaped', 1),
        (141, '('): ('singlequoted_escaped', 1),
        (141, ')'): ('singlequoted_escaped', 1),
        (141, '+'): ('singlequoted_escaped', 1),
        (141, ','): ('singlequoted_escaped', 1),
        (141, '-'): ('singlequoted_escaped', 1),
        (141, ':'): ('singlequoted_escaped', 1),
        (141, ';'): ('singlequoted_escaped', 1),
        (141, '<'): ('singlequoted_escaped', 1),
        (141, '='): ('singlequoted_escaped', 1),
        (141, '>'): ('singlequoted_escaped', 1),
        (141, 'ALPHAALPHANUM'): ('singlequoted_escaped', 1),
        (141, 'LITERAL'): ('singlequoted_escaped', 1),
        (141, 'WHITESPACE'): ('singlequoted_escaped', 1),
        (141, '['): ('singlequoted_escaped', 1),
        (141, ']'): ('singlequoted_escaped', 1),
        (141, '{'): ('singlequoted_escaped', 1),
        (141, '|'): ('singlequoted_escaped', 1),
        (141, '}'): ('singlequoted_escaped', 1),
        (141, '~'): ('singlequoted_escaped', 1),
        (142, '!'): ('singlequoted_escaped', 1),
        (142, '"'): ('singlequoted_escaped', 1),
        (142, '$'): ('singlequoted_escaped', 1),
        (142, '&'): ('singlequoted_escaped', 1),
        (142, "'"): ('singlequoted_escaped', 1),
        (142, '('): ('singlequoted_escaped', 1),
        (142, ')'): ('singlequoted_escaped', 1),
        (142, '+'): ('singlequoted_escaped', 1),
        (142, ','): ('singlequoted_escaped', 1),
        (142, '-'): ('singlequoted_escaped', 1),
        (142, ':'): ('singlequoted_escaped', 1),
        (142, ';'): ('singlequoted_escaped', 1),
        (142, '<'): ('singlequoted_escaped', 1),
        (142, '='): ('singlequoted_escaped', 1),
        (142, '>'): ('singlequoted_escaped', 1),
        (142, 'ALPHAALPHANUM'): ('singlequoted_escaped', 1),
        (142, 'LITERAL'): ('singlequoted_escaped', 1),
        (142, 'WHITESPACE'): ('singlequoted_escaped', 1),
        (142, '['): ('singlequoted_escaped', 1),
        (142, ']'): ('singlequoted_escaped', 1),
        (142, '{'): ('singlequoted_escaped', 1),
        (142, '|'): ('singlequoted_escaped', 1),
        (142, '}'): ('singlequoted_escaped', 1),
        (142, '~'): ('singlequoted_escaped', 1),
        (143, '!'): ('singlequoted_escaped', 1),
        (143, '"'): ('singlequoted_escaped', 1),
        (143, '$'): ('singlequoted_escaped', 1),
        (143, '&'): ('singlequoted_escaped', 1),
        (143, "'"): ('singlequoted_escaped', 1),
        (143, '('): ('singlequoted_escaped', 1),
        (143, ')'): ('singlequoted_escaped', 1),
        (143, '+'): ('singlequoted_escaped', 1),
        (143, ','): ('singlequoted_escaped', 1),
        (143, '-'): ('singlequoted_escaped', 1),
        (143, ':'): ('singlequoted_escaped', 1),
        (143, ';'): ('singlequoted_escaped', 1),
        (143, '<'): ('singlequoted_escaped', 1),
        (143, '='): ('singlequoted_escaped', 1),
        (143, '>'): ('singlequoted_escaped', 1),
        (143, 'ALPHAALPHANUM'): ('singlequoted_escaped', 1),
        (143, 'LITERAL'): ('singlequoted_escaped', 1),
        (143, 'WHITESPACE'): ('singlequoted_escaped', 1),
        (143, '['): ('singlequoted_escaped', 1),
        (143, ']'): ('singlequoted_escaped', 1),
        (143, '{'): ('singlequoted_escaped', 1),
        (143, '|'): ('singlequoted_escaped', 1),
        (143, '}'): ('singlequoted_escaped', 1),
        (143, '~'): ('singlequoted_escaped', 1),
        (144, '!'): ('singlequoted_escaped', 1),
        (144, '"'): ('singlequoted_escaped', 1),
        (144, '$'): ('singlequoted_escaped', 1),
        (144, '&'): ('singlequoted_escaped', 1),
        (144, "'"): ('singlequoted_escaped', 1),
        (144, '('): ('singlequoted_escaped', 1),
        (144, ')'): ('singlequoted_escaped', 1),
        (144, '+'): ('singlequoted_escaped', 1),
        (144, ','): ('singlequoted_escaped', 1),
        (144, '-'): ('singlequoted_escaped', 1),
        (144, ':'): ('singlequoted_escaped', 1),
        (144, ';'): ('singlequoted_escaped', 1),
        (144, '<'): ('singlequoted_escaped', 1),
        (144, '='): ('singlequoted_escaped', 1),
        (144, '>'): ('singlequoted_escaped', 1),
        (144, 'ALPHAALPHANUM'): ('singlequoted_escaped', 1),
        (144, 'LITERAL'): ('singlequoted_escaped', 1),
        (144, 'WHITESPACE'): ('singlequoted_escaped', 1),
        (144, '['): ('singlequoted_escaped', 1),
        (144, ']'): ('singlequoted_escaped', 1),
        (144, '{'): ('singlequoted_escaped', 1),
        (144, '|'): ('singlequoted_escaped', 1),
        (144, '}'): ('singlequoted_escaped', 1),
        (144, '~'): ('singlequoted_escaped', 1),
        (145, '!'): ('singlequoted_escaped', 1),
        (145, '"'): ('singlequoted_escaped', 1),
        (145, '$'): ('singlequoted_escaped', 1),
        (145, '&'): ('singlequoted_escaped', 1),
        (145, "'"): ('singlequoted_escaped', 1),
        (145, '('): ('singlequoted_escaped', 1),
        (145, ')'): ('singlequoted_escaped', 1),
        (145, '+'): ('singlequoted_escaped', 1),
        (145, ','): ('singlequoted_escaped', 1),
        (145, '-'): ('singlequoted_escaped', 1),
        (145, ':'): ('singlequoted_escaped', 1),
        (145, ';'): ('singlequoted_escaped', 1),
        (145, '<'): ('singlequoted_escaped', 1),
        (145, '='): ('singlequoted_escaped', 1),
        (145, '>'): ('singlequoted_escaped', 1),
        (145, 'ALPHAALPHANUM'): ('singlequoted_escaped', 1),
        (145, 'LITERAL'): ('singlequoted_escaped', 1),
        (145, 'WHITESPACE'): ('singlequoted_escaped', 1),
        (145, '['): ('singlequoted_escaped', 1),
        (145, ']'): ('singlequoted_escaped', 1),
        (145, '{'): ('singlequoted_escaped', 1),
        (145, '|'): ('singlequoted_escaped', 1),
        (145, '}'): ('singlequoted_escaped', 1),
        (145, '~'): ('singlequoted_escaped', 1),
        (146, '!'): ('singlequoted_escaped', 1),
        (146, '"'): ('singlequoted_escaped', 1),
        (146, '$'): ('singlequoted_escaped', 1),
        (146, '&'): ('singlequoted_escaped', 1),
        (146, "'"): ('singlequoted_escaped', 1),
        (146, '('): ('singlequoted_escaped', 1),
        (146, ')'): ('singlequoted_escaped', 1),
        (146, '+'): ('singlequoted_escaped', 1),
        (146, ','): ('singlequoted_escaped', 1),
        (146, '-'): ('singlequoted_escaped', 1),
        (146, ':'): ('singlequoted_escaped', 1),
        (146, ';'): ('singlequoted_escaped', 1),
        (146, '<'): ('singlequoted_escaped', 1),
        (146, '='): ('singlequoted_escaped', 1),
        (146, '>'): ('singlequoted_escaped', 1),
        (146, 'ALPHAALPHANUM'): ('singlequoted_escaped', 1),
        (146, 'LITERAL'): ('singlequoted_escaped', 1),
        (146, 'WHITESPACE'): ('singlequoted_escaped', 1),
        (146, '['): ('singlequoted_escaped', 1),
        (146, ']'): ('singlequoted_escaped', 1),
        (146, '{'): ('singlequoted_escaped', 1),
        (146, '|'): ('singlequoted_escaped', 1),
        (146, '}'): ('singlequoted_escaped', 1),
        (146, '~'): ('singlequoted_escaped', 1),
        (147, '!'): ('singlequoted_escaped', 1),
        (147, '"'): ('singlequoted_escaped', 1),
        (147, '$'): ('singlequoted_escaped', 1),
        (147, '&'): ('singlequoted_escaped', 1),
        (147, "'"): ('singlequoted_escaped', 1),
        (147, '('): ('singlequoted_escaped', 1),
        (147, ')'): ('singlequoted_escaped', 1),
        (147, '+'): ('singlequoted_escaped', 1),
        (147, ','): ('singlequoted_escaped', 1),
        (147, '-'): ('singlequoted_escaped', 1),
        (147, ':'): ('singlequoted_escaped', 1),
        (147, ';'): ('singlequoted_escaped', 1),
        (147, '<'): ('singlequoted_escaped', 1),
        (147, '='): ('singlequoted_escaped', 1),
        (147, '>'): ('singlequoted_escaped', 1),
        (147, 'ALPHAALPHANUM'): ('singlequoted_escaped', 1),
        (147, 'LITERAL'): ('singlequoted_escaped', 1),
        (147, 'WHITESPACE'): ('singlequoted_escaped', 1),
        (147, '['): ('singlequoted_escaped', 1),
        (147, ']'): ('singlequoted_escaped', 1),
        (147, '{'): ('singlequoted_escaped', 1),
        (147, '|'): ('singlequoted_escaped', 1),
        (147, '}'): ('singlequoted_escaped', 1),
        (147, '~'): ('singlequoted_escaped', 1),
        (148, '!'): ('singlequoted_escaped', 1),
        (148, '"'): ('singlequoted_escaped', 1),
        (148, '$'): ('singlequoted_escaped', 1),
        (148, '&'): ('singlequoted_escaped', 1),
        (148, "'"): ('singlequoted_escaped', 1),
        (148, '('): ('singlequoted_escaped', 1),
        (148, ')'): ('singlequoted_escaped', 1),
        (148, '+'): ('singlequoted_escaped', 1),
        (148, ','): ('singlequoted_escaped', 1),
        (148, '-'): ('singlequoted_escaped', 1),
        (148, ':'): ('singlequoted_escaped', 1),
        (148, ';'): ('singlequoted_escaped', 1),
        (148, '<'): ('singlequoted_escaped', 1),
        (148, '='): ('singlequoted_escaped', 1),
        (148, '>'): ('singlequoted_escaped', 1),
        (148, 'ALPHAALPHANUM'): ('singlequoted_escaped', 1),
        (148, 'LITERAL'): ('singlequoted_escaped', 1),
        (148, 'WHITESPACE'): ('singlequoted_escaped', 1),
        (148, '['): ('singlequoted_escaped', 1),
        (148, ']'): ('singlequoted_escaped', 1),
        (148, '{'): ('singlequoted_escaped', 1),
        (148, '|'): ('singlequoted_escaped', 1),
        (148, '}'): ('singlequoted_escaped', 1),
        (148, '~'): ('singlequoted_escaped', 1),
        (149, '!'): ('singlequoted_escaped', 1),
        (149, '"'): ('singlequoted_escaped', 1),
        (149, '$'): ('singlequoted_escaped', 1),
        (149, '&'): ('singlequoted_escaped', 1),
        (149, "'"): ('singlequoted_escaped', 1),
        (149, '('): ('singlequoted_escaped', 1),
        (149, ')'): ('singlequoted_escaped', 1),
        (149, '+'): ('singlequoted_escaped', 1),
        (149, ','): ('singlequoted_escaped', 1),
        (149, '-'): ('singlequoted_escaped', 1),
        (149, ':'): ('singlequoted_escaped', 1),
        (149, ';'): ('singlequoted_escaped', 1),
        (149, '<'): ('singlequoted_escaped', 1),
        (149, '='): ('singlequoted_escaped', 1),
        (149, '>'): ('singlequoted_escaped', 1),
        (149, 'ALPHAALPHANUM'): ('singlequoted_escaped', 1),
        (149, 'LITERAL'): ('singlequoted_escaped', 1),
        (149, 'WHITESPACE'): ('singlequoted_escaped', 1),
        (149, '['): ('singlequoted_escaped', 1),
        (149, ']'): ('singlequoted_escaped', 1),
        (149, '{'): ('singlequoted_escaped', 1),
        (149, '|'): ('singlequoted_escaped', 1),
        (149, '}'): ('singlequoted_escaped', 1),
        (149, '~'): ('singlequoted_escaped', 1),
        (150, '!'): ('singlequoted_escaped', 1),
        (150, '"'): ('singlequoted_escaped', 1),
        (150, '$'): ('singlequoted_escaped', 1),
        (150, '&'): ('singlequoted_escaped', 1),
        (150, "'"): ('singlequoted_escaped', 1),
        (150, '('): ('singlequoted_escaped', 1),
        (150, ')'): ('singlequoted_escaped', 1),
        (150, '+'): ('singlequoted_escaped', 1),
        (150, ','): ('singlequoted_escaped', 1),
        (150, '-'): ('singlequoted_escaped', 1),
        (150, ':'): ('singlequoted_escaped', 1),
        (150, ';'): ('singlequoted_escaped', 1),
        (150, '<'): ('singlequoted_escaped', 1),
        (150, '='): ('singlequoted_escaped', 1),
        (150, '>'): ('singlequoted_escaped', 1),
        (150, 'ALPHAALPHANUM'): ('singlequoted_escaped', 1),
        (150, 'LITERAL'): ('singlequoted_escaped', 1),
        (150, 'WHITESPACE'): ('singlequoted_escaped', 1),
        (150, '['): ('singlequoted_escaped', 1),
        (150, ']'): ('singlequoted_escaped', 1),
        (150, '{'): ('singlequoted_escaped', 1),
        (150, '|'): ('singlequoted_escaped', 1),
        (150, '}'): ('singlequoted_escaped', 1),
        (150, '~'): ('singlequoted_escaped', 1),
        (151, '!'): ('singlequoted_escaped', 1),
        (151, '"'): ('singlequoted_escaped', 1),
        (151, '$'): ('singlequoted_escaped', 1),
        (151, '&'): ('singlequoted_escaped', 1),
        (151, "'"): ('singlequoted_escaped', 1),
        (151, '('): ('singlequoted_escaped', 1),
        (151, ')'): ('singlequoted_escaped', 1),
        (151, '+'): ('singlequoted_escaped', 1),
        (151, ','): ('singlequoted_escaped', 1),
        (151, '-'): ('singlequoted_escaped', 1),
        (151, ':'): ('singlequoted_escaped', 1),
        (151, ';'): ('singlequoted_escaped', 1),
        (151, '<'): ('singlequoted_escaped', 1),
        (151, '='): ('singlequoted_escaped', 1),
        (151, '>'): ('singlequoted_escaped', 1),
        (151, 'ALPHAALPHANUM'): ('singlequoted_escaped', 1),
        (151, 'LITERAL'): ('singlequoted_escaped', 1),
        (151, 'WHITESPACE'): ('singlequoted_escaped', 1),
        (151, '['): ('singlequoted_escaped', 1),
        (151, ']'): ('singlequoted_escaped', 1),
        (151, '{'): ('singlequoted_escaped', 1),
        (151, '|'): ('singlequoted_escaped', 1),
        (151, '}'): ('singlequoted_escaped', 1),
        (151, '~'): ('singlequoted_escaped', 1),
        (152, '!'): ('singlequoted_escaped', 1),
        (152, '"'): ('singlequoted_escaped', 1),
        (152, '$'): ('singlequoted_escaped', 1),
        (152, '&'): ('singlequoted_escaped', 1),
        (152, "'"): ('singlequoted_escaped', 1),
        (152, '('): ('singlequoted_escaped', 1),
        (152, ')'): ('singlequoted_escaped', 1),
        (152, '+'): ('singlequoted_escaped', 1),
        (152, ','): ('singlequoted_escaped', 1),
        (152, '-'): ('singlequoted_escaped', 1),
        (152, ':'): ('singlequoted_escaped', 1),
        (152, ';'): ('singlequoted_escaped', 1),
        (152, '<'): ('singlequoted_escaped', 1),
        (152, '='): ('singlequoted_escaped', 1),
        (152, '>'): ('singlequoted_escaped', 1),
        (152, 'ALPHAALPHANUM'): ('singlequoted_escaped', 1),
        (152, 'LITERAL'): ('singlequoted_escaped', 1),
        (152, 'WHITESPACE'): ('singlequoted_escaped', 1),
        (152, '['): ('singlequoted_escaped', 1),
        (152, ']'): ('singlequoted_escaped', 1),
        (152, '{'): ('singlequoted_escaped', 1),
        (152, '|'): ('singlequoted_escaped', 1),
        (152, '}'): ('singlequoted_escaped', 1),
        (152, '~'): ('singlequoted_escaped', 1),
        (153, '!'): ('singlequoted_escaped', 1),
        (153, '"'): ('singlequoted_escaped', 1),
        (153, '$'): ('singlequoted_escaped', 1),
        (153, '&'): ('singlequoted_escaped', 1),
        (153, "'"): ('singlequoted_escaped', 1),
        (153, '('): ('singlequoted_escaped', 1),
        (153, ')'): ('singlequoted_escaped', 1),
        (153, '+'): ('singlequoted_escaped', 1),
        (153, ','): ('singlequoted_escaped', 1),
        (153, '-'): ('singlequoted_escaped', 1),
        (153, ':'): ('singlequoted_escaped', 1),
        (153, ';'): ('singlequoted_escaped', 1),
        (153, '<'): ('singlequoted_escaped', 1),
        (153, '='): ('singlequoted_escaped', 1),
        (153, '>'): ('singlequoted_escaped', 1),
        (153, 'ALPHAALPHANUM'): ('singlequoted_escaped', 1),
        (153, 'LITERAL'): ('singlequoted_escaped', 1),
        (153, 'WHITESPACE'): ('singlequoted_escaped', 1),
        (153, '['): ('singlequoted_escaped', 1),
        (153, ']'): ('singlequoted_escaped', 1),
        (153, '{'): ('singlequoted_escaped', 1),
        (153, '|'): ('singlequoted_escaped', 1),
        (153, '}'): ('singlequoted_escaped', 1),
        (153, '~'): ('singlequoted_escaped', 1)
    }
    _goto = {
        (0, '_24?'): 8, (0, 'assignment'): 2, (0, 'assignments'): 1,
        (2, '_1*'): 3, (5, '_24?'): 8, (5, 'assignment'): 6, (8, '_4*'): 9,
        (9, 'assignmentvarwithop'): 10, (9, 'assignmentvarwithoutop'): 13,
        (9, 'identifier'): 15, (10, '_(49)'): 87, (10, '_50+'): 81,
        (10, 'doublequoted'): 85, (10, 'funcall'): 83, (10, 'literal'): 82,
        (10, 'singlequoted'): 86, (10, 'value'): 78, (10, 'valuelist'): 11,
        (10, 'varcall'): 84, (15, '_24?'): 16, (16, '_8?'): 17,
        (16, 'condition'): 19, (17, 'assignmentop'): 18, (21, '_24?'): 22,
        (22, 'conjunction'): 35, (22, 'disjunction'): 23,
        (22, 'identifier'): 45, (22, 'logicunop'): 57, (22, 'test'): 40,
        (23, '_24?'): 24, (25, '_24?'): 26, (33, '_24?'): 34, (35, '_24?'): 36,
        (36, 'disjunctionop'): 37, (37, '_24?'): 38, (38, 'conjunction'): 39,
        (38, 'identifier'): 45, (38, 'logicunop'): 57, (38, 'test'): 40,
        (40, '_24?'): 41, (41, 'conjunctionop'): 42, (42, '_24?'): 43,
        (43, 'identifier'): 45, (43, 'logicunop'): 57, (43, 'test'): 44,
        (45, '_24?'): 46, (46, 'testop'): 47, (47, '_24?'): 48,
        (48, '_(49)'): 87, (48, '_50+'): 81, (48, 'doublequoted'): 85,
        (48, 'funcall'): 83, (48, 'literal'): 82, (48, 'singlequoted'): 86,
        (48, 'value'): 49, (48, 'varcall'): 84, (51, '_(49)'): 87,
        (51, '_50+'): 81, (51, 'doublequoted'): 85, (51, 'funcall'): 83,
        (51, 'literal'): 82, (51, 'singlequoted'): 86, (51, 'value'): 114,
        (51, 'varcall'): 84, (52, '_24?'): 53, (53, 'conjunction'): 35,
        (53, 'disjunction'): 54, (53, 'identifier'): 45, (53, 'logicunop'): 57,
        (53, 'test'): 40, (54, '_24?'): 55, (57, '_24?'): 58,
        (58, 'conjunction'): 35, (58, 'disjunction'): 59,
        (58, 'identifier'): 45, (58, 'logicunop'): 57, (58, 'test'): 40,
        (78, '_57*'): 79, (79, '_24?'): 80, (81, '_(49)'): 88,
        (81, 'doublequoted'): 85, (81, 'funcall'): 83, (81, 'literal'): 82,
        (81, 'singlequoted'): 86, (81, 'varcall'): 84, (89, '_52*'): 90,
        (90, '_(51)'): 97, (90, 'doublequoted_escaped'): 94,
        (90, 'funcall'): 95, (90, 'literal'): 92, (90, 'varcall'): 96,
        (98, '_54*'): 99, (99, '_(53)'): 104, (99, 'literal'): 101,
        (99, 'singlequoted_escaped'): 103, (107, 'identifier'): 115,
        (108, '_24?'): 109, (109, '_(49)'): 87, (109, '_50+'): 81,
        (109, 'doublequoted'): 85, (109, 'funcall'): 83, (109, 'literal'): 82,
        (109, 'singlequoted'): 86, (109, 'value'): 110, (109, 'varcall'): 84,
        (110, '_57*'): 111, (111, '_24?'): 112, (116, '_(49)'): 87,
        (116, '_50+'): 81, (116, 'doublequoted'): 85, (116, 'funcall'): 83,
        (116, 'literal'): 82, (116, 'singlequoted'): 86, (116, 'value'): 117,
        (116, 'varcall'): 84
    }
    _shift = {
        (0, 'EOF'): 7, (0, 'WHITESPACE'): 50, (1, EOF): 154, (3, ':'): 5,
        (3, 'EOF'): 4, (5, 'WHITESPACE'): 50, (9, 'ALPHAALPHANUM'): 20,
        (10, '"'): 89, (10, '$'): 107, (10, "'"): 98, (10, ','): 12,
        (10, 'ALPHAALPHANUM'): 105, (10, 'LITERAL'): 106, (13, ','): 14,
        (15, 'WHITESPACE'): 50, (16, '['): 21, (17, '+'): 29, (17, '-'): 32,
        (17, ':'): 27, (17, '='): 31, (21, 'WHITESPACE'): 50, (22, '!'): 60,
        (22, '('): 52, (22, 'ALPHAALPHANUM'): 20, (23, 'WHITESPACE'): 50,
        (24, ']'): 25, (25, 'WHITESPACE'): 50, (27, '='): 28, (29, '='): 30,
        (32, '='): 33, (33, 'WHITESPACE'): 50, (35, 'WHITESPACE'): 50,
        (36, ';'): 61, (36, '|'): 62, (37, 'WHITESPACE'): 50, (38, '!'): 60,
        (38, '('): 52, (38, 'ALPHAALPHANUM'): 20, (40, 'WHITESPACE'): 50,
        (41, '&'): 65, (41, ','): 64, (42, 'WHITESPACE'): 50, (43, '!'): 60,
        (43, '('): 52, (43, 'ALPHAALPHANUM'): 20, (45, 'WHITESPACE'): 50,
        (46, '!'): 69, (46, '<'): 71, (46, '='): 67, (46, '>'): 72,
        (46, '~'): 75, (47, 'WHITESPACE'): 50, (48, '"'): 89, (48, '$'): 107,
        (48, "'"): 98, (48, 'ALPHAALPHANUM'): 105, (48, 'LITERAL'): 106,
        (51, '"'): 89, (51, '$'): 107, (51, "'"): 98,
        (51, 'ALPHAALPHANUM'): 105, (51, 'LITERAL'): 106,
        (52, 'WHITESPACE'): 50, (53, '!'): 60, (53, '('): 52,
        (53, 'ALPHAALPHANUM'): 20, (54, 'WHITESPACE'): 50, (55, ')'): 56,
        (57, 'WHITESPACE'): 50, (58, '!'): 60, (58, '('): 52,
        (58, 'ALPHAALPHANUM'): 20, (62, '|'): 63, (65, '&'): 66, (67, '='): 68,
        (67, '~'): 77, (69, '='): 70, (71, '='): 73, (72, '='): 74,
        (75, '='): 76, (79, 'WHITESPACE'): 51, (81, '"'): 89, (81, '$'): 107,
        (81, "'"): 98, (81, 'ALPHAALPHANUM'): 105, (81, 'LITERAL'): 106,
        (90, '!'): 119, (90, '"'): 91, (90, '$'): 107, (90, '&'): 126,
        (90, "'"): 133, (90, '+'): 131, (90, ','): 127, (90, '-'): 132,
        (90, ':'): 129, (90, ';'): 128, (90, '<'): 121, (90, '='): 120,
        (90, '>'): 122, (90, 'ALPHAALPHANUM'): 105, (90, 'LITERAL'): 106,
        (90, 'WHITESPACE'): 93, (90, '['): 123, (90, ']'): 124, (90, '|'): 125,
        (90, '~'): 130, (99, '!'): 134, (99, '"'): 148, (99, '$'): 149,
        (99, '&'): 141, (99, "'"): 100, (99, '('): 150, (99, ')'): 151,
        (99, '+'): 146, (99, ','): 142, (99, '-'): 147, (99, ':'): 144,
        (99, ';'): 143, (99, '<'): 136, (99, '='): 135, (99, '>'): 137,
        (99, 'ALPHAALPHANUM'): 105, (99, 'LITERAL'): 106,
        (99, 'WHITESPACE'): 102, (99, '['): 138, (99, ']'): 139,
        (99, '{'): 152, (99, '|'): 140, (99, '}'): 153, (99, '~'): 145,
        (107, '('): 108, (107, 'ALPHAALPHANUM'): 20, (107, '{'): 116,
        (108, 'WHITESPACE'): 50, (109, '"'): 89, (109, '$'): 107,
        (109, "'"): 98, (109, 'ALPHAALPHANUM'): 105, (109, 'LITERAL'): 106,
        (111, 'WHITESPACE'): 51, (112, ')'): 113, (116, '"'): 89,
        (116, '$'): 107, (116, "'"): 98, (116, 'ALPHAALPHANUM'): 105,
        (116, 'LITERAL'): 106, (117, '}'): 118
    }

    def __init__(self, max_err=None, errcorr_pre=4, errcorr_post=4):
        """Create a new parser instance.

        The constructor arguments are all optional, they control the
        handling of parse errors: `max_err` can be given to bound the
        number of errors reported during one run of the parser.
        `errcorr_pre` controls how many tokens before an invalid token
        the parser considers when trying to repair the input.
        `errcorr_post` controls how far beyond an invalid token the
        parser reads when evaluating the quality of an attempted
        repair.
        """
        self.max_err = max_err
        self.m = errcorr_pre
        self.n = errcorr_post

    @staticmethod
    def leaves(tree):
        """Iterate over the leaves of a parse tree.

        This function can be used to reconstruct the input from a
        parse tree.
        """
        if tree[0] in Parser.terminals:
            yield tree
        else:
            for x in tree[1:]:
                for t in Parser.leaves(x):
                    yield t

    def _parse(self, input, stack, state):
        """Internal function to construct a parse tree.

        'Input' is the input token stream, 'stack' is the inital stack
        and 'state' is the inital state of the automaton.

        Returns a 4-tuple (done, count, state, error).  'done' is a
        boolean indicationg whether parsing is completed, 'count' is
        number of successfully shifted tokens, and 'error' is None on
        success or else the first token which could not be parsed.
        """
        read_next = True
        count = 0
        while state != self._halting_state:
            if read_next:
                try:
                    lookahead = next(input)
                except StopIteration:
                    return (False,count,state,None)
                read_next = False
            token = lookahead[0]

            if (state,token) in self._shift:
                stack.append((state,lookahead))
                state = self._shift[(state,token)]
                read_next = True
                count += 1
            elif (state,token) in self._reduce:
                X,n = self._reduce[(state,token)]
                if n > 0:
                    state = stack[-n][0]
                    tree = [ X ]
                    for s in stack[-n:]:
                        if s[1][0] in self._transparent:
                            tree.extend(s[1][1:])
                        else:
                            tree.append(s[1])
                    tree = tuple(tree)
                    del stack[-n:]
                else:
                    tree = (X,)
                stack.append((state,tree))
                state = self._goto[(state,X)]
            else:
                return (False,count,state,lookahead)
        return (True,count,state,None)

    def _try_parse(self, input, stack, state):
        count = 0
        while state != self._halting_state and count < len(input):
            token = input[count][0]

            if (state,token) in self._shift:
                stack.append(state)
                state = self._shift[(state,token)]
                count += 1
            elif (state,token) in self._reduce:
                X,n = self._reduce[(state,token)]
                if n > 0:
                    state = stack[-n]
                    del stack[-n:]
                stack.append(state)
                state = self._goto[(state,X)]
            else:
                break
        return count

    def parse(self, input):
        """Parse the tokens from `input` and construct a parse tree.

        `input` must be an interable over tuples.  The first element
        of each tuple must be a terminal symbol of the grammar which
        is used for parsing.  All other element of the tuple are just
        copied into the constructed parse tree.

        If `input` is invalid, a ParseErrors exception is raised.
        Otherwise the function returns the parse tree.
        """
        errors = []
        input = chain(input, [(self.EOF,)])
        stack = []
        state = 0
        while True:
            done,_,state,lookahead = self._parse(input, stack, state)
            if done:
                break

            expect = [ t for s,t in list(self._reduce.keys())+list(self._shift.keys())
                       if s == state ]
            errors.append((lookahead, expect))
            if self.max_err is not None and len(errors) >= self.max_err:
                raise self.ParseErrors(errors, None)

            queue = []
            def split_input(m, stack, lookahead, input, queue):
                for s in stack:
                    for t in self.leaves(s[1]):
                        queue.append(t)
                        if len(queue) > m:
                            yield queue.pop(0)
                queue.append(lookahead)
            in2 = split_input(self.m, stack, lookahead, input, queue)
            stack = []
            done,_,state,lookahead = self._parse(in2, stack, 0)
            m = len(queue)
            for i in range(0, self.n):
                try:
                    queue.append(next(input))
                except StopIteration:
                    break

            def vary_queue(queue, m):
                for i in range(m-1, -1, -1):
                    for t in self.terminals:
                        yield queue[:i]+[(t,)]+queue[i:]
                    if queue[i][0] == self.EOF:
                        continue
                    for t in self.terminals:
                        if t == queue[i]:
                            continue
                        yield queue[:i]+[(t,)]+queue[i+1:]
                    yield queue[:i]+queue[i+1:]
            best_val = len(queue)-m+1
            best_queue = queue
            for q2 in vary_queue(queue, m):
                pos = self._try_parse(q2, [ s[0] for s in stack ], state)
                val = len(q2) - pos
                if val < best_val:
                    best_val = val
                    best_queue = q2
                    if val == len(q2):
                        break
            if best_val >= len(queue)-m+1:
                raise self.ParseErrors(errors, None)
            input = chain(best_queue, input)

        tree = stack[0][1]
        if errors:
            raise self.ParseErrors(errors, tree)
        return tree
