#!/usr/bin/python3

# [SFT]make by [SFT]technologies
#
# Released under the GPLv3 or later
#
# As always, this programm comes with NO WARRANTY...
#
# (c) 2013 Michael Ensslin	<michael@ensslin.cc>
# (c) 2013 Jonas Jelten
# (c) 2013 Andre Kupka
# (c) 2013-2213 Max Veit
#
# Note that [SFT]make is not being developed as a single source file,
# but as a collection of multiple files, one of which is even auto-generated.
# Every source file is capable of running by itself, but contains only a
# fraction of the functionality, and, if run by itself, may need to import
# functionality from the other source files.
#
# Before distribution, all source file fragments are assembled to one
# main file, sftmake, via 'make assembly'.
# This allows for easy usage, but not for easy development.
#
# [SFT]make uses the Wisent Parser Generator to parse assignment statements.
# The grammar is specified in assignmentgrammar.wi in an EBNF-like style.
# Wisent can be invoked via 'make grammar'.
# Wisent is only needed to generate the Parser class, not for running [SFT]make.
#
# The code generated by Wisent, i.e. the classes Unique and Parser, with the
# exception of parts taken verbatim from the input grammar file, are subject
# to the following copyright notice, which is repeated at the beginning of the
# source code block generated by Wisent.
#
# <begin wisent copyright notice>
#
# Copyright (C) 2008, 2009  Jochen Voss <voss@seehuhn.de>
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#   1. Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#
#   2. Redistributions in binary form must reproduce the above
#      copyright notice, this list of conditions and the following
#      disclaimer in the documentation and/or other materials provided
#      with the distribution.
#
#   3. The name of the author may not be used to endorse or promote
#      products derived from this software without specific prior
#      written permission.
#
# This software is provided by the author "as is" and any express or
# implied warranties, including, but not limited to, the implied
# warranties of merchantability and fitness for a particular purpose
# are disclaimed.  In no event shall the author be liable for any
# direct, indirect, incidental, special, exemplary, or consequential
# damages (including, but not limited to, procurement of substitute
# goods or services; loss of use, data, or profits; or business
# interruption) however caused and on any theory of liability, whether
# in contract, strict liability, or tort (including negligence or
# otherwise) arising in any way out of the use of this software, even
# if advised of the possibility of such damage.
#
# <end wisent copyright notice>

# This variable is set in the header.
# It can be checked if the variable is set from each fragment file to
# determine at run-time if its code is run as part of an assembled
# main file, or as a standalone file.
# The check can, e.g. be done via the statement
#	"assembled" in globals()
assembled = True

# End of Header



# BEGIN FILE util.py



#!/usr/bin/python3
import os

class orderedset:
	""" wrapper around OrderedDict because fak u python

	we just need OrderedSet functionality, so we set val = None for all keys. dirty, nah?"""
	def __init__(self):
		from collections import OrderedDict
		self.storage = OrderedDict()

	#append an element
	#returns true if the element was new
	def append(self, x):
		if(x in self.storage):
			self.storage.pop(x)
			self.storage[x] = None
			return False
		else:
			self.storage[x] = None
			return True

	#delete an element
	def delete(self, x):
		self.storage.pop(x)
	
	#remove all elements
	def clear(self):
		self.storage.clear()
	
	#update the ordered set with an other ordered set
	def update(self, x):
		for v in x:
			self.storage.pop(v)
		self.storage.update(x.storage)
	
	def tolist(self):
		return [x for x in self.storage]
	
	def newest(self):
		return next(reversed(self.storage))

	def __iter__(self):
		return self.storage.__iter__()

def findsmroot():
	path = os.path.abspath('.')
	while(not os.path.isfile(path + "/smfile")):
		if(path == "/"):
			raise Exception("No smfile found")
		else:
			path = os.path.abspath(path + '/..')
	return path

smroot = findsmroot()

#functions for path conversions

#convert path to absolute POSIX path
def abspath(path, relto = '^'):
	#if the path is empty, fak u
	if(not path):
		raise Exception('Path must not be empty')

	#if the path starts with '/', it's already absolute
	if(path[0] == '/'):
		result = path

	#if the path starts with '^', we need to replace that with smroot
	elif(path[0] == '^'):
		result = smroot + '/' + path[1:]

	#else, the path is relative... to relto
	else:
		if(relto[0] != '^'):
			raise Exception('relto must start with ^')
		result = abspath(relto) + '/' + path
	
	return os.path.normpath(result)

#convert path to relative POSIX path
def relpath(path, relto = '^'):
	if(not path): #fak u
		raise Exception("Path must not be empty")
	
	elif(path[0] == '/'):
		return os.path.relpath(path, abspath(relto))

	if(path[0] == '^'):
		return os.path.relpath(smroot + '/' + path[1:], abspath(relto))

	#else, path is already relative to relto
	else:
		return os.path.normpath(path)

#convert path to sftmake path
def smpath(path, relto = '^'):
	#if the path is empty, fak u
	if(not path):
		raise Exception("Path must not be empty")

	#if the path starts with '^', it's already an sftmake path
	if(path[0] == '^'):
		return path

	#else, get relative path
	if(path[0] != '/'):
		path = abspath(path, relto)

	#generate path relative to smroot (to just add ^ then)
	path = os.path.relpath(path, smroot)

	if(path == '.'):
		return '^'
	else:
		return '^/' + path

#TODO Decide on an encoding. It can be made arbitrarily complicated.
def generate_oname(obj_desc):
	"""Encodes the object name/command description in order to be sanely
	and intuitively displayed as a filename.

	The colon is the escape character; escaping colons requires a double
	colon.
	"""
	# Escape any colons present in the string (why would you put colons in
	# a string? Seriously?)
	obj_desc = re.sub(r":", "::", obj_desc)
	# Escape underscores and pipe characters
	obj_desc = re.sub(r"\|", ":|", obj_desc)
	obj_desc = re.sub(r"_", ":_", obj_desc)
	# Finally, replace spaces with underscores and slashes with vertical pipes.
	# If your filename contains any other evil characters,
	# then God - er - Gnu help you.
	obj_desc = re.sub(r" ", "_", obj_desc)
	obj_desc = re.sub(r"/", "|", obj_desc)
	# And_there_you_go::_A_weirdly:/interestingly-escaped_command.
	return obj_desc



# BEGIN FILE conf.py



#!/usr/bin/python3

if not "assembled" in globals():
	from util import orderedset

#dict that contains all variables. key = varname, value = var object
variables = {}

#holds metadata for a config:
#the conf's parent configurations
#the conf's directory
#the conf's rank (BASE, DIR, TARGET, SRC, SRCFORTARGET)
CONF_BASE = 0
CONF_DIR = 1
CONF_TARGET = 2
CONF_SRC = 3
CONF_SRCFORTARGET = 4

class config:
	def __init__(self, parents, directory, rank):
		self.parents = parents
		self.directory = directory
		self.rank = rank

#global dict that holds config metadata for all confs
# key: confname
# value: config metadata object
confinfo = {"default": config([], '^', CONF_BASE)}

#TODO #TODO
#   _____        _
#     |     _   | \   _
#     |    / \  |  | / \	<---  TODO
#     |    \_/  |_/  \_/
#
#	!((a==g++);!(b==g++));(c=~a*)
#
#	c[srcsuffix==cpp][toolchain==gnu]=g++
#
#	'!(c==g++)'
#
#	condnot('!(c==g++)')
#	

class cond:
	"""represents one variable condition (abstract base class? factory class? lol?)"""
	def create(condstr):
		""" abstract condition proxy factory singleton bean (not quite) """

		#read constr until operator sign
		#from that operator, decide which class to produce
		#give varname and condstr to the constructor of that class
		#return that class
		pass

	#abstract, must be implemented
	def check(self, conf, depends = orderedset()):
		raise NotImplementedError()

class cond_equals(cond):
	def __init__(self, varname, val):
		self.val = val
		self.varname = varname

	def check(self, conf, depends = orderedset()):
		return (variables[varname].get(conf, depends) == val)

#modes of variable values
VALMODE_APPEND = 0	#append the value to existing list. if already in list, move it to end
VALMODE_SET = 1		#delete existing list, add value to it
VALMODE_REMOVE = 2	#remove the value from existing list

class val:
	"""
	represents one variable value
	a value has:
		a list of conditions, which all need to be met for the value to have the effect described by its mode
		one of the above modes
		a string value
	"""

	def __init__(self, conditions, mode, string):
		self.conditions = conditions
		self.mode = mode
		self.string = string
	
	def check_conds(self, conf, depends = orderedset()):
		"""check all conditions of this value"""
		if (conditions != None):
			for c in conditions:
				if not c.check(conf, depends):
					return False
		return True
	
	def get(self):
		return (mode, string)


VARTYPE_STRING = 0
VARTYPE_PATH = 1
VARTYPE_INT = 2

class var:
	"""
	one configuration variable
	has a list of values for each conf, each of the values has a list of conditions which all need to be true
	"""

	def __init__(self, name, vartype = VARTYPE_STRING, single = False, defaultvals = []):
		self.name = name
		#add yourself to the global variables dict
		variables[name] = self

		#what type is the variable
		self.vartype = vartype

		#is this variable a single value var?
		#if yes, on reading only the most lately written value is returned
		self.single = single

		#given default values for the var
		self.vals = {"default": defaultvals}
	

	def add(self, val, conf):
		"""add a possible value to this variable"""
		#if vartype is string, simply do nothing
		if(self.vartype == VARTYPE_STRING):
			pass

		#if vartype is a path, then convert the given string to a smpath
		elif(self.vartype == VARTYPE_PATH):
			val = smpath(val, confinfo[conf].directory)

		#if vartype is an int, we parse it as such
		elif(self.vartype == VARTYPE_INT):
			try:
				val = int(val)
			except:
				raise Exception("Value must be an integer")

		#if valtype is a list, then val must be one of the list elements
		elif(isinstance(self.vartype, list)):
			if val not in self.vartype:
				raise Exception("Value must be in " + str(self.vartype))
		else:
			raise Exception("Unknown Valuetype")

		#finally, add the value to the value list for the configuration
		if(conf not in self.vals):
			self.vals[conf] = [val]
		else:
			self.vals[conf].append(val)

	def get(self, conf, depends = orderedset()):
		"""returns the variable value for a certain configuration"""
		if(depends.append(self) == False):
			chain = self.name
			for v in depends:
				chain += ' -> ' + v.name
			raise Exception("Circular dependency detected when resolving conditions: " + chain)

		result = orderedset()

		#for each val from each parent config
		for conf in confparenthyperres(conf):
			for val in self.vals.get(conf, []):
				#if condition of the value evaluates true, apply to result
				if(val.check_conds(conf, depends)):
					(mode, string) = val.get()
					if(mode == VALMODE_APPEND):
						result.append(string)
					elif(mode == VALMODE_SET):
						result.clear()
						result.append(string)
					elif(mode == VALMODE_REMOVE):
						result.remove(string)
		
		if(self.single):
			try:
				return result.newest()
			except:
				raise Exception("No value for single-val variable")
		else:
			return result.tolist()

def confparenthyperres(origin):
	"""
	returns list of all configurations that origin depends on, with origin at the end
	for technical reasons, return value is an ordered dict with 'None' as values
	"""
	result = orderedset()
	for parent in confinfo[origin].parents:
		result.update(confparenthyperres(parent))
	result.append(origin)
	return result

#all variables and their default configurations
var('c', VARTYPE_STRING, True, [
	val(cond.create("srcsuffix==cpp"), VALMODE_APPEND, "g++"),
	val(cond.create("srcsuffix==c"  ), VALMODE_APPEND, "gcc")
])

#the used source files
var('srcs', VARTYPE_PATH, False, [])
#etc... basically, type the variable list from documentation section 3



# BEGIN FILE parser.py



#!/usr/bin/python3
import string

class ParserException(Exception):
	def __init__(self, pos, situation, expected, got):
		Exception.__init__(self, "In " + situation + ", expected " + expected + ", but got " + got)
		self.pos = pos
		self.situation = situation
		self.expected = expected
		self.got = got

#all of these exception types are required for automatic testing
class TokenizerException(ParserException):
	pass
class TokenizerEscapeSequenceException(TokenizerException):
	pass
class TokenizerXEscapeIllegalCharacterException(TokenizerEscapeSequenceException):
	pass
class TokenizerXEscapeEndOfLineException(TokenizerEscapeSequenceException):
	pass
class TokenizerUEscapeIllegalCharacterException(TokenizerEscapeSequenceException):
	pass
class TokenizerUEscapeEndOfLineException(TokenizerEscapeSequenceException):
	pass
class TokenizerEscapeIllegalCharacterException(TokenizerEscapeSequenceException):
	pass
class TokenizerEscapeEndOfLineException(TokenizerEscapeSequenceException):
	pass

#TODO add testcases for all of these exceptions

def tokenize_line(line):
	def tokenize_characters(line):
		SPECIALCHARS = "!=<>()[]{}$'\"|&,;:~+-"
		ESCAPE_ALLOWEDCHARS = SPECIALCHARS + "\\ "

		i = 0
		while i < len(line):
			c = line[i]
			if c == '\\':
				i += 1
				if i < len(line):
					c = line[i]
					if c in ESCAPE_ALLOWEDCHARS:
						yield ('o', (c, i-1))
					elif c == 'x':
						try:
							val = int(line[i+1]+line[i+2], 16)
							yield ('o', (chr(val), i-1))
							i += 2
						except ValueError:
							raise TokenizerXEscapeIllegalCharacterException(i, "'\\x' escape", "two hex digits", line[i+1:i+3])
						except IndexError:
							raise TokenizerXEscapeEndOfLineException(i, "'\\x' escape", "two hex digits", "end of line")
					elif c == 'u':
						try:
							val = int(line[i+1]+line[i+2]+line[i+3]+line[i+4],16)
							yield ('o', (chr(val), i-1))
							i += 4
						except ValueError:
							raise TokenizerUEscapeIllegalCharacterException(i, "'\\u' escape", "four hex digits", line[i+1:i+5])
						except IndexError:
							raise TokenizerUEscapeEndOfLineException(i, "'\\u' escape", "four hex digits", "end of line")
					else:
						raise TokenizerEscapeIllegalCharacterException(i, "'\\' escape", "u, x, or one of '" + ESCAPE_ALLOWEDCHARS + "'", "'" + c + "'")
				else:
					raise TokenizerEscapeEndOfLineException(i, "'\\' escape", "u, x, or one of '" + ESCAPE_ALLOWEDCHARS + "'", "end of line")
			elif c in SPECIALCHARS:
				yield (c, (c, i))
			elif c.isspace(): 
				yield ('w', (c, i)) #w == WHITESPACE
			elif c in string.ascii_letters or c == '_':
				yield ('a', (c, i)) #a == ALPHA
			elif c.isdigit():
				yield ('d', (c, i)) #d == DIGIT
			else:
				yield ('o', (c, i)) #o == OTHER
			i += 1
	
	tokens = []

	current_name = ""
	current_text = ""
	current_pos = -1

	#condense multiple chars of the same type to single tokens, to make the grammar simpler, and LR(1)-parsable
	for (name, (char, pos)) in tokenize_characters(line):
		if current_name == "WHITESPACE" and name == "w":
			#we've read an other whitespace, append
			current_text += char
		elif current_name == "IDENTIFIER" and name in "ad":
			#we've read an other alphanumeric character
			current_text += char
		elif current_name == "IDENTIFIER" and name == "o":
			#degrade token to 'literal', since it contains non-alphanum characters
			current_name = "LITERAL"
			current_text += char
		elif current_name == "LITERAL" and name in "ado":
			#we've read an other literal character
			current_text += char
		else:
			#we've read a non-matching follow-on token. write away the current token

			#if we're at the (empty) start token, don't write it to the list
			if current_name != "":
				tokens.append((current_name, (current_text, current_pos)))

			#initialize new current token
			current_name = str(name)
			current_text = str(char)
			current_pos = pos

			#literal characters get a special treatment
			if current_name == "a":
				current_name = "IDENTIFIER"
			elif current_name == "w":
				current_name = "WHITESPACE"
			elif current_name in "do":
				current_name = "LITERAL"

	if current_name != "":
		tokens.append((current_name, (current_text, current_pos)))
	
	return tokens

class ConditionNode:
	def evaluate(self):
		raise NotImplementedError("evaluate not implemented in abstract base class")

class ConditionNotNode(ConditionNode):
	def __init__(self, child):
		self.child = child

	def __repr__(self):
		return "!(" + str(self.child) + ")"

	def evaluate(self):
		return not self.child.evaluate()

class ConditionJunctorNode(ConditionNode):
	def __init__(self, leftchild, rightchild):
		self.leftchild = leftchild
		self.rightchild = rightchild

class ConditionAndNode(ConditionJunctorNode):
	def __init__(self, leftchild, rightchild):
		ConditionJunctorNode.__init__(self, leftchild, rightchild)

	def __repr__(self):
		return "(" + str(self.leftchild) + ") & (" + str(self.rightchild) + ")"
	
	def evaluate(self):
		return self.leftchild.evaluate() and self.rightchild.evaluate()

class ConditionOrNode(ConditionJunctorNode):
	def __init__(self, leftchild, rightchild):
		ConditionJunctorNode.__init__(self, leftchild, rightchild)

	def __repr__(self):
		return "(" + str(self.leftchild) + ") | (" + str(self.rightchild) + ")"
	
	def evaluate(self):
		return self.leftchild.evaluate() or self.rightchild.evaluate()
	
def condition_test_equals(varval, val):
	return (varval == val)

def condition_test_matches(varval, val):
	return True # TODO stub

def condition_test_less(varval, val):
	return True # TODO stub

def condition_test_greater(varval, val):
	return True # TODO stub

class ConditionTestNode(ConditionNode):
	def __init__(self, vartoken, optoken, valtoken):
		self.var = vartoken.content
		self.val = evaluate_valstr(valtoken.content)
		op = optoken.content
		if op == "==" or op == "=":
			self.testfunc = condition_test_equals
			self.op = "=="
			self.invert = False
		elif op == "!=" or op == "<>":
			self.testfunc = condition_test_equals
			self.op = "!="
			self.invert = True
		elif op == "~=" or op == "=~":
			self.testfunc = condition_test_matches
			self.op = "~="
			self.invert = False
		elif op == "!~" or op == "~!":
			self.testfunc = condition_test_matches
			self.op = "!~"
			self.invert = True
		elif op == "<":
			self.testfunc = condition_test_less
			self.op = "<"
			self.invert = False
		elif op == ">":
			self.testfunc = condition_test_greater
			self.op = ">"
			self.invert = False
		elif op == "<=":
			self.testfunc = condition_test_greater
			self.op = "<="
			self.invert = True
		elif op == ">=":
			self.testfunc = condition_test_less
			self.op = ">="
			self.invert = True
		else:
			raise Exception("Unknown Operator: " + op + " at position " + str(optoken.pos));
	
	def __repr__(self):
		return self.var + self.op + str(self.val)

	def evaluate(self):
		varvalue = get_variable_value(self.var) # TODO get correct variable value
		result = testfunc(varvalue, self.val)
		if self.invert:
			return not result
		else:
			return result



# BEGIN FILE autoparser.py



# LR(1) parser, autogenerated on 2013-02-17 07:00:39
# generator: wisent 0.6.2, http://seehuhn.de/pages/wisent
# source: assignmentgrammar.wi

# All parts of this file which are not taken verbatim from the input grammar
# are covered by the following notice:
#
# Copyright (C) 2008, 2009  Jochen Voss <voss@seehuhn.de>
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#   1. Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#
#   2. Redistributions in binary form must reproduce the above
#      copyright notice, this list of conditions and the following
#      disclaimer in the documentation and/or other materials provided
#      with the distribution.
#
#   3. The name of the author may not be used to endorse or promote
#      products derived from this software without specific prior
#      written permission.
#
# This software is provided by the author "as is" and any express or
# implied warranties, including, but not limited to, the implied
# warranties of merchantability and fitness for a particular purpose
# are disclaimed.  In no event shall the author be liable for any
# direct, indirect, incidental, special, exemplary, or consequential
# damages (including, but not limited to, procurement of substitute
# goods or services; loss of use, data, or profits; or business
# interruption) however caused and on any theory of liability, whether
# in contract, strict liability, or tort (including negligence or
# otherwise) arising in any way out of the use of this software, even
# if advised of the possibility of such damage.

from itertools import chain

class Unique(object):

    """Unique objects for use as markers.

    These objects are internally used to represent the start symbol
    and the end-of-input marker of the grammar.
    """

    def __init__(self, label):
        """Create a new unique object.

        `label` is a string which is used as a textual representation
        of the object.
        """
        self.label = label

    def __repr__(self):
        """Return the `label` given at object construction."""
        return self.label

    def __lt__(self, other):
        if isinstance(other, str):
            return self.label < other
        if isinstance(other, Unique):
            return self.label < other.label
        return NotImplemented()

    def __gt__(self, other):
        if isinstance(other, str):
            return self.label > other
        if isinstance(other, Unique):
            return self.label > other.label
        return NotImplemented()

class Parser(object):

    """LR(1) parser class.

    terminal symbols:
      '!', '"', '$', '&', "'", '(', ')', '+', ',', '-', ':', ';', '<', '=',
      '>', 'EOF', 'IDENTIFIER', 'LITERAL', 'WHITESPACE', '[', ']', '{', '|',
      '}', '~'

    nonterminal symbols:
      'assignment', 'assignmentop', 'assignments', 'assignmentvarwithop',
      'assignmentvarwithoutop', 'condition', 'conjunction', 'conjunctionop',
      'disjunction', 'disjunctionop', 'doublequoted', 'doublequoted_escaped',
      'funcall', 'identifier', 'literal', 'logicunop', 'singlequoted',
      'singlequoted_escaped', 'test', 'testop', 'value', 'valuelist', 'varcall'

    production rules:
      'assignments' -> 'assignment' '_1*' 'EOF'
      '_1*' ->
      '_1*' -> '_1*' ':' 'assignment'
      'assignments' -> 'EOF'
      'assignment' -> '_25?' '_4*' 'assignmentvarwithop' 'valuelist'
      '_4*' ->
      '_4*' -> '_4*' 'assignmentvarwithop' ','
      '_4*' -> '_4*' 'assignmentvarwithoutop' ','
      'assignmentvarwithop' -> 'identifier' '_25?' '_6?' 'assignmentop'
      '_6?' ->
      '_6?' -> 'condition'
      'assignmentvarwithoutop' -> 'identifier' '_25?' '_6?'
      'identifier' -> 'IDENTIFIER'
      'condition' -> '[' '_25?' 'disjunction' '_25?' ']' '_25?'
      'assignmentop' -> ':' '='
      'assignmentop' -> '+' '='
      'assignmentop' -> '='
      'assignmentop' -> '-' '=' '_25?'
      'disjunction' -> 'conjunction' '_25?' 'disjunctionop' '_25?' 'conjunction'
      'conjunction' -> 'test' '_25?' 'conjunctionop' '_25?' 'test'
      'test' -> 'identifier' '_25?' 'testop' '_25?' 'value'
      '_25?' ->
      '_25?' -> 'WHITESPACE'
      'test' -> '(' '_25?' 'disjunction' '_25?' ')'
      'test' -> 'logicunop' '_25?' 'disjunction'
      'logicunop' -> '!'
      'disjunctionop' -> ';'
      'disjunctionop' -> '|'
      'disjunctionop' -> '|' '|'
      'conjunctionop' -> ','
      'conjunctionop' -> '&'
      'conjunctionop' -> '&' '&'
      'testop' -> '='
      'testop' -> '=' '='
      'testop' -> '!' '='
      'testop' -> '<'
      'testop' -> '>'
      'testop' -> '<' '='
      'testop' -> '>' '='
      'testop' -> '~' '='
      'testop' -> '=' '~'
      'valuelist' -> 'value' '_57*' '_25?'
      'valuelist' ->
      'value' -> '_50+'
      '_(49)' -> 'literal'
      '_(49)' -> 'funcall'
      '_(49)' -> 'varcall'
      '_(49)' -> 'doublequoted'
      '_(49)' -> 'singlequoted'
      '_50+' -> '_(49)'
      '_50+' -> '_50+' '_(49)'
      'doublequoted' -> '"' '_52*' '"'
      '_(51)' -> 'literal'
      '_(51)' -> 'WHITESPACE'
      '_(51)' -> 'doublequoted_escaped'
      '_(51)' -> 'funcall'
      '_(51)' -> 'varcall'
      '_52*' ->
      '_52*' -> '_52*' '_(51)'
      'singlequoted' -> "'" '_54*' "'"
      '_(53)' -> 'literal'
      '_(53)' -> 'WHITESPACE'
      '_(53)' -> 'singlequoted_escaped'
      '_54*' ->
      '_54*' -> '_54*' '_(53)'
      'literal' -> 'IDENTIFIER'
      'literal' -> 'LITERAL'
      'funcall' -> '$' '(' '_25?' 'value' '_57*' '_25?' ')'
      '_57*' ->
      '_57*' -> '_57*' 'WHITESPACE' 'value'
      'varcall' -> '$' 'identifier'
      'varcall' -> '$' '{' 'value' '}'
      'doublequoted_escaped' -> '!'
      'doublequoted_escaped' -> '='
      'doublequoted_escaped' -> '<'
      'doublequoted_escaped' -> '>'
      'doublequoted_escaped' -> '['
      'doublequoted_escaped' -> ']'
      'doublequoted_escaped' -> '|'
      'doublequoted_escaped' -> '&'
      'doublequoted_escaped' -> ','
      'doublequoted_escaped' -> ';'
      'doublequoted_escaped' -> ':'
      'doublequoted_escaped' -> '~'
      'doublequoted_escaped' -> '+'
      'doublequoted_escaped' -> '-'
      'doublequoted_escaped' -> "'"
      'singlequoted_escaped' -> '!'
      'singlequoted_escaped' -> '='
      'singlequoted_escaped' -> '<'
      'singlequoted_escaped' -> '>'
      'singlequoted_escaped' -> '['
      'singlequoted_escaped' -> ']'
      'singlequoted_escaped' -> '|'
      'singlequoted_escaped' -> '&'
      'singlequoted_escaped' -> ','
      'singlequoted_escaped' -> ';'
      'singlequoted_escaped' -> ':'
      'singlequoted_escaped' -> '~'
      'singlequoted_escaped' -> '+'
      'singlequoted_escaped' -> '-'
      'singlequoted_escaped' -> '"'
      'singlequoted_escaped' -> '$'
      'singlequoted_escaped' -> '('
      'singlequoted_escaped' -> ')'
      'singlequoted_escaped' -> '{'
      'singlequoted_escaped' -> '}'
    """

    class ParseErrors(Exception):

        """Exception class to represent a collection of parse errors.

        Instances of this class have two attributes, `errors` and `tree`.
        `errors` is a list of tuples, each describing one error.
        Each tuple consists of the first input token which could not
        be processed and the list of grammar symbols which were allowed
        at this point.
        `tree` is a "repaired" parse tree which might be used for further
        error checking, or `None` if no repair was possible.
        """

        def __init__(self, errors, tree):
            msg = "%d parse errors"%len(errors)
            Exception.__init__(self, msg)
            self.errors = errors
            self.tree = tree

    terminals = [ '!', '"', '$', '&', "'", '(', ')', '+', ',', '-', ':', ';',
                  '<', '=', '>', 'EOF', 'IDENTIFIER', 'LITERAL', 'WHITESPACE',
                  '[', ']', '{', '|', '}', '~' ]
    _transparent = [ '_(49)', '_(51)', '_(53)', '_1*', '_25?', '_4*', '_50+',
                     '_52*', '_54*', '_57*', '_6?' ]
    EOF = Unique('EOF')
    S = Unique('S')

    _halting_state = 154
    _reduce = {
        (0, 'IDENTIFIER'): ('_25?', 0), (2, ':'): ('_1*', 0),
        (2, 'EOF'): ('_1*', 0), (4, EOF): ('assignments', 3),
        (5, 'IDENTIFIER'): ('_25?', 0), (6, ':'): ('_1*', 3),
        (6, 'EOF'): ('_1*', 3), (7, EOF): ('assignments', 1),
        (8, 'IDENTIFIER'): ('_4*', 0), (10, ':'): ('valuelist', 0),
        (10, 'EOF'): ('valuelist', 0), (11, ':'): ('assignment', 4),
        (11, 'EOF'): ('assignment', 4), (12, 'IDENTIFIER'): ('_4*', 3),
        (14, 'IDENTIFIER'): ('_4*', 3), (15, '+'): ('_25?', 0),
        (15, ','): ('_25?', 0), (15, '-'): ('_25?', 0), (15, ':'): ('_25?', 0),
        (15, '='): ('_25?', 0), (15, '['): ('_25?', 0), (16, '+'): ('_6?', 0),
        (16, ','): ('_6?', 0), (16, '-'): ('_6?', 0), (16, ':'): ('_6?', 0),
        (16, '='): ('_6?', 0), (17, ','): ('assignmentvarwithoutop', 3),
        (18, '"'): ('assignmentvarwithop', 4),
        (18, '$'): ('assignmentvarwithop', 4),
        (18, "'"): ('assignmentvarwithop', 4),
        (18, ','): ('assignmentvarwithop', 4),
        (18, ':'): ('assignmentvarwithop', 4),
        (18, 'EOF'): ('assignmentvarwithop', 4),
        (18, 'IDENTIFIER'): ('assignmentvarwithop', 4),
        (18, 'LITERAL'): ('assignmentvarwithop', 4), (19, '+'): ('_6?', 1),
        (19, ','): ('_6?', 1), (19, '-'): ('_6?', 1), (19, ':'): ('_6?', 1),
        (19, '='): ('_6?', 1), (20, '!'): ('identifier', 1),
        (20, '"'): ('identifier', 1), (20, '$'): ('identifier', 1),
        (20, '&'): ('identifier', 1), (20, "'"): ('identifier', 1),
        (20, ')'): ('identifier', 1), (20, '+'): ('identifier', 1),
        (20, ','): ('identifier', 1), (20, '-'): ('identifier', 1),
        (20, ':'): ('identifier', 1), (20, ';'): ('identifier', 1),
        (20, '<'): ('identifier', 1), (20, '='): ('identifier', 1),
        (20, '>'): ('identifier', 1), (20, 'EOF'): ('identifier', 1),
        (20, 'IDENTIFIER'): ('identifier', 1),
        (20, 'LITERAL'): ('identifier', 1),
        (20, 'WHITESPACE'): ('identifier', 1), (20, '['): ('identifier', 1),
        (20, ']'): ('identifier', 1), (20, '|'): ('identifier', 1),
        (20, '}'): ('identifier', 1), (20, '~'): ('identifier', 1),
        (21, '!'): ('_25?', 0), (21, '('): ('_25?', 0),
        (21, 'IDENTIFIER'): ('_25?', 0), (23, ']'): ('_25?', 0),
        (25, '+'): ('_25?', 0), (25, ','): ('_25?', 0), (25, '-'): ('_25?', 0),
        (25, ':'): ('_25?', 0), (25, '='): ('_25?', 0),
        (26, '+'): ('condition', 6), (26, ','): ('condition', 6),
        (26, '-'): ('condition', 6), (26, ':'): ('condition', 6),
        (26, '='): ('condition', 6), (28, '"'): ('assignmentop', 2),
        (28, '$'): ('assignmentop', 2), (28, "'"): ('assignmentop', 2),
        (28, ','): ('assignmentop', 2), (28, ':'): ('assignmentop', 2),
        (28, 'EOF'): ('assignmentop', 2),
        (28, 'IDENTIFIER'): ('assignmentop', 2),
        (28, 'LITERAL'): ('assignmentop', 2), (30, '"'): ('assignmentop', 2),
        (30, '$'): ('assignmentop', 2), (30, "'"): ('assignmentop', 2),
        (30, ','): ('assignmentop', 2), (30, ':'): ('assignmentop', 2),
        (30, 'EOF'): ('assignmentop', 2),
        (30, 'IDENTIFIER'): ('assignmentop', 2),
        (30, 'LITERAL'): ('assignmentop', 2), (31, '"'): ('assignmentop', 1),
        (31, '$'): ('assignmentop', 1), (31, "'"): ('assignmentop', 1),
        (31, ','): ('assignmentop', 1), (31, ':'): ('assignmentop', 1),
        (31, 'EOF'): ('assignmentop', 1),
        (31, 'IDENTIFIER'): ('assignmentop', 1),
        (31, 'LITERAL'): ('assignmentop', 1), (33, '"'): ('_25?', 0),
        (33, '$'): ('_25?', 0), (33, "'"): ('_25?', 0), (33, ','): ('_25?', 0),
        (33, ':'): ('_25?', 0), (33, 'EOF'): ('_25?', 0),
        (33, 'IDENTIFIER'): ('_25?', 0), (33, 'LITERAL'): ('_25?', 0),
        (34, '"'): ('assignmentop', 3), (34, '$'): ('assignmentop', 3),
        (34, "'"): ('assignmentop', 3), (34, ','): ('assignmentop', 3),
        (34, ':'): ('assignmentop', 3), (34, 'EOF'): ('assignmentop', 3),
        (34, 'IDENTIFIER'): ('assignmentop', 3),
        (34, 'LITERAL'): ('assignmentop', 3), (35, ';'): ('_25?', 0),
        (35, '|'): ('_25?', 0), (37, '!'): ('_25?', 0), (37, '('): ('_25?', 0),
        (37, 'IDENTIFIER'): ('_25?', 0), (39, '&'): ('disjunction', 5),
        (39, ')'): ('disjunction', 5), (39, ','): ('disjunction', 5),
        (39, ';'): ('disjunction', 5), (39, 'WHITESPACE'): ('disjunction', 5),
        (39, ']'): ('disjunction', 5), (39, '|'): ('disjunction', 5),
        (40, '&'): ('_25?', 0), (40, ','): ('_25?', 0), (42, '!'): ('_25?', 0),
        (42, '('): ('_25?', 0), (42, 'IDENTIFIER'): ('_25?', 0),
        (44, '&'): ('conjunction', 5), (44, ')'): ('conjunction', 5),
        (44, ','): ('conjunction', 5), (44, ';'): ('conjunction', 5),
        (44, 'WHITESPACE'): ('conjunction', 5), (44, ']'): ('conjunction', 5),
        (44, '|'): ('conjunction', 5), (45, '!'): ('_25?', 0),
        (45, '<'): ('_25?', 0), (45, '='): ('_25?', 0), (45, '>'): ('_25?', 0),
        (45, '~'): ('_25?', 0), (47, '"'): ('_25?', 0), (47, '$'): ('_25?', 0),
        (47, "'"): ('_25?', 0), (47, 'IDENTIFIER'): ('_25?', 0),
        (47, 'LITERAL'): ('_25?', 0), (49, '&'): ('test', 5),
        (49, ')'): ('test', 5), (49, ','): ('test', 5), (49, ';'): ('test', 5),
        (49, 'WHITESPACE'): ('test', 5), (49, ']'): ('test', 5),
        (49, '|'): ('test', 5), (50, ')'): ('_25?', 1), (50, ':'): ('_25?', 1),
        (50, 'EOF'): ('_25?', 1), (51, '!'): ('_25?', 1),
        (51, '"'): ('_25?', 1), (51, '$'): ('_25?', 1), (51, '&'): ('_25?', 1),
        (51, "'"): ('_25?', 1), (51, '('): ('_25?', 1), (51, ')'): ('_25?', 1),
        (51, '+'): ('_25?', 1), (51, ','): ('_25?', 1), (51, '-'): ('_25?', 1),
        (51, ':'): ('_25?', 1), (51, ';'): ('_25?', 1), (51, '<'): ('_25?', 1),
        (51, '='): ('_25?', 1), (51, '>'): ('_25?', 1),
        (51, 'EOF'): ('_25?', 1), (51, 'IDENTIFIER'): ('_25?', 1),
        (51, 'LITERAL'): ('_25?', 1), (51, '['): ('_25?', 1),
        (51, ']'): ('_25?', 1), (51, '|'): ('_25?', 1), (51, '~'): ('_25?', 1),
        (52, '!'): ('_25?', 0), (52, '('): ('_25?', 0),
        (52, 'IDENTIFIER'): ('_25?', 0), (54, ')'): ('_25?', 0),
        (56, '&'): ('test', 5), (56, ')'): ('test', 5), (56, ','): ('test', 5),
        (56, ';'): ('test', 5), (56, 'WHITESPACE'): ('test', 5),
        (56, ']'): ('test', 5), (56, '|'): ('test', 5), (57, '!'): ('_25?', 0),
        (57, '('): ('_25?', 0), (57, 'IDENTIFIER'): ('_25?', 0),
        (59, '&'): ('test', 3), (59, ')'): ('test', 3), (59, ','): ('test', 3),
        (59, ';'): ('test', 3), (59, 'WHITESPACE'): ('test', 3),
        (59, ']'): ('test', 3), (59, '|'): ('test', 3),
        (60, '!'): ('logicunop', 1), (60, '('): ('logicunop', 1),
        (60, 'IDENTIFIER'): ('logicunop', 1),
        (60, 'WHITESPACE'): ('logicunop', 1), (61, '!'): ('disjunctionop', 1),
        (61, '('): ('disjunctionop', 1),
        (61, 'IDENTIFIER'): ('disjunctionop', 1),
        (61, 'WHITESPACE'): ('disjunctionop', 1),
        (62, '!'): ('disjunctionop', 1), (62, '('): ('disjunctionop', 1),
        (62, 'IDENTIFIER'): ('disjunctionop', 1),
        (62, 'WHITESPACE'): ('disjunctionop', 1),
        (63, '!'): ('disjunctionop', 2), (63, '('): ('disjunctionop', 2),
        (63, 'IDENTIFIER'): ('disjunctionop', 2),
        (63, 'WHITESPACE'): ('disjunctionop', 2),
        (64, '!'): ('conjunctionop', 1), (64, '('): ('conjunctionop', 1),
        (64, 'IDENTIFIER'): ('conjunctionop', 1),
        (64, 'WHITESPACE'): ('conjunctionop', 1),
        (65, '!'): ('conjunctionop', 1), (65, '('): ('conjunctionop', 1),
        (65, 'IDENTIFIER'): ('conjunctionop', 1),
        (65, 'WHITESPACE'): ('conjunctionop', 1),
        (66, '!'): ('conjunctionop', 2), (66, '('): ('conjunctionop', 2),
        (66, 'IDENTIFIER'): ('conjunctionop', 2),
        (66, 'WHITESPACE'): ('conjunctionop', 2), (67, '"'): ('testop', 1),
        (67, '$'): ('testop', 1), (67, "'"): ('testop', 1),
        (67, 'IDENTIFIER'): ('testop', 1), (67, 'LITERAL'): ('testop', 1),
        (67, 'WHITESPACE'): ('testop', 1), (68, '"'): ('testop', 2),
        (68, '$'): ('testop', 2), (68, "'"): ('testop', 2),
        (68, 'IDENTIFIER'): ('testop', 2), (68, 'LITERAL'): ('testop', 2),
        (68, 'WHITESPACE'): ('testop', 2), (70, '"'): ('testop', 2),
        (70, '$'): ('testop', 2), (70, "'"): ('testop', 2),
        (70, 'IDENTIFIER'): ('testop', 2), (70, 'LITERAL'): ('testop', 2),
        (70, 'WHITESPACE'): ('testop', 2), (71, '"'): ('testop', 1),
        (71, '$'): ('testop', 1), (71, "'"): ('testop', 1),
        (71, 'IDENTIFIER'): ('testop', 1), (71, 'LITERAL'): ('testop', 1),
        (71, 'WHITESPACE'): ('testop', 1), (72, '"'): ('testop', 1),
        (72, '$'): ('testop', 1), (72, "'"): ('testop', 1),
        (72, 'IDENTIFIER'): ('testop', 1), (72, 'LITERAL'): ('testop', 1),
        (72, 'WHITESPACE'): ('testop', 1), (73, '"'): ('testop', 2),
        (73, '$'): ('testop', 2), (73, "'"): ('testop', 2),
        (73, 'IDENTIFIER'): ('testop', 2), (73, 'LITERAL'): ('testop', 2),
        (73, 'WHITESPACE'): ('testop', 2), (74, '"'): ('testop', 2),
        (74, '$'): ('testop', 2), (74, "'"): ('testop', 2),
        (74, 'IDENTIFIER'): ('testop', 2), (74, 'LITERAL'): ('testop', 2),
        (74, 'WHITESPACE'): ('testop', 2), (76, '"'): ('testop', 2),
        (76, '$'): ('testop', 2), (76, "'"): ('testop', 2),
        (76, 'IDENTIFIER'): ('testop', 2), (76, 'LITERAL'): ('testop', 2),
        (76, 'WHITESPACE'): ('testop', 2), (77, '"'): ('testop', 2),
        (77, '$'): ('testop', 2), (77, "'"): ('testop', 2),
        (77, 'IDENTIFIER'): ('testop', 2), (77, 'LITERAL'): ('testop', 2),
        (77, 'WHITESPACE'): ('testop', 2), (78, ':'): ('_57*', 0),
        (78, 'EOF'): ('_57*', 0), (78, 'WHITESPACE'): ('_57*', 0),
        (79, ':'): ('_25?', 0), (79, 'EOF'): ('_25?', 0),
        (80, ':'): ('valuelist', 3), (80, 'EOF'): ('valuelist', 3),
        (81, '&'): ('value', 1), (81, ')'): ('value', 1),
        (81, ','): ('value', 1), (81, ':'): ('value', 1),
        (81, ';'): ('value', 1), (81, 'EOF'): ('value', 1),
        (81, 'WHITESPACE'): ('value', 1), (81, ']'): ('value', 1),
        (81, '|'): ('value', 1), (81, '}'): ('value', 1),
        (82, '"'): ('_(49)', 1), (82, '$'): ('_(49)', 1),
        (82, '&'): ('_(49)', 1), (82, "'"): ('_(49)', 1),
        (82, ')'): ('_(49)', 1), (82, ','): ('_(49)', 1),
        (82, ':'): ('_(49)', 1), (82, ';'): ('_(49)', 1),
        (82, 'EOF'): ('_(49)', 1), (82, 'IDENTIFIER'): ('_(49)', 1),
        (82, 'LITERAL'): ('_(49)', 1), (82, 'WHITESPACE'): ('_(49)', 1),
        (82, ']'): ('_(49)', 1), (82, '|'): ('_(49)', 1),
        (82, '}'): ('_(49)', 1), (83, '"'): ('_(49)', 1),
        (83, '$'): ('_(49)', 1), (83, '&'): ('_(49)', 1),
        (83, "'"): ('_(49)', 1), (83, ')'): ('_(49)', 1),
        (83, ','): ('_(49)', 1), (83, ':'): ('_(49)', 1),
        (83, ';'): ('_(49)', 1), (83, 'EOF'): ('_(49)', 1),
        (83, 'IDENTIFIER'): ('_(49)', 1), (83, 'LITERAL'): ('_(49)', 1),
        (83, 'WHITESPACE'): ('_(49)', 1), (83, ']'): ('_(49)', 1),
        (83, '|'): ('_(49)', 1), (83, '}'): ('_(49)', 1),
        (84, '"'): ('_(49)', 1), (84, '$'): ('_(49)', 1),
        (84, '&'): ('_(49)', 1), (84, "'"): ('_(49)', 1),
        (84, ')'): ('_(49)', 1), (84, ','): ('_(49)', 1),
        (84, ':'): ('_(49)', 1), (84, ';'): ('_(49)', 1),
        (84, 'EOF'): ('_(49)', 1), (84, 'IDENTIFIER'): ('_(49)', 1),
        (84, 'LITERAL'): ('_(49)', 1), (84, 'WHITESPACE'): ('_(49)', 1),
        (84, ']'): ('_(49)', 1), (84, '|'): ('_(49)', 1),
        (84, '}'): ('_(49)', 1), (85, '"'): ('_(49)', 1),
        (85, '$'): ('_(49)', 1), (85, '&'): ('_(49)', 1),
        (85, "'"): ('_(49)', 1), (85, ')'): ('_(49)', 1),
        (85, ','): ('_(49)', 1), (85, ':'): ('_(49)', 1),
        (85, ';'): ('_(49)', 1), (85, 'EOF'): ('_(49)', 1),
        (85, 'IDENTIFIER'): ('_(49)', 1), (85, 'LITERAL'): ('_(49)', 1),
        (85, 'WHITESPACE'): ('_(49)', 1), (85, ']'): ('_(49)', 1),
        (85, '|'): ('_(49)', 1), (85, '}'): ('_(49)', 1),
        (86, '"'): ('_(49)', 1), (86, '$'): ('_(49)', 1),
        (86, '&'): ('_(49)', 1), (86, "'"): ('_(49)', 1),
        (86, ')'): ('_(49)', 1), (86, ','): ('_(49)', 1),
        (86, ':'): ('_(49)', 1), (86, ';'): ('_(49)', 1),
        (86, 'EOF'): ('_(49)', 1), (86, 'IDENTIFIER'): ('_(49)', 1),
        (86, 'LITERAL'): ('_(49)', 1), (86, 'WHITESPACE'): ('_(49)', 1),
        (86, ']'): ('_(49)', 1), (86, '|'): ('_(49)', 1),
        (86, '}'): ('_(49)', 1), (87, '"'): ('_50+', 1),
        (87, '$'): ('_50+', 1), (87, '&'): ('_50+', 1), (87, "'"): ('_50+', 1),
        (87, ')'): ('_50+', 1), (87, ','): ('_50+', 1), (87, ':'): ('_50+', 1),
        (87, ';'): ('_50+', 1), (87, 'EOF'): ('_50+', 1),
        (87, 'IDENTIFIER'): ('_50+', 1), (87, 'LITERAL'): ('_50+', 1),
        (87, 'WHITESPACE'): ('_50+', 1), (87, ']'): ('_50+', 1),
        (87, '|'): ('_50+', 1), (87, '}'): ('_50+', 1), (88, '"'): ('_50+', 2),
        (88, '$'): ('_50+', 2), (88, '&'): ('_50+', 2), (88, "'"): ('_50+', 2),
        (88, ')'): ('_50+', 2), (88, ','): ('_50+', 2), (88, ':'): ('_50+', 2),
        (88, ';'): ('_50+', 2), (88, 'EOF'): ('_50+', 2),
        (88, 'IDENTIFIER'): ('_50+', 2), (88, 'LITERAL'): ('_50+', 2),
        (88, 'WHITESPACE'): ('_50+', 2), (88, ']'): ('_50+', 2),
        (88, '|'): ('_50+', 2), (88, '}'): ('_50+', 2), (89, '!'): ('_52*', 0),
        (89, '"'): ('_52*', 0), (89, '$'): ('_52*', 0), (89, '&'): ('_52*', 0),
        (89, "'"): ('_52*', 0), (89, '+'): ('_52*', 0), (89, ','): ('_52*', 0),
        (89, '-'): ('_52*', 0), (89, ':'): ('_52*', 0), (89, ';'): ('_52*', 0),
        (89, '<'): ('_52*', 0), (89, '='): ('_52*', 0), (89, '>'): ('_52*', 0),
        (89, 'IDENTIFIER'): ('_52*', 0), (89, 'LITERAL'): ('_52*', 0),
        (89, 'WHITESPACE'): ('_52*', 0), (89, '['): ('_52*', 0),
        (89, ']'): ('_52*', 0), (89, '|'): ('_52*', 0), (89, '~'): ('_52*', 0),
        (91, '"'): ('doublequoted', 3), (91, '$'): ('doublequoted', 3),
        (91, '&'): ('doublequoted', 3), (91, "'"): ('doublequoted', 3),
        (91, ')'): ('doublequoted', 3), (91, ','): ('doublequoted', 3),
        (91, ':'): ('doublequoted', 3), (91, ';'): ('doublequoted', 3),
        (91, 'EOF'): ('doublequoted', 3),
        (91, 'IDENTIFIER'): ('doublequoted', 3),
        (91, 'LITERAL'): ('doublequoted', 3),
        (91, 'WHITESPACE'): ('doublequoted', 3),
        (91, ']'): ('doublequoted', 3), (91, '|'): ('doublequoted', 3),
        (91, '}'): ('doublequoted', 3), (92, '!'): ('_(51)', 1),
        (92, '"'): ('_(51)', 1), (92, '$'): ('_(51)', 1),
        (92, '&'): ('_(51)', 1), (92, "'"): ('_(51)', 1),
        (92, '+'): ('_(51)', 1), (92, ','): ('_(51)', 1),
        (92, '-'): ('_(51)', 1), (92, ':'): ('_(51)', 1),
        (92, ';'): ('_(51)', 1), (92, '<'): ('_(51)', 1),
        (92, '='): ('_(51)', 1), (92, '>'): ('_(51)', 1),
        (92, 'IDENTIFIER'): ('_(51)', 1), (92, 'LITERAL'): ('_(51)', 1),
        (92, 'WHITESPACE'): ('_(51)', 1), (92, '['): ('_(51)', 1),
        (92, ']'): ('_(51)', 1), (92, '|'): ('_(51)', 1),
        (92, '~'): ('_(51)', 1), (93, '!'): ('_(51)', 1),
        (93, '"'): ('_(51)', 1), (93, '$'): ('_(51)', 1),
        (93, '&'): ('_(51)', 1), (93, "'"): ('_(51)', 1),
        (93, '+'): ('_(51)', 1), (93, ','): ('_(51)', 1),
        (93, '-'): ('_(51)', 1), (93, ':'): ('_(51)', 1),
        (93, ';'): ('_(51)', 1), (93, '<'): ('_(51)', 1),
        (93, '='): ('_(51)', 1), (93, '>'): ('_(51)', 1),
        (93, 'IDENTIFIER'): ('_(51)', 1), (93, 'LITERAL'): ('_(51)', 1),
        (93, 'WHITESPACE'): ('_(51)', 1), (93, '['): ('_(51)', 1),
        (93, ']'): ('_(51)', 1), (93, '|'): ('_(51)', 1),
        (93, '~'): ('_(51)', 1), (94, '!'): ('_(51)', 1),
        (94, '"'): ('_(51)', 1), (94, '$'): ('_(51)', 1),
        (94, '&'): ('_(51)', 1), (94, "'"): ('_(51)', 1),
        (94, '+'): ('_(51)', 1), (94, ','): ('_(51)', 1),
        (94, '-'): ('_(51)', 1), (94, ':'): ('_(51)', 1),
        (94, ';'): ('_(51)', 1), (94, '<'): ('_(51)', 1),
        (94, '='): ('_(51)', 1), (94, '>'): ('_(51)', 1),
        (94, 'IDENTIFIER'): ('_(51)', 1), (94, 'LITERAL'): ('_(51)', 1),
        (94, 'WHITESPACE'): ('_(51)', 1), (94, '['): ('_(51)', 1),
        (94, ']'): ('_(51)', 1), (94, '|'): ('_(51)', 1),
        (94, '~'): ('_(51)', 1), (95, '!'): ('_(51)', 1),
        (95, '"'): ('_(51)', 1), (95, '$'): ('_(51)', 1),
        (95, '&'): ('_(51)', 1), (95, "'"): ('_(51)', 1),
        (95, '+'): ('_(51)', 1), (95, ','): ('_(51)', 1),
        (95, '-'): ('_(51)', 1), (95, ':'): ('_(51)', 1),
        (95, ';'): ('_(51)', 1), (95, '<'): ('_(51)', 1),
        (95, '='): ('_(51)', 1), (95, '>'): ('_(51)', 1),
        (95, 'IDENTIFIER'): ('_(51)', 1), (95, 'LITERAL'): ('_(51)', 1),
        (95, 'WHITESPACE'): ('_(51)', 1), (95, '['): ('_(51)', 1),
        (95, ']'): ('_(51)', 1), (95, '|'): ('_(51)', 1),
        (95, '~'): ('_(51)', 1), (96, '!'): ('_(51)', 1),
        (96, '"'): ('_(51)', 1), (96, '$'): ('_(51)', 1),
        (96, '&'): ('_(51)', 1), (96, "'"): ('_(51)', 1),
        (96, '+'): ('_(51)', 1), (96, ','): ('_(51)', 1),
        (96, '-'): ('_(51)', 1), (96, ':'): ('_(51)', 1),
        (96, ';'): ('_(51)', 1), (96, '<'): ('_(51)', 1),
        (96, '='): ('_(51)', 1), (96, '>'): ('_(51)', 1),
        (96, 'IDENTIFIER'): ('_(51)', 1), (96, 'LITERAL'): ('_(51)', 1),
        (96, 'WHITESPACE'): ('_(51)', 1), (96, '['): ('_(51)', 1),
        (96, ']'): ('_(51)', 1), (96, '|'): ('_(51)', 1),
        (96, '~'): ('_(51)', 1), (97, '!'): ('_52*', 2),
        (97, '"'): ('_52*', 2), (97, '$'): ('_52*', 2), (97, '&'): ('_52*', 2),
        (97, "'"): ('_52*', 2), (97, '+'): ('_52*', 2), (97, ','): ('_52*', 2),
        (97, '-'): ('_52*', 2), (97, ':'): ('_52*', 2), (97, ';'): ('_52*', 2),
        (97, '<'): ('_52*', 2), (97, '='): ('_52*', 2), (97, '>'): ('_52*', 2),
        (97, 'IDENTIFIER'): ('_52*', 2), (97, 'LITERAL'): ('_52*', 2),
        (97, 'WHITESPACE'): ('_52*', 2), (97, '['): ('_52*', 2),
        (97, ']'): ('_52*', 2), (97, '|'): ('_52*', 2), (97, '~'): ('_52*', 2),
        (98, '!'): ('_54*', 0), (98, '"'): ('_54*', 0), (98, '$'): ('_54*', 0),
        (98, '&'): ('_54*', 0), (98, "'"): ('_54*', 0), (98, '('): ('_54*', 0),
        (98, ')'): ('_54*', 0), (98, '+'): ('_54*', 0), (98, ','): ('_54*', 0),
        (98, '-'): ('_54*', 0), (98, ':'): ('_54*', 0), (98, ';'): ('_54*', 0),
        (98, '<'): ('_54*', 0), (98, '='): ('_54*', 0), (98, '>'): ('_54*', 0),
        (98, 'IDENTIFIER'): ('_54*', 0), (98, 'LITERAL'): ('_54*', 0),
        (98, 'WHITESPACE'): ('_54*', 0), (98, '['): ('_54*', 0),
        (98, ']'): ('_54*', 0), (98, '{'): ('_54*', 0), (98, '|'): ('_54*', 0),
        (98, '}'): ('_54*', 0), (98, '~'): ('_54*', 0),
        (100, '"'): ('singlequoted', 3), (100, '$'): ('singlequoted', 3),
        (100, '&'): ('singlequoted', 3), (100, "'"): ('singlequoted', 3),
        (100, ')'): ('singlequoted', 3), (100, ','): ('singlequoted', 3),
        (100, ':'): ('singlequoted', 3), (100, ';'): ('singlequoted', 3),
        (100, 'EOF'): ('singlequoted', 3),
        (100, 'IDENTIFIER'): ('singlequoted', 3),
        (100, 'LITERAL'): ('singlequoted', 3),
        (100, 'WHITESPACE'): ('singlequoted', 3),
        (100, ']'): ('singlequoted', 3), (100, '|'): ('singlequoted', 3),
        (100, '}'): ('singlequoted', 3), (101, '!'): ('_(53)', 1),
        (101, '"'): ('_(53)', 1), (101, '$'): ('_(53)', 1),
        (101, '&'): ('_(53)', 1), (101, "'"): ('_(53)', 1),
        (101, '('): ('_(53)', 1), (101, ')'): ('_(53)', 1),
        (101, '+'): ('_(53)', 1), (101, ','): ('_(53)', 1),
        (101, '-'): ('_(53)', 1), (101, ':'): ('_(53)', 1),
        (101, ';'): ('_(53)', 1), (101, '<'): ('_(53)', 1),
        (101, '='): ('_(53)', 1), (101, '>'): ('_(53)', 1),
        (101, 'IDENTIFIER'): ('_(53)', 1), (101, 'LITERAL'): ('_(53)', 1),
        (101, 'WHITESPACE'): ('_(53)', 1), (101, '['): ('_(53)', 1),
        (101, ']'): ('_(53)', 1), (101, '{'): ('_(53)', 1),
        (101, '|'): ('_(53)', 1), (101, '}'): ('_(53)', 1),
        (101, '~'): ('_(53)', 1), (102, '!'): ('_(53)', 1),
        (102, '"'): ('_(53)', 1), (102, '$'): ('_(53)', 1),
        (102, '&'): ('_(53)', 1), (102, "'"): ('_(53)', 1),
        (102, '('): ('_(53)', 1), (102, ')'): ('_(53)', 1),
        (102, '+'): ('_(53)', 1), (102, ','): ('_(53)', 1),
        (102, '-'): ('_(53)', 1), (102, ':'): ('_(53)', 1),
        (102, ';'): ('_(53)', 1), (102, '<'): ('_(53)', 1),
        (102, '='): ('_(53)', 1), (102, '>'): ('_(53)', 1),
        (102, 'IDENTIFIER'): ('_(53)', 1), (102, 'LITERAL'): ('_(53)', 1),
        (102, 'WHITESPACE'): ('_(53)', 1), (102, '['): ('_(53)', 1),
        (102, ']'): ('_(53)', 1), (102, '{'): ('_(53)', 1),
        (102, '|'): ('_(53)', 1), (102, '}'): ('_(53)', 1),
        (102, '~'): ('_(53)', 1), (103, '!'): ('_(53)', 1),
        (103, '"'): ('_(53)', 1), (103, '$'): ('_(53)', 1),
        (103, '&'): ('_(53)', 1), (103, "'"): ('_(53)', 1),
        (103, '('): ('_(53)', 1), (103, ')'): ('_(53)', 1),
        (103, '+'): ('_(53)', 1), (103, ','): ('_(53)', 1),
        (103, '-'): ('_(53)', 1), (103, ':'): ('_(53)', 1),
        (103, ';'): ('_(53)', 1), (103, '<'): ('_(53)', 1),
        (103, '='): ('_(53)', 1), (103, '>'): ('_(53)', 1),
        (103, 'IDENTIFIER'): ('_(53)', 1), (103, 'LITERAL'): ('_(53)', 1),
        (103, 'WHITESPACE'): ('_(53)', 1), (103, '['): ('_(53)', 1),
        (103, ']'): ('_(53)', 1), (103, '{'): ('_(53)', 1),
        (103, '|'): ('_(53)', 1), (103, '}'): ('_(53)', 1),
        (103, '~'): ('_(53)', 1), (104, '!'): ('_54*', 2),
        (104, '"'): ('_54*', 2), (104, '$'): ('_54*', 2),
        (104, '&'): ('_54*', 2), (104, "'"): ('_54*', 2),
        (104, '('): ('_54*', 2), (104, ')'): ('_54*', 2),
        (104, '+'): ('_54*', 2), (104, ','): ('_54*', 2),
        (104, '-'): ('_54*', 2), (104, ':'): ('_54*', 2),
        (104, ';'): ('_54*', 2), (104, '<'): ('_54*', 2),
        (104, '='): ('_54*', 2), (104, '>'): ('_54*', 2),
        (104, 'IDENTIFIER'): ('_54*', 2), (104, 'LITERAL'): ('_54*', 2),
        (104, 'WHITESPACE'): ('_54*', 2), (104, '['): ('_54*', 2),
        (104, ']'): ('_54*', 2), (104, '{'): ('_54*', 2),
        (104, '|'): ('_54*', 2), (104, '}'): ('_54*', 2),
        (104, '~'): ('_54*', 2), (105, '!'): ('literal', 1),
        (105, '"'): ('literal', 1), (105, '$'): ('literal', 1),
        (105, '&'): ('literal', 1), (105, "'"): ('literal', 1),
        (105, '('): ('literal', 1), (105, ')'): ('literal', 1),
        (105, '+'): ('literal', 1), (105, ','): ('literal', 1),
        (105, '-'): ('literal', 1), (105, ':'): ('literal', 1),
        (105, ';'): ('literal', 1), (105, '<'): ('literal', 1),
        (105, '='): ('literal', 1), (105, '>'): ('literal', 1),
        (105, 'EOF'): ('literal', 1), (105, 'IDENTIFIER'): ('literal', 1),
        (105, 'LITERAL'): ('literal', 1), (105, 'WHITESPACE'): ('literal', 1),
        (105, '['): ('literal', 1), (105, ']'): ('literal', 1),
        (105, '{'): ('literal', 1), (105, '|'): ('literal', 1),
        (105, '}'): ('literal', 1), (105, '~'): ('literal', 1),
        (106, '!'): ('literal', 1), (106, '"'): ('literal', 1),
        (106, '$'): ('literal', 1), (106, '&'): ('literal', 1),
        (106, "'"): ('literal', 1), (106, '('): ('literal', 1),
        (106, ')'): ('literal', 1), (106, '+'): ('literal', 1),
        (106, ','): ('literal', 1), (106, '-'): ('literal', 1),
        (106, ':'): ('literal', 1), (106, ';'): ('literal', 1),
        (106, '<'): ('literal', 1), (106, '='): ('literal', 1),
        (106, '>'): ('literal', 1), (106, 'EOF'): ('literal', 1),
        (106, 'IDENTIFIER'): ('literal', 1), (106, 'LITERAL'): ('literal', 1),
        (106, 'WHITESPACE'): ('literal', 1), (106, '['): ('literal', 1),
        (106, ']'): ('literal', 1), (106, '{'): ('literal', 1),
        (106, '|'): ('literal', 1), (106, '}'): ('literal', 1),
        (106, '~'): ('literal', 1), (108, '"'): ('_25?', 0),
        (108, '$'): ('_25?', 0), (108, "'"): ('_25?', 0),
        (108, 'IDENTIFIER'): ('_25?', 0), (108, 'LITERAL'): ('_25?', 0),
        (110, ')'): ('_57*', 0), (110, 'WHITESPACE'): ('_57*', 0),
        (111, ')'): ('_25?', 0), (113, '!'): ('funcall', 7),
        (113, '"'): ('funcall', 7), (113, '$'): ('funcall', 7),
        (113, '&'): ('funcall', 7), (113, "'"): ('funcall', 7),
        (113, ')'): ('funcall', 7), (113, '+'): ('funcall', 7),
        (113, ','): ('funcall', 7), (113, '-'): ('funcall', 7),
        (113, ':'): ('funcall', 7), (113, ';'): ('funcall', 7),
        (113, '<'): ('funcall', 7), (113, '='): ('funcall', 7),
        (113, '>'): ('funcall', 7), (113, 'EOF'): ('funcall', 7),
        (113, 'IDENTIFIER'): ('funcall', 7), (113, 'LITERAL'): ('funcall', 7),
        (113, 'WHITESPACE'): ('funcall', 7), (113, '['): ('funcall', 7),
        (113, ']'): ('funcall', 7), (113, '|'): ('funcall', 7),
        (113, '}'): ('funcall', 7), (113, '~'): ('funcall', 7),
        (114, ')'): ('_57*', 3), (114, ':'): ('_57*', 3),
        (114, 'EOF'): ('_57*', 3), (114, 'WHITESPACE'): ('_57*', 3),
        (115, '!'): ('varcall', 2), (115, '"'): ('varcall', 2),
        (115, '$'): ('varcall', 2), (115, '&'): ('varcall', 2),
        (115, "'"): ('varcall', 2), (115, ')'): ('varcall', 2),
        (115, '+'): ('varcall', 2), (115, ','): ('varcall', 2),
        (115, '-'): ('varcall', 2), (115, ':'): ('varcall', 2),
        (115, ';'): ('varcall', 2), (115, '<'): ('varcall', 2),
        (115, '='): ('varcall', 2), (115, '>'): ('varcall', 2),
        (115, 'EOF'): ('varcall', 2), (115, 'IDENTIFIER'): ('varcall', 2),
        (115, 'LITERAL'): ('varcall', 2), (115, 'WHITESPACE'): ('varcall', 2),
        (115, '['): ('varcall', 2), (115, ']'): ('varcall', 2),
        (115, '|'): ('varcall', 2), (115, '}'): ('varcall', 2),
        (115, '~'): ('varcall', 2), (118, '!'): ('varcall', 4),
        (118, '"'): ('varcall', 4), (118, '$'): ('varcall', 4),
        (118, '&'): ('varcall', 4), (118, "'"): ('varcall', 4),
        (118, ')'): ('varcall', 4), (118, '+'): ('varcall', 4),
        (118, ','): ('varcall', 4), (118, '-'): ('varcall', 4),
        (118, ':'): ('varcall', 4), (118, ';'): ('varcall', 4),
        (118, '<'): ('varcall', 4), (118, '='): ('varcall', 4),
        (118, '>'): ('varcall', 4), (118, 'EOF'): ('varcall', 4),
        (118, 'IDENTIFIER'): ('varcall', 4), (118, 'LITERAL'): ('varcall', 4),
        (118, 'WHITESPACE'): ('varcall', 4), (118, '['): ('varcall', 4),
        (118, ']'): ('varcall', 4), (118, '|'): ('varcall', 4),
        (118, '}'): ('varcall', 4), (118, '~'): ('varcall', 4),
        (119, '!'): ('doublequoted_escaped', 1),
        (119, '"'): ('doublequoted_escaped', 1),
        (119, '$'): ('doublequoted_escaped', 1),
        (119, '&'): ('doublequoted_escaped', 1),
        (119, "'"): ('doublequoted_escaped', 1),
        (119, '+'): ('doublequoted_escaped', 1),
        (119, ','): ('doublequoted_escaped', 1),
        (119, '-'): ('doublequoted_escaped', 1),
        (119, ':'): ('doublequoted_escaped', 1),
        (119, ';'): ('doublequoted_escaped', 1),
        (119, '<'): ('doublequoted_escaped', 1),
        (119, '='): ('doublequoted_escaped', 1),
        (119, '>'): ('doublequoted_escaped', 1),
        (119, 'IDENTIFIER'): ('doublequoted_escaped', 1),
        (119, 'LITERAL'): ('doublequoted_escaped', 1),
        (119, 'WHITESPACE'): ('doublequoted_escaped', 1),
        (119, '['): ('doublequoted_escaped', 1),
        (119, ']'): ('doublequoted_escaped', 1),
        (119, '|'): ('doublequoted_escaped', 1),
        (119, '~'): ('doublequoted_escaped', 1),
        (120, '!'): ('doublequoted_escaped', 1),
        (120, '"'): ('doublequoted_escaped', 1),
        (120, '$'): ('doublequoted_escaped', 1),
        (120, '&'): ('doublequoted_escaped', 1),
        (120, "'"): ('doublequoted_escaped', 1),
        (120, '+'): ('doublequoted_escaped', 1),
        (120, ','): ('doublequoted_escaped', 1),
        (120, '-'): ('doublequoted_escaped', 1),
        (120, ':'): ('doublequoted_escaped', 1),
        (120, ';'): ('doublequoted_escaped', 1),
        (120, '<'): ('doublequoted_escaped', 1),
        (120, '='): ('doublequoted_escaped', 1),
        (120, '>'): ('doublequoted_escaped', 1),
        (120, 'IDENTIFIER'): ('doublequoted_escaped', 1),
        (120, 'LITERAL'): ('doublequoted_escaped', 1),
        (120, 'WHITESPACE'): ('doublequoted_escaped', 1),
        (120, '['): ('doublequoted_escaped', 1),
        (120, ']'): ('doublequoted_escaped', 1),
        (120, '|'): ('doublequoted_escaped', 1),
        (120, '~'): ('doublequoted_escaped', 1),
        (121, '!'): ('doublequoted_escaped', 1),
        (121, '"'): ('doublequoted_escaped', 1),
        (121, '$'): ('doublequoted_escaped', 1),
        (121, '&'): ('doublequoted_escaped', 1),
        (121, "'"): ('doublequoted_escaped', 1),
        (121, '+'): ('doublequoted_escaped', 1),
        (121, ','): ('doublequoted_escaped', 1),
        (121, '-'): ('doublequoted_escaped', 1),
        (121, ':'): ('doublequoted_escaped', 1),
        (121, ';'): ('doublequoted_escaped', 1),
        (121, '<'): ('doublequoted_escaped', 1),
        (121, '='): ('doublequoted_escaped', 1),
        (121, '>'): ('doublequoted_escaped', 1),
        (121, 'IDENTIFIER'): ('doublequoted_escaped', 1),
        (121, 'LITERAL'): ('doublequoted_escaped', 1),
        (121, 'WHITESPACE'): ('doublequoted_escaped', 1),
        (121, '['): ('doublequoted_escaped', 1),
        (121, ']'): ('doublequoted_escaped', 1),
        (121, '|'): ('doublequoted_escaped', 1),
        (121, '~'): ('doublequoted_escaped', 1),
        (122, '!'): ('doublequoted_escaped', 1),
        (122, '"'): ('doublequoted_escaped', 1),
        (122, '$'): ('doublequoted_escaped', 1),
        (122, '&'): ('doublequoted_escaped', 1),
        (122, "'"): ('doublequoted_escaped', 1),
        (122, '+'): ('doublequoted_escaped', 1),
        (122, ','): ('doublequoted_escaped', 1),
        (122, '-'): ('doublequoted_escaped', 1),
        (122, ':'): ('doublequoted_escaped', 1),
        (122, ';'): ('doublequoted_escaped', 1),
        (122, '<'): ('doublequoted_escaped', 1),
        (122, '='): ('doublequoted_escaped', 1),
        (122, '>'): ('doublequoted_escaped', 1),
        (122, 'IDENTIFIER'): ('doublequoted_escaped', 1),
        (122, 'LITERAL'): ('doublequoted_escaped', 1),
        (122, 'WHITESPACE'): ('doublequoted_escaped', 1),
        (122, '['): ('doublequoted_escaped', 1),
        (122, ']'): ('doublequoted_escaped', 1),
        (122, '|'): ('doublequoted_escaped', 1),
        (122, '~'): ('doublequoted_escaped', 1),
        (123, '!'): ('doublequoted_escaped', 1),
        (123, '"'): ('doublequoted_escaped', 1),
        (123, '$'): ('doublequoted_escaped', 1),
        (123, '&'): ('doublequoted_escaped', 1),
        (123, "'"): ('doublequoted_escaped', 1),
        (123, '+'): ('doublequoted_escaped', 1),
        (123, ','): ('doublequoted_escaped', 1),
        (123, '-'): ('doublequoted_escaped', 1),
        (123, ':'): ('doublequoted_escaped', 1),
        (123, ';'): ('doublequoted_escaped', 1),
        (123, '<'): ('doublequoted_escaped', 1),
        (123, '='): ('doublequoted_escaped', 1),
        (123, '>'): ('doublequoted_escaped', 1),
        (123, 'IDENTIFIER'): ('doublequoted_escaped', 1),
        (123, 'LITERAL'): ('doublequoted_escaped', 1),
        (123, 'WHITESPACE'): ('doublequoted_escaped', 1),
        (123, '['): ('doublequoted_escaped', 1),
        (123, ']'): ('doublequoted_escaped', 1),
        (123, '|'): ('doublequoted_escaped', 1),
        (123, '~'): ('doublequoted_escaped', 1),
        (124, '!'): ('doublequoted_escaped', 1),
        (124, '"'): ('doublequoted_escaped', 1),
        (124, '$'): ('doublequoted_escaped', 1),
        (124, '&'): ('doublequoted_escaped', 1),
        (124, "'"): ('doublequoted_escaped', 1),
        (124, '+'): ('doublequoted_escaped', 1),
        (124, ','): ('doublequoted_escaped', 1),
        (124, '-'): ('doublequoted_escaped', 1),
        (124, ':'): ('doublequoted_escaped', 1),
        (124, ';'): ('doublequoted_escaped', 1),
        (124, '<'): ('doublequoted_escaped', 1),
        (124, '='): ('doublequoted_escaped', 1),
        (124, '>'): ('doublequoted_escaped', 1),
        (124, 'IDENTIFIER'): ('doublequoted_escaped', 1),
        (124, 'LITERAL'): ('doublequoted_escaped', 1),
        (124, 'WHITESPACE'): ('doublequoted_escaped', 1),
        (124, '['): ('doublequoted_escaped', 1),
        (124, ']'): ('doublequoted_escaped', 1),
        (124, '|'): ('doublequoted_escaped', 1),
        (124, '~'): ('doublequoted_escaped', 1),
        (125, '!'): ('doublequoted_escaped', 1),
        (125, '"'): ('doublequoted_escaped', 1),
        (125, '$'): ('doublequoted_escaped', 1),
        (125, '&'): ('doublequoted_escaped', 1),
        (125, "'"): ('doublequoted_escaped', 1),
        (125, '+'): ('doublequoted_escaped', 1),
        (125, ','): ('doublequoted_escaped', 1),
        (125, '-'): ('doublequoted_escaped', 1),
        (125, ':'): ('doublequoted_escaped', 1),
        (125, ';'): ('doublequoted_escaped', 1),
        (125, '<'): ('doublequoted_escaped', 1),
        (125, '='): ('doublequoted_escaped', 1),
        (125, '>'): ('doublequoted_escaped', 1),
        (125, 'IDENTIFIER'): ('doublequoted_escaped', 1),
        (125, 'LITERAL'): ('doublequoted_escaped', 1),
        (125, 'WHITESPACE'): ('doublequoted_escaped', 1),
        (125, '['): ('doublequoted_escaped', 1),
        (125, ']'): ('doublequoted_escaped', 1),
        (125, '|'): ('doublequoted_escaped', 1),
        (125, '~'): ('doublequoted_escaped', 1),
        (126, '!'): ('doublequoted_escaped', 1),
        (126, '"'): ('doublequoted_escaped', 1),
        (126, '$'): ('doublequoted_escaped', 1),
        (126, '&'): ('doublequoted_escaped', 1),
        (126, "'"): ('doublequoted_escaped', 1),
        (126, '+'): ('doublequoted_escaped', 1),
        (126, ','): ('doublequoted_escaped', 1),
        (126, '-'): ('doublequoted_escaped', 1),
        (126, ':'): ('doublequoted_escaped', 1),
        (126, ';'): ('doublequoted_escaped', 1),
        (126, '<'): ('doublequoted_escaped', 1),
        (126, '='): ('doublequoted_escaped', 1),
        (126, '>'): ('doublequoted_escaped', 1),
        (126, 'IDENTIFIER'): ('doublequoted_escaped', 1),
        (126, 'LITERAL'): ('doublequoted_escaped', 1),
        (126, 'WHITESPACE'): ('doublequoted_escaped', 1),
        (126, '['): ('doublequoted_escaped', 1),
        (126, ']'): ('doublequoted_escaped', 1),
        (126, '|'): ('doublequoted_escaped', 1),
        (126, '~'): ('doublequoted_escaped', 1),
        (127, '!'): ('doublequoted_escaped', 1),
        (127, '"'): ('doublequoted_escaped', 1),
        (127, '$'): ('doublequoted_escaped', 1),
        (127, '&'): ('doublequoted_escaped', 1),
        (127, "'"): ('doublequoted_escaped', 1),
        (127, '+'): ('doublequoted_escaped', 1),
        (127, ','): ('doublequoted_escaped', 1),
        (127, '-'): ('doublequoted_escaped', 1),
        (127, ':'): ('doublequoted_escaped', 1),
        (127, ';'): ('doublequoted_escaped', 1),
        (127, '<'): ('doublequoted_escaped', 1),
        (127, '='): ('doublequoted_escaped', 1),
        (127, '>'): ('doublequoted_escaped', 1),
        (127, 'IDENTIFIER'): ('doublequoted_escaped', 1),
        (127, 'LITERAL'): ('doublequoted_escaped', 1),
        (127, 'WHITESPACE'): ('doublequoted_escaped', 1),
        (127, '['): ('doublequoted_escaped', 1),
        (127, ']'): ('doublequoted_escaped', 1),
        (127, '|'): ('doublequoted_escaped', 1),
        (127, '~'): ('doublequoted_escaped', 1),
        (128, '!'): ('doublequoted_escaped', 1),
        (128, '"'): ('doublequoted_escaped', 1),
        (128, '$'): ('doublequoted_escaped', 1),
        (128, '&'): ('doublequoted_escaped', 1),
        (128, "'"): ('doublequoted_escaped', 1),
        (128, '+'): ('doublequoted_escaped', 1),
        (128, ','): ('doublequoted_escaped', 1),
        (128, '-'): ('doublequoted_escaped', 1),
        (128, ':'): ('doublequoted_escaped', 1),
        (128, ';'): ('doublequoted_escaped', 1),
        (128, '<'): ('doublequoted_escaped', 1),
        (128, '='): ('doublequoted_escaped', 1),
        (128, '>'): ('doublequoted_escaped', 1),
        (128, 'IDENTIFIER'): ('doublequoted_escaped', 1),
        (128, 'LITERAL'): ('doublequoted_escaped', 1),
        (128, 'WHITESPACE'): ('doublequoted_escaped', 1),
        (128, '['): ('doublequoted_escaped', 1),
        (128, ']'): ('doublequoted_escaped', 1),
        (128, '|'): ('doublequoted_escaped', 1),
        (128, '~'): ('doublequoted_escaped', 1),
        (129, '!'): ('doublequoted_escaped', 1),
        (129, '"'): ('doublequoted_escaped', 1),
        (129, '$'): ('doublequoted_escaped', 1),
        (129, '&'): ('doublequoted_escaped', 1),
        (129, "'"): ('doublequoted_escaped', 1),
        (129, '+'): ('doublequoted_escaped', 1),
        (129, ','): ('doublequoted_escaped', 1),
        (129, '-'): ('doublequoted_escaped', 1),
        (129, ':'): ('doublequoted_escaped', 1),
        (129, ';'): ('doublequoted_escaped', 1),
        (129, '<'): ('doublequoted_escaped', 1),
        (129, '='): ('doublequoted_escaped', 1),
        (129, '>'): ('doublequoted_escaped', 1),
        (129, 'IDENTIFIER'): ('doublequoted_escaped', 1),
        (129, 'LITERAL'): ('doublequoted_escaped', 1),
        (129, 'WHITESPACE'): ('doublequoted_escaped', 1),
        (129, '['): ('doublequoted_escaped', 1),
        (129, ']'): ('doublequoted_escaped', 1),
        (129, '|'): ('doublequoted_escaped', 1),
        (129, '~'): ('doublequoted_escaped', 1),
        (130, '!'): ('doublequoted_escaped', 1),
        (130, '"'): ('doublequoted_escaped', 1),
        (130, '$'): ('doublequoted_escaped', 1),
        (130, '&'): ('doublequoted_escaped', 1),
        (130, "'"): ('doublequoted_escaped', 1),
        (130, '+'): ('doublequoted_escaped', 1),
        (130, ','): ('doublequoted_escaped', 1),
        (130, '-'): ('doublequoted_escaped', 1),
        (130, ':'): ('doublequoted_escaped', 1),
        (130, ';'): ('doublequoted_escaped', 1),
        (130, '<'): ('doublequoted_escaped', 1),
        (130, '='): ('doublequoted_escaped', 1),
        (130, '>'): ('doublequoted_escaped', 1),
        (130, 'IDENTIFIER'): ('doublequoted_escaped', 1),
        (130, 'LITERAL'): ('doublequoted_escaped', 1),
        (130, 'WHITESPACE'): ('doublequoted_escaped', 1),
        (130, '['): ('doublequoted_escaped', 1),
        (130, ']'): ('doublequoted_escaped', 1),
        (130, '|'): ('doublequoted_escaped', 1),
        (130, '~'): ('doublequoted_escaped', 1),
        (131, '!'): ('doublequoted_escaped', 1),
        (131, '"'): ('doublequoted_escaped', 1),
        (131, '$'): ('doublequoted_escaped', 1),
        (131, '&'): ('doublequoted_escaped', 1),
        (131, "'"): ('doublequoted_escaped', 1),
        (131, '+'): ('doublequoted_escaped', 1),
        (131, ','): ('doublequoted_escaped', 1),
        (131, '-'): ('doublequoted_escaped', 1),
        (131, ':'): ('doublequoted_escaped', 1),
        (131, ';'): ('doublequoted_escaped', 1),
        (131, '<'): ('doublequoted_escaped', 1),
        (131, '='): ('doublequoted_escaped', 1),
        (131, '>'): ('doublequoted_escaped', 1),
        (131, 'IDENTIFIER'): ('doublequoted_escaped', 1),
        (131, 'LITERAL'): ('doublequoted_escaped', 1),
        (131, 'WHITESPACE'): ('doublequoted_escaped', 1),
        (131, '['): ('doublequoted_escaped', 1),
        (131, ']'): ('doublequoted_escaped', 1),
        (131, '|'): ('doublequoted_escaped', 1),
        (131, '~'): ('doublequoted_escaped', 1),
        (132, '!'): ('doublequoted_escaped', 1),
        (132, '"'): ('doublequoted_escaped', 1),
        (132, '$'): ('doublequoted_escaped', 1),
        (132, '&'): ('doublequoted_escaped', 1),
        (132, "'"): ('doublequoted_escaped', 1),
        (132, '+'): ('doublequoted_escaped', 1),
        (132, ','): ('doublequoted_escaped', 1),
        (132, '-'): ('doublequoted_escaped', 1),
        (132, ':'): ('doublequoted_escaped', 1),
        (132, ';'): ('doublequoted_escaped', 1),
        (132, '<'): ('doublequoted_escaped', 1),
        (132, '='): ('doublequoted_escaped', 1),
        (132, '>'): ('doublequoted_escaped', 1),
        (132, 'IDENTIFIER'): ('doublequoted_escaped', 1),
        (132, 'LITERAL'): ('doublequoted_escaped', 1),
        (132, 'WHITESPACE'): ('doublequoted_escaped', 1),
        (132, '['): ('doublequoted_escaped', 1),
        (132, ']'): ('doublequoted_escaped', 1),
        (132, '|'): ('doublequoted_escaped', 1),
        (132, '~'): ('doublequoted_escaped', 1),
        (133, '!'): ('doublequoted_escaped', 1),
        (133, '"'): ('doublequoted_escaped', 1),
        (133, '$'): ('doublequoted_escaped', 1),
        (133, '&'): ('doublequoted_escaped', 1),
        (133, "'"): ('doublequoted_escaped', 1),
        (133, '+'): ('doublequoted_escaped', 1),
        (133, ','): ('doublequoted_escaped', 1),
        (133, '-'): ('doublequoted_escaped', 1),
        (133, ':'): ('doublequoted_escaped', 1),
        (133, ';'): ('doublequoted_escaped', 1),
        (133, '<'): ('doublequoted_escaped', 1),
        (133, '='): ('doublequoted_escaped', 1),
        (133, '>'): ('doublequoted_escaped', 1),
        (133, 'IDENTIFIER'): ('doublequoted_escaped', 1),
        (133, 'LITERAL'): ('doublequoted_escaped', 1),
        (133, 'WHITESPACE'): ('doublequoted_escaped', 1),
        (133, '['): ('doublequoted_escaped', 1),
        (133, ']'): ('doublequoted_escaped', 1),
        (133, '|'): ('doublequoted_escaped', 1),
        (133, '~'): ('doublequoted_escaped', 1),
        (134, '!'): ('singlequoted_escaped', 1),
        (134, '"'): ('singlequoted_escaped', 1),
        (134, '$'): ('singlequoted_escaped', 1),
        (134, '&'): ('singlequoted_escaped', 1),
        (134, "'"): ('singlequoted_escaped', 1),
        (134, '('): ('singlequoted_escaped', 1),
        (134, ')'): ('singlequoted_escaped', 1),
        (134, '+'): ('singlequoted_escaped', 1),
        (134, ','): ('singlequoted_escaped', 1),
        (134, '-'): ('singlequoted_escaped', 1),
        (134, ':'): ('singlequoted_escaped', 1),
        (134, ';'): ('singlequoted_escaped', 1),
        (134, '<'): ('singlequoted_escaped', 1),
        (134, '='): ('singlequoted_escaped', 1),
        (134, '>'): ('singlequoted_escaped', 1),
        (134, 'IDENTIFIER'): ('singlequoted_escaped', 1),
        (134, 'LITERAL'): ('singlequoted_escaped', 1),
        (134, 'WHITESPACE'): ('singlequoted_escaped', 1),
        (134, '['): ('singlequoted_escaped', 1),
        (134, ']'): ('singlequoted_escaped', 1),
        (134, '{'): ('singlequoted_escaped', 1),
        (134, '|'): ('singlequoted_escaped', 1),
        (134, '}'): ('singlequoted_escaped', 1),
        (134, '~'): ('singlequoted_escaped', 1),
        (135, '!'): ('singlequoted_escaped', 1),
        (135, '"'): ('singlequoted_escaped', 1),
        (135, '$'): ('singlequoted_escaped', 1),
        (135, '&'): ('singlequoted_escaped', 1),
        (135, "'"): ('singlequoted_escaped', 1),
        (135, '('): ('singlequoted_escaped', 1),
        (135, ')'): ('singlequoted_escaped', 1),
        (135, '+'): ('singlequoted_escaped', 1),
        (135, ','): ('singlequoted_escaped', 1),
        (135, '-'): ('singlequoted_escaped', 1),
        (135, ':'): ('singlequoted_escaped', 1),
        (135, ';'): ('singlequoted_escaped', 1),
        (135, '<'): ('singlequoted_escaped', 1),
        (135, '='): ('singlequoted_escaped', 1),
        (135, '>'): ('singlequoted_escaped', 1),
        (135, 'IDENTIFIER'): ('singlequoted_escaped', 1),
        (135, 'LITERAL'): ('singlequoted_escaped', 1),
        (135, 'WHITESPACE'): ('singlequoted_escaped', 1),
        (135, '['): ('singlequoted_escaped', 1),
        (135, ']'): ('singlequoted_escaped', 1),
        (135, '{'): ('singlequoted_escaped', 1),
        (135, '|'): ('singlequoted_escaped', 1),
        (135, '}'): ('singlequoted_escaped', 1),
        (135, '~'): ('singlequoted_escaped', 1),
        (136, '!'): ('singlequoted_escaped', 1),
        (136, '"'): ('singlequoted_escaped', 1),
        (136, '$'): ('singlequoted_escaped', 1),
        (136, '&'): ('singlequoted_escaped', 1),
        (136, "'"): ('singlequoted_escaped', 1),
        (136, '('): ('singlequoted_escaped', 1),
        (136, ')'): ('singlequoted_escaped', 1),
        (136, '+'): ('singlequoted_escaped', 1),
        (136, ','): ('singlequoted_escaped', 1),
        (136, '-'): ('singlequoted_escaped', 1),
        (136, ':'): ('singlequoted_escaped', 1),
        (136, ';'): ('singlequoted_escaped', 1),
        (136, '<'): ('singlequoted_escaped', 1),
        (136, '='): ('singlequoted_escaped', 1),
        (136, '>'): ('singlequoted_escaped', 1),
        (136, 'IDENTIFIER'): ('singlequoted_escaped', 1),
        (136, 'LITERAL'): ('singlequoted_escaped', 1),
        (136, 'WHITESPACE'): ('singlequoted_escaped', 1),
        (136, '['): ('singlequoted_escaped', 1),
        (136, ']'): ('singlequoted_escaped', 1),
        (136, '{'): ('singlequoted_escaped', 1),
        (136, '|'): ('singlequoted_escaped', 1),
        (136, '}'): ('singlequoted_escaped', 1),
        (136, '~'): ('singlequoted_escaped', 1),
        (137, '!'): ('singlequoted_escaped', 1),
        (137, '"'): ('singlequoted_escaped', 1),
        (137, '$'): ('singlequoted_escaped', 1),
        (137, '&'): ('singlequoted_escaped', 1),
        (137, "'"): ('singlequoted_escaped', 1),
        (137, '('): ('singlequoted_escaped', 1),
        (137, ')'): ('singlequoted_escaped', 1),
        (137, '+'): ('singlequoted_escaped', 1),
        (137, ','): ('singlequoted_escaped', 1),
        (137, '-'): ('singlequoted_escaped', 1),
        (137, ':'): ('singlequoted_escaped', 1),
        (137, ';'): ('singlequoted_escaped', 1),
        (137, '<'): ('singlequoted_escaped', 1),
        (137, '='): ('singlequoted_escaped', 1),
        (137, '>'): ('singlequoted_escaped', 1),
        (137, 'IDENTIFIER'): ('singlequoted_escaped', 1),
        (137, 'LITERAL'): ('singlequoted_escaped', 1),
        (137, 'WHITESPACE'): ('singlequoted_escaped', 1),
        (137, '['): ('singlequoted_escaped', 1),
        (137, ']'): ('singlequoted_escaped', 1),
        (137, '{'): ('singlequoted_escaped', 1),
        (137, '|'): ('singlequoted_escaped', 1),
        (137, '}'): ('singlequoted_escaped', 1),
        (137, '~'): ('singlequoted_escaped', 1),
        (138, '!'): ('singlequoted_escaped', 1),
        (138, '"'): ('singlequoted_escaped', 1),
        (138, '$'): ('singlequoted_escaped', 1),
        (138, '&'): ('singlequoted_escaped', 1),
        (138, "'"): ('singlequoted_escaped', 1),
        (138, '('): ('singlequoted_escaped', 1),
        (138, ')'): ('singlequoted_escaped', 1),
        (138, '+'): ('singlequoted_escaped', 1),
        (138, ','): ('singlequoted_escaped', 1),
        (138, '-'): ('singlequoted_escaped', 1),
        (138, ':'): ('singlequoted_escaped', 1),
        (138, ';'): ('singlequoted_escaped', 1),
        (138, '<'): ('singlequoted_escaped', 1),
        (138, '='): ('singlequoted_escaped', 1),
        (138, '>'): ('singlequoted_escaped', 1),
        (138, 'IDENTIFIER'): ('singlequoted_escaped', 1),
        (138, 'LITERAL'): ('singlequoted_escaped', 1),
        (138, 'WHITESPACE'): ('singlequoted_escaped', 1),
        (138, '['): ('singlequoted_escaped', 1),
        (138, ']'): ('singlequoted_escaped', 1),
        (138, '{'): ('singlequoted_escaped', 1),
        (138, '|'): ('singlequoted_escaped', 1),
        (138, '}'): ('singlequoted_escaped', 1),
        (138, '~'): ('singlequoted_escaped', 1),
        (139, '!'): ('singlequoted_escaped', 1),
        (139, '"'): ('singlequoted_escaped', 1),
        (139, '$'): ('singlequoted_escaped', 1),
        (139, '&'): ('singlequoted_escaped', 1),
        (139, "'"): ('singlequoted_escaped', 1),
        (139, '('): ('singlequoted_escaped', 1),
        (139, ')'): ('singlequoted_escaped', 1),
        (139, '+'): ('singlequoted_escaped', 1),
        (139, ','): ('singlequoted_escaped', 1),
        (139, '-'): ('singlequoted_escaped', 1),
        (139, ':'): ('singlequoted_escaped', 1),
        (139, ';'): ('singlequoted_escaped', 1),
        (139, '<'): ('singlequoted_escaped', 1),
        (139, '='): ('singlequoted_escaped', 1),
        (139, '>'): ('singlequoted_escaped', 1),
        (139, 'IDENTIFIER'): ('singlequoted_escaped', 1),
        (139, 'LITERAL'): ('singlequoted_escaped', 1),
        (139, 'WHITESPACE'): ('singlequoted_escaped', 1),
        (139, '['): ('singlequoted_escaped', 1),
        (139, ']'): ('singlequoted_escaped', 1),
        (139, '{'): ('singlequoted_escaped', 1),
        (139, '|'): ('singlequoted_escaped', 1),
        (139, '}'): ('singlequoted_escaped', 1),
        (139, '~'): ('singlequoted_escaped', 1),
        (140, '!'): ('singlequoted_escaped', 1),
        (140, '"'): ('singlequoted_escaped', 1),
        (140, '$'): ('singlequoted_escaped', 1),
        (140, '&'): ('singlequoted_escaped', 1),
        (140, "'"): ('singlequoted_escaped', 1),
        (140, '('): ('singlequoted_escaped', 1),
        (140, ')'): ('singlequoted_escaped', 1),
        (140, '+'): ('singlequoted_escaped', 1),
        (140, ','): ('singlequoted_escaped', 1),
        (140, '-'): ('singlequoted_escaped', 1),
        (140, ':'): ('singlequoted_escaped', 1),
        (140, ';'): ('singlequoted_escaped', 1),
        (140, '<'): ('singlequoted_escaped', 1),
        (140, '='): ('singlequoted_escaped', 1),
        (140, '>'): ('singlequoted_escaped', 1),
        (140, 'IDENTIFIER'): ('singlequoted_escaped', 1),
        (140, 'LITERAL'): ('singlequoted_escaped', 1),
        (140, 'WHITESPACE'): ('singlequoted_escaped', 1),
        (140, '['): ('singlequoted_escaped', 1),
        (140, ']'): ('singlequoted_escaped', 1),
        (140, '{'): ('singlequoted_escaped', 1),
        (140, '|'): ('singlequoted_escaped', 1),
        (140, '}'): ('singlequoted_escaped', 1),
        (140, '~'): ('singlequoted_escaped', 1),
        (141, '!'): ('singlequoted_escaped', 1),
        (141, '"'): ('singlequoted_escaped', 1),
        (141, '$'): ('singlequoted_escaped', 1),
        (141, '&'): ('singlequoted_escaped', 1),
        (141, "'"): ('singlequoted_escaped', 1),
        (141, '('): ('singlequoted_escaped', 1),
        (141, ')'): ('singlequoted_escaped', 1),
        (141, '+'): ('singlequoted_escaped', 1),
        (141, ','): ('singlequoted_escaped', 1),
        (141, '-'): ('singlequoted_escaped', 1),
        (141, ':'): ('singlequoted_escaped', 1),
        (141, ';'): ('singlequoted_escaped', 1),
        (141, '<'): ('singlequoted_escaped', 1),
        (141, '='): ('singlequoted_escaped', 1),
        (141, '>'): ('singlequoted_escaped', 1),
        (141, 'IDENTIFIER'): ('singlequoted_escaped', 1),
        (141, 'LITERAL'): ('singlequoted_escaped', 1),
        (141, 'WHITESPACE'): ('singlequoted_escaped', 1),
        (141, '['): ('singlequoted_escaped', 1),
        (141, ']'): ('singlequoted_escaped', 1),
        (141, '{'): ('singlequoted_escaped', 1),
        (141, '|'): ('singlequoted_escaped', 1),
        (141, '}'): ('singlequoted_escaped', 1),
        (141, '~'): ('singlequoted_escaped', 1),
        (142, '!'): ('singlequoted_escaped', 1),
        (142, '"'): ('singlequoted_escaped', 1),
        (142, '$'): ('singlequoted_escaped', 1),
        (142, '&'): ('singlequoted_escaped', 1),
        (142, "'"): ('singlequoted_escaped', 1),
        (142, '('): ('singlequoted_escaped', 1),
        (142, ')'): ('singlequoted_escaped', 1),
        (142, '+'): ('singlequoted_escaped', 1),
        (142, ','): ('singlequoted_escaped', 1),
        (142, '-'): ('singlequoted_escaped', 1),
        (142, ':'): ('singlequoted_escaped', 1),
        (142, ';'): ('singlequoted_escaped', 1),
        (142, '<'): ('singlequoted_escaped', 1),
        (142, '='): ('singlequoted_escaped', 1),
        (142, '>'): ('singlequoted_escaped', 1),
        (142, 'IDENTIFIER'): ('singlequoted_escaped', 1),
        (142, 'LITERAL'): ('singlequoted_escaped', 1),
        (142, 'WHITESPACE'): ('singlequoted_escaped', 1),
        (142, '['): ('singlequoted_escaped', 1),
        (142, ']'): ('singlequoted_escaped', 1),
        (142, '{'): ('singlequoted_escaped', 1),
        (142, '|'): ('singlequoted_escaped', 1),
        (142, '}'): ('singlequoted_escaped', 1),
        (142, '~'): ('singlequoted_escaped', 1),
        (143, '!'): ('singlequoted_escaped', 1),
        (143, '"'): ('singlequoted_escaped', 1),
        (143, '$'): ('singlequoted_escaped', 1),
        (143, '&'): ('singlequoted_escaped', 1),
        (143, "'"): ('singlequoted_escaped', 1),
        (143, '('): ('singlequoted_escaped', 1),
        (143, ')'): ('singlequoted_escaped', 1),
        (143, '+'): ('singlequoted_escaped', 1),
        (143, ','): ('singlequoted_escaped', 1),
        (143, '-'): ('singlequoted_escaped', 1),
        (143, ':'): ('singlequoted_escaped', 1),
        (143, ';'): ('singlequoted_escaped', 1),
        (143, '<'): ('singlequoted_escaped', 1),
        (143, '='): ('singlequoted_escaped', 1),
        (143, '>'): ('singlequoted_escaped', 1),
        (143, 'IDENTIFIER'): ('singlequoted_escaped', 1),
        (143, 'LITERAL'): ('singlequoted_escaped', 1),
        (143, 'WHITESPACE'): ('singlequoted_escaped', 1),
        (143, '['): ('singlequoted_escaped', 1),
        (143, ']'): ('singlequoted_escaped', 1),
        (143, '{'): ('singlequoted_escaped', 1),
        (143, '|'): ('singlequoted_escaped', 1),
        (143, '}'): ('singlequoted_escaped', 1),
        (143, '~'): ('singlequoted_escaped', 1),
        (144, '!'): ('singlequoted_escaped', 1),
        (144, '"'): ('singlequoted_escaped', 1),
        (144, '$'): ('singlequoted_escaped', 1),
        (144, '&'): ('singlequoted_escaped', 1),
        (144, "'"): ('singlequoted_escaped', 1),
        (144, '('): ('singlequoted_escaped', 1),
        (144, ')'): ('singlequoted_escaped', 1),
        (144, '+'): ('singlequoted_escaped', 1),
        (144, ','): ('singlequoted_escaped', 1),
        (144, '-'): ('singlequoted_escaped', 1),
        (144, ':'): ('singlequoted_escaped', 1),
        (144, ';'): ('singlequoted_escaped', 1),
        (144, '<'): ('singlequoted_escaped', 1),
        (144, '='): ('singlequoted_escaped', 1),
        (144, '>'): ('singlequoted_escaped', 1),
        (144, 'IDENTIFIER'): ('singlequoted_escaped', 1),
        (144, 'LITERAL'): ('singlequoted_escaped', 1),
        (144, 'WHITESPACE'): ('singlequoted_escaped', 1),
        (144, '['): ('singlequoted_escaped', 1),
        (144, ']'): ('singlequoted_escaped', 1),
        (144, '{'): ('singlequoted_escaped', 1),
        (144, '|'): ('singlequoted_escaped', 1),
        (144, '}'): ('singlequoted_escaped', 1),
        (144, '~'): ('singlequoted_escaped', 1),
        (145, '!'): ('singlequoted_escaped', 1),
        (145, '"'): ('singlequoted_escaped', 1),
        (145, '$'): ('singlequoted_escaped', 1),
        (145, '&'): ('singlequoted_escaped', 1),
        (145, "'"): ('singlequoted_escaped', 1),
        (145, '('): ('singlequoted_escaped', 1),
        (145, ')'): ('singlequoted_escaped', 1),
        (145, '+'): ('singlequoted_escaped', 1),
        (145, ','): ('singlequoted_escaped', 1),
        (145, '-'): ('singlequoted_escaped', 1),
        (145, ':'): ('singlequoted_escaped', 1),
        (145, ';'): ('singlequoted_escaped', 1),
        (145, '<'): ('singlequoted_escaped', 1),
        (145, '='): ('singlequoted_escaped', 1),
        (145, '>'): ('singlequoted_escaped', 1),
        (145, 'IDENTIFIER'): ('singlequoted_escaped', 1),
        (145, 'LITERAL'): ('singlequoted_escaped', 1),
        (145, 'WHITESPACE'): ('singlequoted_escaped', 1),
        (145, '['): ('singlequoted_escaped', 1),
        (145, ']'): ('singlequoted_escaped', 1),
        (145, '{'): ('singlequoted_escaped', 1),
        (145, '|'): ('singlequoted_escaped', 1),
        (145, '}'): ('singlequoted_escaped', 1),
        (145, '~'): ('singlequoted_escaped', 1),
        (146, '!'): ('singlequoted_escaped', 1),
        (146, '"'): ('singlequoted_escaped', 1),
        (146, '$'): ('singlequoted_escaped', 1),
        (146, '&'): ('singlequoted_escaped', 1),
        (146, "'"): ('singlequoted_escaped', 1),
        (146, '('): ('singlequoted_escaped', 1),
        (146, ')'): ('singlequoted_escaped', 1),
        (146, '+'): ('singlequoted_escaped', 1),
        (146, ','): ('singlequoted_escaped', 1),
        (146, '-'): ('singlequoted_escaped', 1),
        (146, ':'): ('singlequoted_escaped', 1),
        (146, ';'): ('singlequoted_escaped', 1),
        (146, '<'): ('singlequoted_escaped', 1),
        (146, '='): ('singlequoted_escaped', 1),
        (146, '>'): ('singlequoted_escaped', 1),
        (146, 'IDENTIFIER'): ('singlequoted_escaped', 1),
        (146, 'LITERAL'): ('singlequoted_escaped', 1),
        (146, 'WHITESPACE'): ('singlequoted_escaped', 1),
        (146, '['): ('singlequoted_escaped', 1),
        (146, ']'): ('singlequoted_escaped', 1),
        (146, '{'): ('singlequoted_escaped', 1),
        (146, '|'): ('singlequoted_escaped', 1),
        (146, '}'): ('singlequoted_escaped', 1),
        (146, '~'): ('singlequoted_escaped', 1),
        (147, '!'): ('singlequoted_escaped', 1),
        (147, '"'): ('singlequoted_escaped', 1),
        (147, '$'): ('singlequoted_escaped', 1),
        (147, '&'): ('singlequoted_escaped', 1),
        (147, "'"): ('singlequoted_escaped', 1),
        (147, '('): ('singlequoted_escaped', 1),
        (147, ')'): ('singlequoted_escaped', 1),
        (147, '+'): ('singlequoted_escaped', 1),
        (147, ','): ('singlequoted_escaped', 1),
        (147, '-'): ('singlequoted_escaped', 1),
        (147, ':'): ('singlequoted_escaped', 1),
        (147, ';'): ('singlequoted_escaped', 1),
        (147, '<'): ('singlequoted_escaped', 1),
        (147, '='): ('singlequoted_escaped', 1),
        (147, '>'): ('singlequoted_escaped', 1),
        (147, 'IDENTIFIER'): ('singlequoted_escaped', 1),
        (147, 'LITERAL'): ('singlequoted_escaped', 1),
        (147, 'WHITESPACE'): ('singlequoted_escaped', 1),
        (147, '['): ('singlequoted_escaped', 1),
        (147, ']'): ('singlequoted_escaped', 1),
        (147, '{'): ('singlequoted_escaped', 1),
        (147, '|'): ('singlequoted_escaped', 1),
        (147, '}'): ('singlequoted_escaped', 1),
        (147, '~'): ('singlequoted_escaped', 1),
        (148, '!'): ('singlequoted_escaped', 1),
        (148, '"'): ('singlequoted_escaped', 1),
        (148, '$'): ('singlequoted_escaped', 1),
        (148, '&'): ('singlequoted_escaped', 1),
        (148, "'"): ('singlequoted_escaped', 1),
        (148, '('): ('singlequoted_escaped', 1),
        (148, ')'): ('singlequoted_escaped', 1),
        (148, '+'): ('singlequoted_escaped', 1),
        (148, ','): ('singlequoted_escaped', 1),
        (148, '-'): ('singlequoted_escaped', 1),
        (148, ':'): ('singlequoted_escaped', 1),
        (148, ';'): ('singlequoted_escaped', 1),
        (148, '<'): ('singlequoted_escaped', 1),
        (148, '='): ('singlequoted_escaped', 1),
        (148, '>'): ('singlequoted_escaped', 1),
        (148, 'IDENTIFIER'): ('singlequoted_escaped', 1),
        (148, 'LITERAL'): ('singlequoted_escaped', 1),
        (148, 'WHITESPACE'): ('singlequoted_escaped', 1),
        (148, '['): ('singlequoted_escaped', 1),
        (148, ']'): ('singlequoted_escaped', 1),
        (148, '{'): ('singlequoted_escaped', 1),
        (148, '|'): ('singlequoted_escaped', 1),
        (148, '}'): ('singlequoted_escaped', 1),
        (148, '~'): ('singlequoted_escaped', 1),
        (149, '!'): ('singlequoted_escaped', 1),
        (149, '"'): ('singlequoted_escaped', 1),
        (149, '$'): ('singlequoted_escaped', 1),
        (149, '&'): ('singlequoted_escaped', 1),
        (149, "'"): ('singlequoted_escaped', 1),
        (149, '('): ('singlequoted_escaped', 1),
        (149, ')'): ('singlequoted_escaped', 1),
        (149, '+'): ('singlequoted_escaped', 1),
        (149, ','): ('singlequoted_escaped', 1),
        (149, '-'): ('singlequoted_escaped', 1),
        (149, ':'): ('singlequoted_escaped', 1),
        (149, ';'): ('singlequoted_escaped', 1),
        (149, '<'): ('singlequoted_escaped', 1),
        (149, '='): ('singlequoted_escaped', 1),
        (149, '>'): ('singlequoted_escaped', 1),
        (149, 'IDENTIFIER'): ('singlequoted_escaped', 1),
        (149, 'LITERAL'): ('singlequoted_escaped', 1),
        (149, 'WHITESPACE'): ('singlequoted_escaped', 1),
        (149, '['): ('singlequoted_escaped', 1),
        (149, ']'): ('singlequoted_escaped', 1),
        (149, '{'): ('singlequoted_escaped', 1),
        (149, '|'): ('singlequoted_escaped', 1),
        (149, '}'): ('singlequoted_escaped', 1),
        (149, '~'): ('singlequoted_escaped', 1),
        (150, '!'): ('singlequoted_escaped', 1),
        (150, '"'): ('singlequoted_escaped', 1),
        (150, '$'): ('singlequoted_escaped', 1),
        (150, '&'): ('singlequoted_escaped', 1),
        (150, "'"): ('singlequoted_escaped', 1),
        (150, '('): ('singlequoted_escaped', 1),
        (150, ')'): ('singlequoted_escaped', 1),
        (150, '+'): ('singlequoted_escaped', 1),
        (150, ','): ('singlequoted_escaped', 1),
        (150, '-'): ('singlequoted_escaped', 1),
        (150, ':'): ('singlequoted_escaped', 1),
        (150, ';'): ('singlequoted_escaped', 1),
        (150, '<'): ('singlequoted_escaped', 1),
        (150, '='): ('singlequoted_escaped', 1),
        (150, '>'): ('singlequoted_escaped', 1),
        (150, 'IDENTIFIER'): ('singlequoted_escaped', 1),
        (150, 'LITERAL'): ('singlequoted_escaped', 1),
        (150, 'WHITESPACE'): ('singlequoted_escaped', 1),
        (150, '['): ('singlequoted_escaped', 1),
        (150, ']'): ('singlequoted_escaped', 1),
        (150, '{'): ('singlequoted_escaped', 1),
        (150, '|'): ('singlequoted_escaped', 1),
        (150, '}'): ('singlequoted_escaped', 1),
        (150, '~'): ('singlequoted_escaped', 1),
        (151, '!'): ('singlequoted_escaped', 1),
        (151, '"'): ('singlequoted_escaped', 1),
        (151, '$'): ('singlequoted_escaped', 1),
        (151, '&'): ('singlequoted_escaped', 1),
        (151, "'"): ('singlequoted_escaped', 1),
        (151, '('): ('singlequoted_escaped', 1),
        (151, ')'): ('singlequoted_escaped', 1),
        (151, '+'): ('singlequoted_escaped', 1),
        (151, ','): ('singlequoted_escaped', 1),
        (151, '-'): ('singlequoted_escaped', 1),
        (151, ':'): ('singlequoted_escaped', 1),
        (151, ';'): ('singlequoted_escaped', 1),
        (151, '<'): ('singlequoted_escaped', 1),
        (151, '='): ('singlequoted_escaped', 1),
        (151, '>'): ('singlequoted_escaped', 1),
        (151, 'IDENTIFIER'): ('singlequoted_escaped', 1),
        (151, 'LITERAL'): ('singlequoted_escaped', 1),
        (151, 'WHITESPACE'): ('singlequoted_escaped', 1),
        (151, '['): ('singlequoted_escaped', 1),
        (151, ']'): ('singlequoted_escaped', 1),
        (151, '{'): ('singlequoted_escaped', 1),
        (151, '|'): ('singlequoted_escaped', 1),
        (151, '}'): ('singlequoted_escaped', 1),
        (151, '~'): ('singlequoted_escaped', 1),
        (152, '!'): ('singlequoted_escaped', 1),
        (152, '"'): ('singlequoted_escaped', 1),
        (152, '$'): ('singlequoted_escaped', 1),
        (152, '&'): ('singlequoted_escaped', 1),
        (152, "'"): ('singlequoted_escaped', 1),
        (152, '('): ('singlequoted_escaped', 1),
        (152, ')'): ('singlequoted_escaped', 1),
        (152, '+'): ('singlequoted_escaped', 1),
        (152, ','): ('singlequoted_escaped', 1),
        (152, '-'): ('singlequoted_escaped', 1),
        (152, ':'): ('singlequoted_escaped', 1),
        (152, ';'): ('singlequoted_escaped', 1),
        (152, '<'): ('singlequoted_escaped', 1),
        (152, '='): ('singlequoted_escaped', 1),
        (152, '>'): ('singlequoted_escaped', 1),
        (152, 'IDENTIFIER'): ('singlequoted_escaped', 1),
        (152, 'LITERAL'): ('singlequoted_escaped', 1),
        (152, 'WHITESPACE'): ('singlequoted_escaped', 1),
        (152, '['): ('singlequoted_escaped', 1),
        (152, ']'): ('singlequoted_escaped', 1),
        (152, '{'): ('singlequoted_escaped', 1),
        (152, '|'): ('singlequoted_escaped', 1),
        (152, '}'): ('singlequoted_escaped', 1),
        (152, '~'): ('singlequoted_escaped', 1),
        (153, '!'): ('singlequoted_escaped', 1),
        (153, '"'): ('singlequoted_escaped', 1),
        (153, '$'): ('singlequoted_escaped', 1),
        (153, '&'): ('singlequoted_escaped', 1),
        (153, "'"): ('singlequoted_escaped', 1),
        (153, '('): ('singlequoted_escaped', 1),
        (153, ')'): ('singlequoted_escaped', 1),
        (153, '+'): ('singlequoted_escaped', 1),
        (153, ','): ('singlequoted_escaped', 1),
        (153, '-'): ('singlequoted_escaped', 1),
        (153, ':'): ('singlequoted_escaped', 1),
        (153, ';'): ('singlequoted_escaped', 1),
        (153, '<'): ('singlequoted_escaped', 1),
        (153, '='): ('singlequoted_escaped', 1),
        (153, '>'): ('singlequoted_escaped', 1),
        (153, 'IDENTIFIER'): ('singlequoted_escaped', 1),
        (153, 'LITERAL'): ('singlequoted_escaped', 1),
        (153, 'WHITESPACE'): ('singlequoted_escaped', 1),
        (153, '['): ('singlequoted_escaped', 1),
        (153, ']'): ('singlequoted_escaped', 1),
        (153, '{'): ('singlequoted_escaped', 1),
        (153, '|'): ('singlequoted_escaped', 1),
        (153, '}'): ('singlequoted_escaped', 1),
        (153, '~'): ('singlequoted_escaped', 1)
    }
    _goto = {
        (0, '_25?'): 8, (0, 'assignment'): 2, (0, 'assignments'): 1,
        (2, '_1*'): 3, (5, '_25?'): 8, (5, 'assignment'): 6, (8, '_4*'): 9,
        (9, 'assignmentvarwithop'): 10, (9, 'assignmentvarwithoutop'): 13,
        (9, 'identifier'): 15, (10, '_(49)'): 87, (10, '_50+'): 81,
        (10, 'doublequoted'): 85, (10, 'funcall'): 83, (10, 'literal'): 82,
        (10, 'singlequoted'): 86, (10, 'value'): 78, (10, 'valuelist'): 11,
        (10, 'varcall'): 84, (15, '_25?'): 16, (16, '_6?'): 17,
        (16, 'condition'): 19, (17, 'assignmentop'): 18, (21, '_25?'): 22,
        (22, 'conjunction'): 35, (22, 'disjunction'): 23,
        (22, 'identifier'): 45, (22, 'logicunop'): 57, (22, 'test'): 40,
        (23, '_25?'): 24, (25, '_25?'): 26, (33, '_25?'): 34, (35, '_25?'): 36,
        (36, 'disjunctionop'): 37, (37, '_25?'): 38, (38, 'conjunction'): 39,
        (38, 'identifier'): 45, (38, 'logicunop'): 57, (38, 'test'): 40,
        (40, '_25?'): 41, (41, 'conjunctionop'): 42, (42, '_25?'): 43,
        (43, 'identifier'): 45, (43, 'logicunop'): 57, (43, 'test'): 44,
        (45, '_25?'): 46, (46, 'testop'): 47, (47, '_25?'): 48,
        (48, '_(49)'): 87, (48, '_50+'): 81, (48, 'doublequoted'): 85,
        (48, 'funcall'): 83, (48, 'literal'): 82, (48, 'singlequoted'): 86,
        (48, 'value'): 49, (48, 'varcall'): 84, (50, '_(49)'): 87,
        (50, '_50+'): 81, (50, 'doublequoted'): 85, (50, 'funcall'): 83,
        (50, 'literal'): 82, (50, 'singlequoted'): 86, (50, 'value'): 114,
        (50, 'varcall'): 84, (52, '_25?'): 53, (53, 'conjunction'): 35,
        (53, 'disjunction'): 54, (53, 'identifier'): 45, (53, 'logicunop'): 57,
        (53, 'test'): 40, (54, '_25?'): 55, (57, '_25?'): 58,
        (58, 'conjunction'): 35, (58, 'disjunction'): 59,
        (58, 'identifier'): 45, (58, 'logicunop'): 57, (58, 'test'): 40,
        (78, '_57*'): 79, (79, '_25?'): 80, (81, '_(49)'): 88,
        (81, 'doublequoted'): 85, (81, 'funcall'): 83, (81, 'literal'): 82,
        (81, 'singlequoted'): 86, (81, 'varcall'): 84, (89, '_52*'): 90,
        (90, '_(51)'): 97, (90, 'doublequoted_escaped'): 94,
        (90, 'funcall'): 95, (90, 'literal'): 92, (90, 'varcall'): 96,
        (98, '_54*'): 99, (99, '_(53)'): 104, (99, 'literal'): 101,
        (99, 'singlequoted_escaped'): 103, (107, 'identifier'): 115,
        (108, '_25?'): 109, (109, '_(49)'): 87, (109, '_50+'): 81,
        (109, 'doublequoted'): 85, (109, 'funcall'): 83, (109, 'literal'): 82,
        (109, 'singlequoted'): 86, (109, 'value'): 110, (109, 'varcall'): 84,
        (110, '_57*'): 111, (111, '_25?'): 112, (116, '_(49)'): 87,
        (116, '_50+'): 81, (116, 'doublequoted'): 85, (116, 'funcall'): 83,
        (116, 'literal'): 82, (116, 'singlequoted'): 86, (116, 'value'): 117,
        (116, 'varcall'): 84
    }
    _shift = {
        (0, 'EOF'): 7, (0, 'WHITESPACE'): 51, (1, EOF): 154, (3, ':'): 5,
        (3, 'EOF'): 4, (5, 'WHITESPACE'): 51, (9, 'IDENTIFIER'): 20,
        (10, '"'): 89, (10, '$'): 107, (10, "'"): 98, (10, ','): 12,
        (10, 'IDENTIFIER'): 105, (10, 'LITERAL'): 106, (13, ','): 14,
        (15, 'WHITESPACE'): 51, (16, '['): 21, (17, '+'): 29, (17, '-'): 32,
        (17, ':'): 27, (17, '='): 31, (21, 'WHITESPACE'): 51, (22, '!'): 60,
        (22, '('): 52, (22, 'IDENTIFIER'): 20, (23, 'WHITESPACE'): 51,
        (24, ']'): 25, (25, 'WHITESPACE'): 51, (27, '='): 28, (29, '='): 30,
        (32, '='): 33, (33, 'WHITESPACE'): 51, (35, 'WHITESPACE'): 51,
        (36, ';'): 61, (36, '|'): 62, (37, 'WHITESPACE'): 51, (38, '!'): 60,
        (38, '('): 52, (38, 'IDENTIFIER'): 20, (40, 'WHITESPACE'): 51,
        (41, '&'): 65, (41, ','): 64, (42, 'WHITESPACE'): 51, (43, '!'): 60,
        (43, '('): 52, (43, 'IDENTIFIER'): 20, (45, 'WHITESPACE'): 51,
        (46, '!'): 69, (46, '<'): 71, (46, '='): 67, (46, '>'): 72,
        (46, '~'): 75, (47, 'WHITESPACE'): 51, (48, '"'): 89, (48, '$'): 107,
        (48, "'"): 98, (48, 'IDENTIFIER'): 105, (48, 'LITERAL'): 106,
        (50, '"'): 89, (50, '$'): 107, (50, "'"): 98, (50, 'IDENTIFIER'): 105,
        (50, 'LITERAL'): 106, (52, 'WHITESPACE'): 51, (53, '!'): 60,
        (53, '('): 52, (53, 'IDENTIFIER'): 20, (54, 'WHITESPACE'): 51,
        (55, ')'): 56, (57, 'WHITESPACE'): 51, (58, '!'): 60, (58, '('): 52,
        (58, 'IDENTIFIER'): 20, (62, '|'): 63, (65, '&'): 66, (67, '='): 68,
        (67, '~'): 77, (69, '='): 70, (71, '='): 73, (72, '='): 74,
        (75, '='): 76, (79, 'WHITESPACE'): 50, (81, '"'): 89, (81, '$'): 107,
        (81, "'"): 98, (81, 'IDENTIFIER'): 105, (81, 'LITERAL'): 106,
        (90, '!'): 119, (90, '"'): 91, (90, '$'): 107, (90, '&'): 126,
        (90, "'"): 133, (90, '+'): 131, (90, ','): 127, (90, '-'): 132,
        (90, ':'): 129, (90, ';'): 128, (90, '<'): 121, (90, '='): 120,
        (90, '>'): 122, (90, 'IDENTIFIER'): 105, (90, 'LITERAL'): 106,
        (90, 'WHITESPACE'): 93, (90, '['): 123, (90, ']'): 124, (90, '|'): 125,
        (90, '~'): 130, (99, '!'): 134, (99, '"'): 148, (99, '$'): 149,
        (99, '&'): 141, (99, "'"): 100, (99, '('): 150, (99, ')'): 151,
        (99, '+'): 146, (99, ','): 142, (99, '-'): 147, (99, ':'): 144,
        (99, ';'): 143, (99, '<'): 136, (99, '='): 135, (99, '>'): 137,
        (99, 'IDENTIFIER'): 105, (99, 'LITERAL'): 106, (99, 'WHITESPACE'): 102,
        (99, '['): 138, (99, ']'): 139, (99, '{'): 152, (99, '|'): 140,
        (99, '}'): 153, (99, '~'): 145, (107, '('): 108,
        (107, 'IDENTIFIER'): 20, (107, '{'): 116, (108, 'WHITESPACE'): 51,
        (109, '"'): 89, (109, '$'): 107, (109, "'"): 98,
        (109, 'IDENTIFIER'): 105, (109, 'LITERAL'): 106,
        (111, 'WHITESPACE'): 50, (112, ')'): 113, (116, '"'): 89,
        (116, '$'): 107, (116, "'"): 98, (116, 'IDENTIFIER'): 105,
        (116, 'LITERAL'): 106, (117, '}'): 118
    }

    def __init__(self, max_err=None, errcorr_pre=4, errcorr_post=4):
        """Create a new parser instance.

        The constructor arguments are all optional, they control the
        handling of parse errors: `max_err` can be given to bound the
        number of errors reported during one run of the parser.
        `errcorr_pre` controls how many tokens before an invalid token
        the parser considers when trying to repair the input.
        `errcorr_post` controls how far beyond an invalid token the
        parser reads when evaluating the quality of an attempted
        repair.
        """
        self.max_err = max_err
        self.m = errcorr_pre
        self.n = errcorr_post

    @staticmethod
    def leaves(tree):
        """Iterate over the leaves of a parse tree.

        This function can be used to reconstruct the input from a
        parse tree.
        """
        if tree[0] in Parser.terminals:
            yield tree
        else:
            for x in tree[1:]:
                for t in Parser.leaves(x):
                    yield t

    def _parse(self, input, stack, state):
        """Internal function to construct a parse tree.

        'Input' is the input token stream, 'stack' is the inital stack
        and 'state' is the inital state of the automaton.

        Returns a 4-tuple (done, count, state, error).  'done' is a
        boolean indicationg whether parsing is completed, 'count' is
        number of successfully shifted tokens, and 'error' is None on
        success or else the first token which could not be parsed.
        """
        read_next = True
        count = 0
        while state != self._halting_state:
            if read_next:
                try:
                    lookahead = next(input)
                except StopIteration:
                    return (False,count,state,None)
                read_next = False
            token = lookahead[0]

            if (state,token) in self._shift:
                stack.append((state,lookahead))
                state = self._shift[(state,token)]
                read_next = True
                count += 1
            elif (state,token) in self._reduce:
                X,n = self._reduce[(state,token)]
                if n > 0:
                    state = stack[-n][0]
                    tree = [ X ]
                    for s in stack[-n:]:
                        if s[1][0] in self._transparent:
                            tree.extend(s[1][1:])
                        else:
                            tree.append(s[1])
                    tree = tuple(tree)
                    del stack[-n:]
                else:
                    tree = (X,)
                stack.append((state,tree))
                state = self._goto[(state,X)]
            else:
                return (False,count,state,lookahead)
        return (True,count,state,None)

    def _try_parse(self, input, stack, state):
        count = 0
        while state != self._halting_state and count < len(input):
            token = input[count][0]

            if (state,token) in self._shift:
                stack.append(state)
                state = self._shift[(state,token)]
                count += 1
            elif (state,token) in self._reduce:
                X,n = self._reduce[(state,token)]
                if n > 0:
                    state = stack[-n]
                    del stack[-n:]
                stack.append(state)
                state = self._goto[(state,X)]
            else:
                break
        return count

    def parse(self, input):
        """Parse the tokens from `input` and construct a parse tree.

        `input` must be an interable over tuples.  The first element
        of each tuple must be a terminal symbol of the grammar which
        is used for parsing.  All other element of the tuple are just
        copied into the constructed parse tree.

        If `input` is invalid, a ParseErrors exception is raised.
        Otherwise the function returns the parse tree.
        """
        errors = []
        input = chain(input, [(self.EOF,)])
        stack = []
        state = 0
        while True:
            done,_,state,lookahead = self._parse(input, stack, state)
            if done:
                break

            expect = [ t for s,t in list(self._reduce.keys())+list(self._shift.keys())
                       if s == state ]
            errors.append((lookahead, expect))
            if self.max_err is not None and len(errors) >= self.max_err:
                raise self.ParseErrors(errors, None)

            queue = []
            def split_input(m, stack, lookahead, input, queue):
                for s in stack:
                    for t in self.leaves(s[1]):
                        queue.append(t)
                        if len(queue) > m:
                            yield queue.pop(0)
                queue.append(lookahead)
            in2 = split_input(self.m, stack, lookahead, input, queue)
            stack = []
            done,_,state,lookahead = self._parse(in2, stack, 0)
            m = len(queue)
            for i in range(0, self.n):
                try:
                    queue.append(next(input))
                except StopIteration:
                    break

            def vary_queue(queue, m):
                for i in range(m-1, -1, -1):
                    for t in self.terminals:
                        yield queue[:i]+[(t,)]+queue[i:]
                    if queue[i][0] == self.EOF:
                        continue
                    for t in self.terminals:
                        if t == queue[i]:
                            continue
                        yield queue[:i]+[(t,)]+queue[i+1:]
                    yield queue[:i]+queue[i+1:]
            best_val = len(queue)-m+1
            best_queue = queue
            for q2 in vary_queue(queue, m):
                pos = self._try_parse(q2, [ s[0] for s in stack ], state)
                val = len(q2) - pos
                if val < best_val:
                    best_val = val
                    best_queue = q2
                    if val == len(q2):
                        break
            if best_val >= len(queue)-m+1:
                raise self.ParseErrors(errors, None)
            input = chain(best_queue, input)

        tree = stack[0][1]
        if errors:
            raise self.ParseErrors(errors, tree)
        return tree



# BEGIN FILE main.py



#!/usr/bin/python3

def main():
	print("fak u dolan")

if __name__ == "__main__":
	main()



# End of assembled [SFT]make file
# Assembled at 
