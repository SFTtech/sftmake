LaidoutAutomaton(set(['literal_dblquoted', 'equals', 'literal_quoted', 'lt_gt', 'literal', 'tilde', 'exclam']), set(['a', '!', '"', 'whitespace', "'", '<>', 'other', '();, whitespace', '>', '=', '<', '~']), {('literal', 'a'): set([]), ('tilde', 'whitespace'): set([]), ('literal_quoted', '>'): set([]), ('literal_quoted', 'whitespace'): set([]), ('tilde', 'other'): set([]), ('tilde', '='): set(['literal']), ('literal_dblquoted', '~'): set([]), ('equals', 'a'): set([]), ('lt_gt', 'a'): set([]), ('tilde', '<>'): set([]), ('literal_dblquoted', '"'): set(['literal']), ('literal_dblquoted', '<'): set([]), ('exclam', '>'): set([]), ('exclam', 'whitespace'): set([]), ('literal', "'"): set(['literal_quoted']), ('literal_dblquoted', '();, whitespace'): set([]), ('literal', '='): set(['equals']), ('equals', '();, whitespace'): set([]), ('equals', '~'): set([]), ('exclam', 'other'): set(['literal']), ('literal_dblquoted', "'"): set([]), ('literal_quoted', '='): set([]), ('equals', '>'): set([]), ('literal', '"'): set(['literal_dblquoted']), ('tilde', '>'): set([]), ('equals', 'whitespace'): set([]), ('literal_quoted', 'other'): set(['literal_quoted']), ('exclam', 'a'): set([]), ('equals', '"'): set(['literal_dblquoted']), ('literal_dblquoted', '='): set([]), ('lt_gt', "'"): set(['literal_quoted']), ('equals', '='): set([]), ('literal_quoted', "'"): set(['literal']), ('literal_dblquoted', 'a'): set([]), ('tilde', '"'): set([]), ('literal', '<'): set([]), ('lt_gt', '<>'): set([]), ('literal_quoted', 'a'): set([]), ('lt_gt', '"'): set(['literal_dblquoted']), ('literal', '~'): set(['tilde']), ('literal_quoted', '();, whitespace'): set([]), ('exclam', "'"): set(['literal_quoted']), ('lt_gt', '='): set([]), ('literal_dblquoted', 'other'): set(['literal_dblquoted']), ('literal_quoted', '<'): set([]), ('exclam', '='): set([]), ('literal', '!'): set(['exclam']), ('literal_quoted', '~'): set([]), ('exclam', '();, whitespace'): set([]), ('tilde', '!'): set([]), ('literal_dblquoted', 'whitespace'): set([]), ('lt_gt', '();, whitespace'): set([]), ('literal_dblquoted', '>'): set([]), ('exclam', '<'): set([]), ('equals', 'other'): set(['literal']), ('exclam', '"'): set(['literal_dblquoted']), ('lt_gt', '>'): set([]), ('lt_gt', '~'): set([]), ('exclam', '~'): set([]), ('literal', 'other'): set(['literal']), ('tilde', '();, whitespace'): set([]), ('equals', '<>'): set([]), ('literal', '<>'): set(['lt_gt']), ('literal_quoted', '"'): set([]), ('lt_gt', 'other'): set(['literal']), ('tilde', "'"): set([]), ('lt_gt', 'whitespace'): set([]), ('equals', '!'): set([]), ('tilde', '~'): set([]), ('equals', "'"): set(['literal_quoted']), ('literal_dblquoted', '<>'): set([]), ('exclam', '!'): set([]), ('literal', 'whitespace'): set([]), ('tilde', '<'): set([]), ('lt_gt', '!'): set([]), ('literal', '();, whitespace'): set([]), ('literal_dblquoted', '!'): set([]), ('exclam', '<>'): set([]), ('lt_gt', '<'): set([]), ('literal_quoted', '!'): set([]), ('literal', '>'): set([]), ('tilde', 'a'): set([]), ('literal_quoted', '<>'): set([]), ('equals', '<'): set([])}, 'literal', set(['literal']), layout=AutomatonLayout(states={'literal_dblquoted': {'position': Vector(2.25, 4.25)}, 'equals': {'position': Vector(-1.5, -4.0)}, 'literal_quoted': {'position': Vector(-6.0, -7.75)}, 'lt_gt': {'position': Vector(-12.0, 3.5)}, 'literal': {'position': Vector(-5.25, -0.25)}, 'tilde': {'position': Vector(-9.5, -5.5)}, 'exclam': {'position': Vector(0.5, -0.75)}}, transitions={('tilde', '=', 'literal'): {'offset': 1.75}, ('literal', '=', 'equals'): {'offset': -2.0}, ('literal', '"', 'literal_dblquoted'): {'offset': 0.0}, ('lt_gt', '"', 'literal_dblquoted'): {'offset': 10.0}, ('literal', 'other', 'literal'): {'angle': 3.141592653589793, 'offset': 5.5}, ('equals', 'other', 'literal'): {'offset': -1.0}, ('equals', "'", 'literal_quoted'): {'offset': 0.0}, ('exclam', '"', 'literal_dblquoted'): {'offset': 0.0}, ('exclam', 'other', 'literal'): {'offset': 0.25}, ('literal_dblquoted', '"', 'literal'): {'offset': -1.5}, ('literal_dblquoted', 'other', 'literal_dblquoted'): {'angle': 1.5707963267948966, 'offset': 5.5}, ('literal', "'", 'literal_quoted'): {'offset': -1.5}, ('equals', '"', 'literal_dblquoted'): {'offset': -12.0}, ('literal', '~', 'tilde'): {'offset': 0.0}, ('literal_quoted', 'other', 'literal_quoted'): {'angle': 5.890486225480862, 'offset': 3.25}, ('lt_gt', "'", 'literal_quoted'): {'offset': -9.0}, ('exclam', "'", 'literal_quoted'): {'offset': 6.0}, ('literal', '<>', 'lt_gt'): {'offset': 1.5}, ('literal_quoted', "'", 'literal'): {'offset': 0.0}, ('literal', '!', 'exclam'): {'offset': 2.75}, ('lt_gt', 'other', 'literal'): {'offset': 0.75}}))